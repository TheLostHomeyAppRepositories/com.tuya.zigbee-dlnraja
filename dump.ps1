#!/usr/bin/env pwsh

param(
    [int]$RunSeconds = 300
)

Write-Host "üöÄ HOMEY DUMP BUNDLE - BRIEF 'B√âTON'" -ForegroundColor Green
Write-Host "=" * 60 -ForegroundColor Green

# Cr√©er le dossier de dump
$timestamp = Get-Date -Format "yyyyMMdd-HHmm"
$dumpDir = "dumps/$timestamp"
$dumpPath = "dumps/dump-$timestamp"

if (!(Test-Path "dumps")) {
    New-Item -ItemType Directory -Path "dumps" | Out-Null
}

New-Item -ItemType Directory -Path $dumpDir | Out-Null

Write-Host "üìÅ Dossier de dump cr√©√©: $dumpDir" -ForegroundColor Yellow

# 1. Capture de l'environnement
Write-Host "üîç Capture de l'environnement..." -ForegroundColor Cyan
$env = @"
=== ENVIRONNEMENT ===
Date: $(Get-Date)
PWD: $(Get-Location)
Node: $(node --version 2>$null || "Non install√©")
NPM: $(npm --version 2>$null || "Non install√©")
Homey CLI: $(homey --version 2>$null || "Non install√©")
Git: $(git --version 2>$null || "Non install√©")
"@

$env | Out-File -FilePath "$dumpDir/env.txt" -Encoding UTF8
Write-Host "‚úÖ Environnement captur√©" -ForegroundColor Green

# 2. Copie app.json
if (Test-Path "app.json") {
    Copy-Item "app.json" "$dumpDir/app.json"
    Write-Host "‚úÖ app.json copi√©" -ForegroundColor Green
} else {
    Write-Host "‚ùå app.json non trouv√©" -ForegroundColor Red
}

# 3. Strip BOM des JSON
Write-Host "üßπ Nettoyage BOM des JSON..." -ForegroundColor Cyan
$bomLog = @()
$jsonFiles = Get-ChildItem -Recurse -Include "*.json" | Where-Object { $_.FullName -notlike "*node_modules*" }

foreach ($file in $jsonFiles) {
    try {
        $content = Get-Content $file.FullName -Raw -Encoding UTF8
        if ($content.StartsWith([char]0xFEFF)) {
            $cleanContent = $content.Substring(1)
            Set-Content $file.FullName -Value $cleanContent -Encoding UTF8 -NoNewline
            $bomLog += "‚úÖ BOM retir√©: $($file.FullName)"
        }
    } catch {
        $bomLog += "‚ùå Erreur: $($file.FullName) - $($_.Exception.Message)"
    }
}

$bomLog | Out-File -FilePath "$dumpDir/strip-bom.log" -Encoding UTF8
Write-Host "‚úÖ BOM nettoy√© sur $($jsonFiles.Count) fichiers" -ForegroundColor Green

# 4. Lint JSON
Write-Host "üîç Validation JSON..." -ForegroundColor Cyan
$lintLog = @()
$invalidJson = @()

foreach ($file in $jsonFiles) {
    try {
        $null = Get-Content $file.FullName | ConvertFrom-Json
        $lintLog += "‚úÖ $($file.FullName)"
    } catch {
        $lintLog += "‚ùå $($file.FullName) - $($_.Exception.Message)"
        $invalidJson += $file.FullName
    }
}

$lintLog | Out-File -FilePath "$dumpDir/lint-json.log" -Encoding UTF8
Write-Host "‚úÖ JSON valid√©: $($jsonFiles.Count - $invalidJson.Count)/$($jsonFiles.Count) valides" -ForegroundColor Green

# 5. Tree de l'arborescence
Write-Host "üå≥ G√©n√©ration de l'arborescence..." -ForegroundColor Cyan
$tree = @()
$tree += "=== ARBORESCENCE PROJET ==="
$tree += "Date: $(Get-Date)"
$tree += ""

function Get-TreeStructure {
    param([string]$path, [int]$level = 0)
    
    $indent = "  " * $level
    $items = Get-ChildItem $path | Sort-Object Name
    
    foreach ($item in $items) {
        if ($item.Name -notlike "node_modules" -and $item.Name -notlike ".git" -and $item.Name -notlike "dumps") {
            $tree += "$indent$($item.Name)/"
            if ($item.PSIsContainer) {
                Get-TreeStructure $item.FullName ($level + 1)
            }
        }
    }
}

Get-TreeStructure "."
$tree | Out-File -FilePath "$dumpDir/tree.txt" -Encoding UTF8
Write-Host "‚úÖ Arborescence g√©n√©r√©e" -ForegroundColor Green

# 6. Validation Homey (debug)
Write-Host "üîç Validation Homey (debug)..." -ForegroundColor Cyan
try {
    $validateOutput = homey app validate -l debug 2>&1 | Out-String
    $validateOutput | Out-File -FilePath "$dumpDir/validate.log" -Encoding UTF8
    
    if ($validateOutput -like "*‚úì*") {
        Write-Host "‚úÖ Validation Homey r√©ussie" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Validation Homey avec avertissements" -ForegroundColor Yellow
    }
} catch {
    $errorMsg = "‚ùå Erreur validation: $($_.Exception.Message)"
    $errorMsg | Out-File -FilePath "$dumpDir/validate.log" -Encoding UTF8
    Write-Host $errorMsg -ForegroundColor Red
}

# 7. Lancement Homey app run
Write-Host "üöÄ Lancement Homey app run..." -ForegroundColor Cyan
Write-Host "‚è±Ô∏è Dur√©e: $RunSeconds secondes" -ForegroundColor Yellow
Write-Host "üõë Arr√™t automatique dans $RunSeconds secondes (Ctrl+C pour arr√™t manuel)" -ForegroundColor Yellow

$runLog = @()
$runLog += "=== LOGS HOMEY APP RUN ==="
$runLog += "Date: $(Get-Date)"
$runLog += "Dur√©e: $RunSeconds secondes"
$runLog += ""

# Timer pour arr√™t automatique
$timer = [System.Diagnostics.Stopwatch]::StartNew()

try {
    # Lancer homey app run en arri√®re-plan
    $job = Start-Job -ScriptBlock {
        param($dumpDir)
        try {
            homey app run 2>&1 | Tee-Object -FilePath "$dumpDir/run.log" -Append
        } catch {
            "‚ùå Erreur: $($_.Exception.Message)" | Out-File -FilePath "$dumpDir/run.log" -Append
        }
    } -ArgumentList $dumpDir
    
    # Attendre la fin du timer ou interruption
    while ($timer.Elapsed.TotalSeconds -lt $RunSeconds) {
        Start-Sleep -Seconds 1
        
        # Afficher le temps restant
        $remaining = $RunSeconds - [int]$timer.Elapsed.TotalSeconds
        Write-Host "‚è±Ô∏è Temps restant: $remaining secondes" -NoNewline -ForegroundColor Yellow
        Write-Host "`r" -NoNewline
        
        # V√©rifier si le job est termin√©
        if ($job.State -eq "Completed") {
            Write-Host "‚úÖ Homey app run termin√©" -ForegroundColor Green
            break
        }
    }
    
    # Arr√™ter le job si n√©cessaire
    if ($job.State -eq "Running") {
        Write-Host "üõë Arr√™t automatique du job..." -ForegroundColor Yellow
        Stop-Job $job
        Remove-Job $job
    }
    
} catch {
    $errorMsg = "‚ùå Erreur lors du lancement: $($_.Exception.Message)"
    $errorMsg | Out-File -FilePath "$dumpDir/run.log" -Encoding UTF8 -Append
    Write-Host $errorMsg -ForegroundColor Red
}

# 8. Cr√©ation du ZIP final
Write-Host "üì¶ Cr√©ation du ZIP final..." -ForegroundColor Cyan
try {
    if (Get-Command "Compress-Archive" -ErrorAction SilentlyContinue) {
        Compress-Archive -Path $dumpDir -DestinationPath "$dumpPath.zip" -Force
        Write-Host "‚úÖ ZIP cr√©√©: $dumpPath.zip" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Compress-Archive non disponible, copie simple" -ForegroundColor Yellow
        Copy-Item $dumpDir $dumpPath -Recurse
    }
} catch {
    Write-Host "‚ùå Erreur cr√©ation ZIP: $($_.Exception.Message)" -ForegroundColor Red
}

# 9. Rapport final
Write-Host "`nüéâ DUMP COMPLET TERMIN√â !" -ForegroundColor Green
Write-Host "=" * 60 -ForegroundColor Green
Write-Host "üìÅ Dossier: $dumpDir" -ForegroundColor Yellow
Write-Host "üì¶ Archive: $dumpPath.zip" -ForegroundColor Yellow
Write-Host "‚è±Ô∏è Dur√©e totale: $([int]$timer.Elapsed.TotalSeconds) secondes" -ForegroundColor Yellow

Write-Host "`nüìã CONTENU DU DUMP:" -ForegroundColor Cyan
Get-ChildItem $dumpDir | ForEach-Object {
    Write-Host "  üìÑ $($_.Name)" -ForegroundColor White
}

Write-Host "`nüöÄ PROCHAINES √âTAPES:" -ForegroundColor Cyan
Write-Host "1. Analyser les logs dans $dumpDir" -ForegroundColor White
Write-Host "2. Corriger les erreurs JSON si n√©cessaire" -ForegroundColor White
Write-Host "3. Relancer la validation si besoin" -ForegroundColor White
Write-Host "4. Tester l'appairage des devices" -ForegroundColor White

$timer.Stop()
