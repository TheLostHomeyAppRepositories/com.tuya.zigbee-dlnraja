/**
 * Mode Local Prioritaire - Tuya Zigbee
 * Fonctionne SANS API Tuya en ligne
 * Compatible Homey officiel
 */

class LocalTuyaMode {
    constructor() {
        this.isLocalMode = true;
        this.apiEnabled = false;
        this.localDatabase = new Map();
        this.deviceCache = new Map();
        this.clusterMapping = new Map();
        
        // Initialisation en mode local par d√©faut
        this.initializeLocalMode();
    }

    /**
     * Initialisation du mode local
     */
    initializeLocalMode() {
        this.homey.log('üöÄ Initialisation en MODE LOCAL PRIORITAIRE');
        this.homey.log('‚úÖ Aucune d√©pendance API Tuya requise');
        this.homey.log('‚úÖ Fonctionnement 100% local');
        
        // Charger la base de donn√©es locale
        this.loadLocalDatabase();
        
        // Initialiser le mapping des clusters
        this.initializeClusterMapping();
        
        // Activer le cache local
        this.enableLocalCache();
    }

    /**
     * Charger la base de donn√©es locale des appareils Tuya
     */
    loadLocalDatabase() {
        this.homey.log('üìä Chargement base de donn√©es locale...');
        
        // Base de donn√©es locale des appareils Tuya connus
        this.localDatabase.set('TS0041', {
            name: 'Tuya Switch 1 Gang',
            clusters: ['0x0000', '0x0006', '0x0008'],
            capabilities: ['onoff'],
            manufacturer: 'Tuya',
            model: 'TS0041'
        });
        
        this.localDatabase.set('TS0042', {
            name: 'Tuya Switch 2 Gang',
            clusters: ['0x0000', '0x0006', '0x0008'],
            capabilities: ['onoff'],
            manufacturer: 'Tuya',
            model: 'TS0042'
        });
        
        this.localDatabase.set('TS0043', {
            name: 'Tuya Switch 3 Gang',
            clusters: ['0x0000', '0x0006', '0x0008'],
            capabilities: ['onoff'],
            manufacturer: 'Tuya',
            model: 'TS0043'
        });
        
        this.localDatabase.set('TS0601', {
            name: 'Tuya Thermostat',
            clusters: ['0x0000', '0x0006', '0x0201'],
            capabilities: ['onoff', 'measure_temperature', 'target_temperature'],
            manufacturer: 'Tuya',
            model: 'TS0601'
        });
        
        this.localDatabase.set('TS0602', {
            name: 'Tuya Dimmer',
            clusters: ['0x0000', '0x0006', '0x0008'],
            capabilities: ['onoff', 'dim'],
            manufacturer: 'Tuya',
            model: 'TS0602'
        });
        
        this.homey.log(`‚úÖ ${this.localDatabase.size} appareils charg√©s en local`);
    }

    /**
     * Initialiser le mapping des clusters Zigbee
     */
    initializeClusterMapping() {
        this.homey.log('üîß Initialisation mapping clusters...');
        
        // Mapping des clusters Zigbee standards
        this.clusterMapping.set('0x0000', {
            name: 'Basic',
            attributes: ['zclVersion', 'applicationVersion', 'stackVersion', 'hwVersion', 'manufacturerName', 'modelIdentifier', 'dateCode', 'powerSource']
        });
        
        this.clusterMapping.set('0x0006', {
            name: 'On/Off',
            attributes: ['onOff'],
            commands: ['toggle', 'off', 'on']
        });
        
        this.clusterMapping.set('0x0008', {
            name: 'Level Control',
            attributes: ['currentLevel'],
            commands: ['moveToLevel', 'move', 'step', 'stop']
        });
        
        this.clusterMapping.set('0x0201', {
            name: 'Thermostat',
            attributes: ['localTemperature', 'occupiedCoolingSetpoint', 'occupiedHeatingSetpoint'],
            commands: ['setWeeklySchedule', 'getWeeklySchedule', 'clearWeeklySchedule']
        });
        
        this.clusterMapping.set('0x0300', {
            name: 'Color Control',
            attributes: ['currentHue', 'currentSaturation', 'currentX', 'currentY'],
            commands: ['moveToHue', 'moveToSaturation', 'moveToColor']
        });
        
        this.homey.log(`‚úÖ ${this.clusterMapping.size} clusters mapp√©s`);
    }

    /**
     * Activer le cache local
     */
    enableLocalCache() {
        this.homey.log('üíæ Activation cache local...');
        
        // Cache des √©tats des appareils
        this.deviceCache = new Map();
        
        // Cache des configurations
        this.configCache = new Map();
        
        // Cache des m√©triques
        this.metricsCache = new Map();
        
        this.homey.log('‚úÖ Cache local activ√©');
    }

    /**
     * D√©tecter un appareil Tuya en mode local
     */
    async detectTuyaDevice(deviceData) {
        this.homey.log('üîç D√©tection appareil Tuya en mode local...');
        
        try {
            const modelId = deviceData.modelId || deviceData.model;
            const manufacturerId = deviceData.manufacturerId;
            
            // V√©rifier si l'appareil est dans la base locale
            if (this.localDatabase.has(modelId)) {
                const deviceInfo = this.localDatabase.get(modelId);
                this.homey.log(`‚úÖ Appareil d√©tect√©: ${deviceInfo.name}`);
                return deviceInfo;
            }
            
            // Si pas dans la base, d√©tection automatique par clusters
            const detectedDevice = await this.autoDetectByClusters(deviceData);
            if (detectedDevice) {
                this.homey.log(`‚úÖ Appareil auto-d√©tect√©: ${detectedDevice.name}`);
                return detectedDevice;
            }
            
            // Fallback: appareil g√©n√©rique
            this.homey.log('‚ö†Ô∏è Appareil non reconnu, utilisation mode g√©n√©rique');
            return this.createGenericDevice(deviceData);
            
        } catch (error) {
            this.homey.log(`‚ùå Erreur d√©tection: ${error.message}`);
            return this.createGenericDevice(deviceData);
        }
    }

    /**
     * D√©tection automatique par clusters
     */
    async autoDetectByClusters(deviceData) {
        const clusters = deviceData.clusters || [];
        
        // Analyser les clusters pour d√©terminer le type d'appareil
        const hasOnOff = clusters.includes('0x0006');
        const hasLevelControl = clusters.includes('0x0008');
        const hasThermostat = clusters.includes('0x0201');
        const hasColorControl = clusters.includes('0x0300');
        
        let capabilities = [];
        let deviceType = 'Unknown';
        
        if (hasOnOff) capabilities.push('onoff');
        if (hasLevelControl) capabilities.push('dim');
        if (hasThermostat) {
            capabilities.push('measure_temperature', 'target_temperature');
            deviceType = 'Thermostat';
        }
        if (hasColorControl) {
            capabilities.push('light_hue', 'light_saturation');
            deviceType = 'RGB Light';
        }
        
        if (capabilities.length === 0) {
            capabilities = ['onoff']; // Fallback basique
        }
        
        return {
            name: `Tuya ${deviceType}`,
            clusters: clusters,
            capabilities: capabilities,
            manufacturer: 'Tuya',
            model: deviceData.modelId || 'Unknown',
            autoDetected: true
        };
    }

    /**
     * Cr√©er un appareil g√©n√©rique
     */
    createGenericDevice(deviceData) {
        return {
            name: 'Tuya Device (Generic)',
            clusters: deviceData.clusters || ['0x0000', '0x0006'],
            capabilities: ['onoff'],
            manufacturer: 'Tuya',
            model: deviceData.modelId || 'Generic',
            generic: true
        };
    }

    /**
     * Obtenir les capacit√©s d'un appareil
     */
    getDeviceCapabilities(deviceInfo) {
        this.homey.log(`üîß R√©cup√©ration capacit√©s pour ${deviceInfo.name}...`);
        
        const capabilities = deviceInfo.capabilities || ['onoff'];
        
        // Enregistrer les capacit√©s dans le cache
        this.deviceCache.set(deviceInfo.model, {
            ...deviceInfo,
            capabilities: capabilities,
            lastUpdate: new Date()
        });
        
        return capabilities;
    }

    /**
     * G√©rer les commandes Zigbee
     */
    async handleZigbeeCommand(deviceId, clusterId, command, params = {}) {
        this.homey.log(`üì° Commande Zigbee: ${clusterId} -> ${command}`);
        
        try {
            // Validation de la commande
            if (!this.clusterMapping.has(clusterId)) {
                throw new Error(`Cluster non support√©: ${clusterId}`);
            }
            
            const clusterInfo = this.clusterMapping.get(clusterId);
            if (!clusterInfo.commands.includes(command)) {
                throw new Error(`Commande non support√©e: ${command}`);
            }
            
            // Ex√©cuter la commande
            const result = await this.executeCommand(deviceId, clusterId, command, params);
            
            // Mettre √† jour le cache
            this.updateDeviceCache(deviceId, clusterId, command, params);
            
            this.homey.log(`‚úÖ Commande ex√©cut√©e: ${command}`);
            return result;
            
        } catch (error) {
            this.homey.log(`‚ùå Erreur commande: ${error.message}`);
            throw error;
        }
    }

    /**
     * Ex√©cuter une commande
     */
    async executeCommand(deviceId, clusterId, command, params) {
        // Simulation de l'ex√©cution de commande
        // En r√©alit√©, cela utiliserait l'API Zigbee de Homey
        return {
            success: true,
            deviceId: deviceId,
            clusterId: clusterId,
            command: command,
            params: params,
            timestamp: new Date()
        };
    }

    /**
     * Mettre √† jour le cache des appareils
     */
    updateDeviceCache(deviceId, clusterId, command, params) {
        const cacheKey = `${deviceId}_${clusterId}`;
        this.deviceCache.set(cacheKey, {
            command: command,
            params: params,
            timestamp: new Date()
        });
    }

    /**
     * Obtenir les statistiques locales
     */
    getLocalStats() {
        return {
            totalDevices: this.localDatabase.size,
            cachedDevices: this.deviceCache.size,
            totalClusters: this.clusterMapping.size,
            mode: 'LOCAL',
            apiEnabled: this.apiEnabled,
            lastUpdate: new Date()
        };
    }

    /**
     * Activer le mode API (optionnel)
     */
    enableApiMode(apiKey = null) {
        if (!apiKey) {
            this.homey.log('‚ö†Ô∏è Mode API non activ√© - continuation en mode local');
            return false;
        }
        
        this.homey.log('üåê Activation mode API Tuya...');
        this.apiEnabled = true;
        this.isLocalMode = false;
        
        // Ici on pourrait initialiser l'API Tuya
        // Mais le mode local reste prioritaire
        
        return true;
    }

    /**
     * D√©sactiver le mode API
     */
    disableApiMode() {
        this.homey.log('üîÑ Retour au mode local prioritaire');
        this.apiEnabled = false;
        this.isLocalMode = true;
    }

    /**
     * V√©rifier si le mode local est actif
     */
    isLocalModeActive() {
        return this.isLocalMode && !this.apiEnabled;
    }

    /**
     * Obtenir le statut du syst√®me
     */
    getSystemStatus() {
        return {
            mode: this.isLocalModeActive() ? 'LOCAL' : 'API',
            devicesLoaded: this.localDatabase.size,
            clustersMapped: this.clusterMapping.size,
            cacheSize: this.deviceCache.size,
            apiEnabled: this.apiEnabled,
            timestamp: new Date()
        };
    }
}

module.exports = LocalTuyaMode; 
