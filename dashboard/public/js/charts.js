// Charts.js - Graphiques dynamiques pour le dashboard // Configuration globale de Chart.js Chart.defaults.font.family = 'Inter, sans-serif'; Chart.defaults.color = '#64748b'; // DonnÃ©es pour les graphiques const chartData = { devices: { labels: ['ImplÃ©mentÃ©s', 'En cours', 'PlanifiÃ©s', 'Z2M', 'HA', 'Grok'], datasets: [{ label: 'Devices', data: [47, 156, 89, 34, 12, 0], backgroundColor: [ '#4ade80', // Vert - ImplÃ©mentÃ©s '#fbbf24', // Jaune - En cours '#f87171', // Rouge - PlanifiÃ©s '#667eea', // Bleu - Z2M '#764ba2', // Violet - HA '#94a3b8' // Gris - Grok ], borderWidth: 2, borderColor: '#ffffff', hoverOffset: 4 }] }, evolution: { labels: ['Jan', 'FÃ©v', 'Mar', 'Avr', 'Mai', 'Juin', 'Juil', 'AoÃ»t', 'Sep', 'Oct', 'Nov', 'DÃ©c'], datasets: [{ label: 'Devices ImplÃ©mentÃ©s', data: [10, 25, 35, 45, 60, 75, 90, 110, 130, 150, 180, 220], borderColor: '#667eea', backgroundColor: 'rgba(102, 126, 234, 0.1)', tension: 0.4, fill: true }, { label: 'Workflows OpÃ©rationnels', data: [2, 4, 6, 8, 9, 10, 11, 11, 12, 12, 12, 12], borderColor: '#4ade80', backgroundColor: 'rgba(74, 222, 128, 0.1)', tension: 0.4, fill: true }] } }; // Configuration des graphiques const chartConfigs = { devices: { type: 'doughnut', data: chartData.devices, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom', labels: { padding: 20, usePointStyle: true, font: { size: 12 } } }, tooltip: { backgroundColor: 'rgba(0, 0, 0, 0.8)', titleColor: '#ffffff', bodyColor: '#ffffff', borderColor: '#667eea', borderWidth: 1, cornerRadius: 8, displayColors: true } }, animation: { animateRotate: true, animateScale: true, duration: 1000 } } }, evolution: { type: 'line', data: chartData.evolution, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'top', labels: { usePointStyle: true, padding: 20, font: { size: 12 } } }, tooltip: { backgroundColor: 'rgba(0, 0, 0, 0.8)', titleColor: '#ffffff', bodyColor: '#ffffff', borderColor: '#667eea', borderWidth: 1, cornerRadius: 8 } }, scales: { y: { beginAtZero: true, grid: { color: 'rgba(0, 0, 0, 0.1)' }, ticks: { color: '#64748b' } }, x: { grid: { color: 'rgba(0, 0, 0, 0.1)' }, ticks: { color: '#64748b' } } }, animation: { duration: 1000, easing: 'easeInOutQuart' } } } }; // Initialisation des graphiques let devicesChart, evolutionChart; function initCharts() { const devicesCtx = document.getElementById('devicesChart'); const evolutionCtx = document.getElementById('evolutionChart'); if (devicesCtx) { devicesChart = new Chart(devicesCtx, chartConfigs.devices); } if (evolutionCtx) { evolutionChart = new Chart(evolutionCtx, chartConfigs.evolution); } } // Mise Ã jour des donnÃ©es des graphiques function updateCharts(newData) { if (devicesChart) { devicesChart.data.datasets[0].data = newData.devices || chartData.devices.datasets[0].data; devicesChart.update('active'); } if (evolutionChart) { evolutionChart.data.datasets[0].data = newData.evolution || chartData.evolution.datasets[0].data; evolutionChart.update('active'); } } // Animation des barres de progression function animateProgressBars() { const progressBars = document.querySelectorAll('.progress-fill'); progressBars.forEach(bar => { const width = bar.style.width; bar.style.width = '0%'; setTimeout(() => { bar.style.width = width; }, 500); }); } // Mise Ã jour en temps rÃ©el des statistiques function updateStats() { const statNumbers = document.querySelectorAll('.stat-number'); statNumbers.forEach(stat => { const targetValue = parseInt(stat.textContent); let currentValue = 0; const increment = targetValue / 50; const timer = setInterval(() => { currentValue += increment; if (currentValue >= targetValue) { currentValue = targetValue; clearInterval(timer); } stat.textContent = Math.floor(currentValue); }, 20); }); } // Actualisation des logs function refreshLogs() { const logsContainer = document.querySelector('.logs-container'); const newLogEntry = document.createElement('div'); newLogEntry.className = 'log-entry info'; newLogEntry.innerHTML = ` <span class="log-time">${new Date().toLocaleTimeString()}</span> <span class="log-level">INFO</span> <span class="log-message">Logs actualisÃ©s avec succÃ¨s</span> `; logsContainer.insertBefore(newLogEntry, logsContainer.firstChild); // Limiter le nombre d'entrÃ©es de log const logEntries = logsContainer.querySelectorAll('.log-entry'); if (logEntries.length > 20) { logEntries[logEntries.length - 1].remove(); } } // Navigation entre les sections function initNavigation() { const navLinks = document.querySelectorAll('.nav a'); const sections = document.querySelectorAll('.section'); navLinks.forEach(link => { link.addEventListener('click', (e) => { e.preventDefault(); // Retirer la classe active de tous les liens et sections navLinks.forEach(l => l.classList.remove('active')); sections.forEach(s => s.classList.remove('active')); // Ajouter la classe active au lien cliquÃ© link.classList.add('active'); // Afficher la section correspondante const targetId = link.getAttribute('href').substring(1); const targetSection = document.getElementById(targetId); if (targetSection) { targetSection.classList.add('active'); } }); }); } // Filtrage des devices function initDeviceFilter() { const filterSelect = document.getElementById('deviceFilter'); const devicesGrid = document.getElementById('devicesGrid'); if (filterSelect && devicesGrid) { filterSelect.addEventListener('change', (e) => { const filterValue = e.target.value; const deviceCards = devicesGrid.querySelectorAll('.device-card'); deviceCards.forEach(card => { if (filterValue === 'all' || card.dataset.status === filterValue) { card.style.display = 'block'; } else { card.style.display = 'none'; } }); }); } } // Mise Ã jour en temps rÃ©el des mises Ã jour function updateRealTimeUpdates() { const updatesList = document.getElementById('updatesList'); if (!updatesList) return; const updates = [ { time: '16:35', text: 'ðŸŽ¨ IcÃ´nes gÃ©nÃ©rÃ©es avec succÃ¨s (338/338)' }, { time: '16:34', text: 'ðŸ”„ Enrichissement HA terminÃ© (89 devices)' }, { time: '16:33', text: 'âœ… Workflow bench-ia.yml opÃ©rationnel' }, { time: '16:32', text: 'ðŸ“Š Dashboard mis Ã jour avec nouvelles donnÃ©es' }, { time: '16:31', text: 'ðŸŒ Traduction ES terminÃ©e (60%)' } ]; updates.forEach((update, index) => { setTimeout(() => { const updateItem = document.createElement('div'); updateItem.className = 'update-item'; updateItem.innerHTML = ` <span class="update-time">${update.time}</span> <span class="update-text">${update.text}</span> `; updatesList.insertBefore(updateItem, updatesList.firstChild); // Limiter le nombre d'updates const updateItems = updatesList.querySelectorAll('.update-item'); if (updateItems.length > 10) { updateItems[updateItems.length - 1].remove(); } }, index * 2000); }); } // Initialisation au chargement de la page document.addEventListener('DOMContentLoaded', () => { initCharts(); initNavigation(); initDeviceFilter(); // Animations au chargement setTimeout(() => { animateProgressBars(); updateStats(); }, 1000); // Mises Ã jour en temps rÃ©el setInterval(updateRealTimeUpdates, 10000); // Actualisation automatique des logs setInterval(refreshLogs, 30000); }); // Export des fonctions pour utilisation externe window.dashboardCharts = { initCharts, updateCharts, animateProgressBars, updateStats, refreshLogs, updateRealTimeUpdates }; 
