'use strict'; const convertMultiByteNumberPayloadToSingleDecimalNumber = (chunks) => { let value = 0; for (let i = 0; i < chunks.length; i++) { value = value << 8; value += chunks[i]; } return value; }; const getDataValue = (dpValue) => { switch (dpValue.datatype) { case TUYA_DATA_TYPES.raw: return dpValue.data; case TUYA_DATA_TYPES.bool: return dpValue.data[0] === 1; case TUYA_DATA_TYPES.value: return convertMultiByteNumberPayloadToSingleDecimalNumber(dpValue.data); case TUYA_DATA_TYPES.string: return String.fromCharCode(...dpValue.data); case TUYA_DATA_TYPES.enum: return dpValue.data[0]; case TUYA_DATA_TYPES.bitmap: return convertMultiByteNumberPayloadToSingleDecimalNumber(dpValue.data); default: throw new Error(`Unsupported datatype: ${dpValue.datatype}`); } }; const TUYA_DATA_TYPES = { raw: 0, 
