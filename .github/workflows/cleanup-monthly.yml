# cleanup-monthly.yml
# Description: Workflow automatisÃ© pour cleanup monthly
# Date: 2025-07-25
# Version: 1.0

name: Monthly Cleanup - Tuya Zigbee Project


# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on:
  schedule:
    - cr
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: '0 2 1 * *'
  workflow_dispatch:
    inputs:
      force_cleanup:
        descripti
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: 'Force cleanup even if not scheduled'
        required: false
        default: false
        type: boolean

jobs:
  cleanup:
    name: Nettoyage Automatique Mensuel
    runs-
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: ubuntu-latest
    
    
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NODE_VERSION: '18'
        PYTHON_VERSION: '3.11'

    steps:
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Analyse Avant Nettoyage
        id: before_analysis
        run: |
          echo "=== ANALYSE AVANT NETTOYAGE ==="
          echo "Date: $(date)"
          echo "Taille repo: $(du -sh . | cut -f1)"
          echo "Nombre fichiers: $(find . -type f | wc -l)"
          
          # Sauvegarder les mÃ©triques
          echo "before_size=$(du -s . | cut -f1)" >> $GITHUB_OUTPUT
          echo "before_files=$(find . -type f | wc -l)" >> $GITHUB_OUTPUT
          
      - name: Nettoyage Fichiers Temporaires
        run: |
          echo "=== NETTOYAGE FICHIERS TEMPORAIRES ==="
          
          # Supprimer les fichiers temporaires
          find . -name "*.tmp" -delete
          find . -name "*.temp" -delete
          find . -name "*.cache" -delete
          find . -name "*.bak" -delete
          find . -name "*.old" -delete
          find . -name "*.orig" -delete
          find . -name "*.rej" -delete
          find . -name "*.swp" -delete
          find . -name "*.swo" -delete
          find . -name "*~" -delete
          
          # Supprimer les dossiers temporaires
          find . -type d -name ".temp" -exec rm -rf {} + 2>/dev/null || true
          find . -type d -name ".cache" -exec rm -rf {} + 2>/dev/null || true
          find . -type d -name ".tmp" -exec rm -rf {} + 2>/dev/null || true
          find . -type d -name "temp" -exec rm -rf {} + 2>/dev/null || true
          find . -type d -name "cache" -exec rm -rf {} + 2>/dev/null || true
          
          echo "Fichiers temporaires supprimÃ©s"
          
      - name: Nettoyage DÃ©pendances
        run: |
          echo "=== NETTOYAGE DÃ‰PENDANCES ==="
          
          # Supprimer node_modules s'il existe
          if [ -d "node_modules" ]; then
            rm -rf node_modules
            echo "node_modules supprimÃ©"
          fi
          
          # Supprimer les fichiers de lock
          rm -f package-lock.json
          rm -f yarn.lock
          rm -f pnpm-lock.yaml
          
          echo "Fichiers de lock supprimÃ©s"
          
      - name: Nettoyage Builds
        run: |
          echo "=== NETTOYAGE BUILDS ==="
          
          # Supprimer les dossiers de build
          rm -rf dist/ 2>/dev/null || true
          rm -rf build/ 2>/dev/null || true
          rm -rf out/ 2>/dev/null || true
          rm -rf .next/ 2>/dev/null || true
          rm -rf .nuxt/ 2>/dev/null || true
          rm -rf .vercel/ 2>/dev/null || true
          
          # Supprimer les fichiers de build Homey
          rm -rf .homeybuild/ 2>/dev/null || true
          rm -rf .homeycompose/cache/ 2>/dev/null || true
          rm -rf .homeycompose/temp/ 2>/dev/null || true
          
          echo "Dossiers de build supprimÃ©s"
          
      - name: Nettoyage Logs
        run: |
          echo "=== NETTOYAGE LOGS ==="
          
          # Supprimer les logs sauf auto-update.log
          find . -name "*.log" ! -name "auto-update.log" -delete
          find . -name "npm-debug.log*" -delete
          find . -name "yarn-debug.log*" -delete
          find . -name "yarn-error.log*" -delete
          
          # Supprimer les dossiers de logs
          rm -rf logs/ 2>/dev/null || true
          
          echo "Logs supprimÃ©s (sauf auto-update.log)"
          
      - name: Nettoyage Archives
        run: |
          echo "=== NETTOYAGE ARCHIVES ==="
          
          # Supprimer les archives
          find . -name "*.tar.gz" -delete
          find . -name "*.zip" -delete
          find . -name "*.7z" -delete
          find . -name "*.rar" -delete
          
          # Supprimer les dossiers d'archives
          rm -rf archives/ 2>/dev/null || true
          rm -rf backup_*/ 2>/dev/null || true
          rm -rf restore_*/ 2>/dev/null || true
          rm -rf intelligent-backup_*/ 2>/dev/null || true
          
          echo "Archives supprimÃ©es"
          
      - name: Analyse AprÃ¨s Nettoyage
        id: after_analysis
        run: |
          echo "=== ANALYSE APRÃˆS NETTOYAGE ==="
          echo "Date: $(date)"
          echo "Taille repo: $(du -sh . | cut -f1)"
          echo "Nombre fichiers: $(find . -type f | wc -l)"
          
          # Sauvegarder les mÃ©triques
          echo "after_size=$(du -s . | cut -f1)" >> $GITHUB_OUTPUT
          echo "after_files=$(find . -type f | wc -l)" >> $GITHUB_OUTPUT
          
      - name: Calcul Ã‰conomies
        run: |
          echo "=== CALCUL Ã‰CONOMIES ==="
          
          BEFORE_SIZE=${{ steps.before_analysis.outputs.before_size }}
          AFTER_SIZE=${{ steps.after_analysis.outputs.after_size }}
          BEFORE_FILES=${{ steps.before_analysis.outputs.before_files }}
          AFTER_FILES=${{ steps.after_analysis.outputs.after_files }}
          
          # Calculer les Ã©conomies
          SIZE_SAVED=$((BEFORE_SIZE - AFTER_SIZE))
          FILES_SAVED=$((BEFORE_FILES - AFTER_FILES))
          PERCENT_SIZE=$((SIZE_SAVED * 100 / BEFORE_SIZE))
          PERCENT_FILES=$((FILES_SAVED * 100 / BEFORE_FILES))
          
          echo "RÃ‰SULTATS NETTOYAGE:"
          echo "- Taille Ã©conomisÃ©e: ${SIZE_SAVED} KB (${PERCENT_SIZE}%)"
          echo "- Fichiers supprimÃ©s: ${FILES_SAVED} (${PERCENT_FILES}%)"
          echo "- Taille finale: ${AFTER_SIZE} KB"
          echo "- Fichiers finaux: ${AFTER_FILES}"
          
      - name: Commit et Push
        run: |
          echo "=== COMMIT ET PUSH ==="
          
          # Configurer Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Ajouter les changements
          git add -A
          
          # VÃ©rifier s'il y a des changements
          if git diff --staged --quiet; then
            echo "Aucun changement Ã  commiter"
          else
            # Commit avec message dÃ©taillÃ©
            git commit -m "AUTO-CLEANUP: Nettoyage automatique mensuel

MÃ‰TRIQUES:
- Taille avant: ${{ steps.before_analysis.outputs.before_size }} KB
- Taille aprÃ¨s: ${{ steps.after_analysis.outputs.after_size }} KB
- Ã‰conomie: $(({{ steps.before_analysis.outputs.before_size }} - {{ steps.after_analysis.outputs.after_size }})) KB
- Fichiers supprimÃ©s: $(({{ steps.before_analysis.outputs.before_files }} - {{ steps.after_analysis.outputs.after_files }}))

NETTOYAGE:
- Fichiers temporaires supprimÃ©s
- DÃ©pendances nettoyÃ©es
- Builds supprimÃ©s
- Logs nettoyÃ©s
- Archives supprimÃ©es

Timestamp: $(date -u)
Workflow: cleanup-monthly.yml"

            # Push
            git push origin ${{ github.ref }}
            echo "Changements commitÃ©s et poussÃ©s"
          fi
          
      - name: Rapport Final
        run: |
          echo "=== RAPPORT FINAL ==="
          echo "NETTOYAGE MENSUEL TERMINÃ‰"
          echo "Repo optimisÃ© pour la communautÃ© Homey"
          echo "Prochain nettoyage: 1er du mois prochain"
          echo "Timestamp: $(date -u)" 

