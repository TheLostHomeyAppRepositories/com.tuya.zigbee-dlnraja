name: Build and Package - Tuya Zigbee
on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Project
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Build validation
        run: |
          echo "🔍 Validation du build..."
          if [ -f "app.json" ] && [ -f "package.json" ]; then
            echo "✅ Fichiers de configuration présents"
            echo "📦 Version: $(jq -r '.version' app.json)"
            echo "🏷️ Nom: $(jq -r '.id' app.json)"
            echo "📊 Compatibilité: $(jq -r '.compatibility' app.json)"
          else
            echo "❌ Fichiers de configuration manquants"
            exit 1
          fi

      - name: Validate Driver Structure
        run: |
          echo "🔍 Validation de la structure des drivers..."
          if [ -d "drivers" ]; then
            echo "✅ Dossier drivers présent"
            SDK3_COUNT=$(find drivers/sdk3 -type d 2>/dev/null | wc -l)
            SMART_LIFE_COUNT=$(find drivers/smart-life -type d 2>/dev/null | wc -l)
            IN_PROGRESS_COUNT=$(find drivers/in_progress -type d 2>/dev/null | wc -l)
            echo "📊 Drivers SDK3: $SDK3_COUNT"
            echo "🔗 Drivers Smart Life: $SMART_LIFE_COUNT"
            echo "🔄 Drivers en progrès: $IN_PROGRESS_COUNT"
            echo "📈 Total: $((SDK3_COUNT + SMART_LIFE_COUNT + IN_PROGRESS_COUNT)) drivers"
          else
            echo "❌ Dossier drivers manquant"
            exit 1
          fi

      - name: Validate Intelligent Modules
        run: |
          echo "🔍 Validation des modules intelligents..."
          if [ -d "lib" ]; then
            echo "✅ Dossier lib présent"
            MODULE_COUNT=$(find lib -name "*.js" | wc -l)
            echo "🧠 Modules intelligents: $MODULE_COUNT"
            echo "📋 Modules trouvés:"
            find lib -name "*.js" -exec basename {} \;
          else
            echo "❌ Dossier lib manquant"
            exit 1
          fi

      - name: Validate Documentation
        run: |
          echo "🔍 Validation de la documentation..."
          if [ -d "docs" ]; then
            echo "✅ Dossier docs présent"
            DASHBOARD_FILES=$(find docs/dashboard -name "*.html" -o -name "*.js" -o -name "*.css" 2>/dev/null | wc -l)
            LOCALE_FILES=$(find docs/locales -name "*.md" 2>/dev/null | wc -l)
            DOC_FILES=$(find docs -name "*.md" | wc -l)
            echo "📊 Dashboard: $DASHBOARD_FILES fichiers"
            echo "🌍 Traductions: $LOCALE_FILES langues"
            echo "📋 Documentation: $DOC_FILES fichiers"
          else
            echo "❌ Dossier docs manquant"
            exit 1
          fi

      - name: Create build artifacts
        run: |
          echo "🔍 Création des artefacts de build..."
          mkdir -p build
          cp app.json build/
          cp package.json build/
          cp -r drivers build/ 2>/dev/null || echo "⚠️ Pas de dossier drivers"
          cp -r assets build/ 2>/dev/null || echo "⚠️ Pas de dossier assets"
          cp -r docs build/ 2>/dev/null || echo "⚠️ Pas de dossier docs"
          cp -r lib build/ 2>/dev/null || echo "⚠️ Pas de dossier lib"
          cp -r scripts build/ 2>/dev/null || echo "⚠️ Pas de dossier scripts"
          echo "✅ Artefacts de build créés"

      - name: Create deployment package
        run: |
          echo "📦 Création du package de déploiement..."
          cd build
          tar -czf ../tuya-zigbee-local-mode.tar.gz .
          cd ..
          echo "✅ Package créé: tuya-zigbee-local-mode.tar.gz"
          ls -la *.tar.gz

      - name: Validate package contents
        run: |
          echo "🔍 Validation du contenu du package..."
          tar -tzf tuya-zigbee-local-mode.tar.gz | head -20
          echo "📊 Total fichiers: $(tar -tzf tuya-zigbee-local-mode.tar.gz | wc -l)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tuya-zigbee-build
          path: |
            build/
            *.tar.gz
          retention-days: 30

      - name: Generate build report
        run: |
          echo "📊 RAPPORT DE BUILD - $(date)"
          echo "=================================="
          echo "📦 Package: tuya-zigbee-local-mode.tar.gz"
          echo "📁 Contenu:"
          echo "  - Drivers SDK3: $(find build/drivers/sdk3 -type d 2>/dev/null | wc -l)"
          echo "  - Drivers Smart Life: $(find build/drivers/smart-life -type d 2>/dev/null | wc -l)"
          echo "  - Modules intelligents: $(find build/lib -name "*.js" 2>/dev/null | wc -l)"
          echo "  - Traductions: $(find build/docs/locales -name "*.md" 2>/dev/null | wc -l)"
          echo "  - Scripts: $(find build/scripts -name "*.ps1" 2>/dev/null | wc -l)"
          echo "  - Assets: $(find build/assets -type f 2>/dev/null | wc -l)"
          echo ""
          echo "✅ Build réussi"
          echo "🚀 Package prêt pour le déploiement"

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to GitHub Releases
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: tuya-zigbee-build

      - name: Get version from app.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' app.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Tuya Zigbee Local Mode v${{ steps.get_version.outputs.version }}
          body: |
            ## 🚀 Tuya Zigbee Local Mode v${{ steps.get_version.outputs.version }}
            
            ### ✅ Fonctionnalités
            - **Mode local prioritaire**: Fonctionnement sans API Tuya
            - **Drivers SDK3**: Support complet Homey SDK3
            - **Smart Life Integration**: 4 drivers Smart Life
            - **Modules intelligents**: 7 modules d'automatisation
            - **Traductions**: 8 langues supportées
            - **Dashboard**: Interface temps réel
            
            ### 📊 Métriques
            - Drivers SDK3: $(find build/drivers/sdk3 -type d 2>/dev/null | wc -l)
            - Drivers Smart Life: $(find build/drivers/smart-life -type d 2>/dev/null | wc -l)
            - Modules intelligents: $(find build/lib -name "*.js" 2>/dev/null | wc -l)
            - Traductions: $(find build/docs/locales -name "*.md" 2>/dev/null | wc -l)
            
            ### 🔧 Installation
            1. Téléchargez le package
            2. Installez via Homey App Store
            3. Activez le mode local
            4. Ajoutez vos appareils Tuya
            
            ### 🛡️ Sécurité
            - Aucune dépendance API externe
            - Fonctionnement 100% local
            - Données protégées localement
          files: |
            tuya-zigbee-local-mode.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Success
        run: |
          echo "🎉 Déploiement réussi"
          echo "📦 Version: ${{ steps.get_version.outputs.version }}"
          echo "🔗 Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.version }}"
          echo "✅ Package disponible pour téléchargement"



