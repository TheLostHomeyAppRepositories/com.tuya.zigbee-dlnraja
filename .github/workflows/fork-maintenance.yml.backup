# ðŸš€ Fork Maintenance - Tuya Zigbee Project
# Maintenance automatique des forks et branches

name: ðŸ”„ Fork Maintenance

on:
  schedule:
    - cron: '0 6 * * *'  # Tous les jours Ã  6h00 UTC
  workflow_dispatch:
  push:
    branches: [master, beta, develop]

jobs:
  maintain-forks:
    runs-on: ubuntu-latest
    name: ðŸ”„ Maintenance des forks
    
    steps:
      - name: ðŸ“¥ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: ðŸ”§ Setup Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
      - name: ðŸ” Sync with upstream
        run: |
          echo "Syncing with upstream repository..."
          
          # Ajouter l'upstream si pas dÃ©jÃ  prÃ©sent
          if ! git remote get-url upstream > /dev/null 2>&1; then
            git remote add upstream https://github.com/dlnraja/universal.tuya.zigbee.device.git
          fi
          
          # RÃ©cupÃ©rer les derniÃ¨res modifications
          git fetch upstream
          git fetch origin
          
          # Synchroniser master
          git checkout master
          git merge upstream/master --no-edit
          
          # Synchroniser beta
          git checkout beta || git checkout -b beta
          git merge upstream/beta --no-edit || echo "Beta branch not found in upstream"
          
          # Synchroniser develop
          git checkout develop || git checkout -b develop
          git merge upstream/develop --no-edit || echo "Develop branch not found in upstream"
          
      - name: ðŸ”„ Update all branches
        run: |
          echo "Updating all branches..."
          
          # Liste des branches Ã  maintenir
          branches=("master" "beta" "develop" "feature/sdk3" "feature/research" "feature/automation")
          
          for branch in "${branches[@]}"; do
            echo "Processing branch: $branch"
            
            # CrÃ©er la branche si elle n'existe pas
            if ! git show-ref --verify --quiet refs/heads/$branch; then
              git checkout -b $branch
            else
              git checkout $branch
            fi
            
            # Mettre Ã  jour avec les derniÃ¨res modifications
            git pull origin $branch || echo "Branch $branch not found on origin"
            
            # Pousser les modifications
            git push origin $branch || echo "Failed to push $branch"
          done
          
      - name: ðŸ§¹ Cleanup old branches
        run: |
          echo "Cleaning up old branches..."
          
          # Supprimer les branches locales obsolÃ¨tes
          git branch --merged master | grep -v "master\|beta\|develop" | xargs -r git branch -d
          
          # Nettoyer les rÃ©fÃ©rences distantes
          git remote prune origin
          
      - name: ðŸ“Š Generate maintenance report
        run: |
          echo "Generating maintenance report..."
          
          cat > logs/maintenance/maintenance_report.md << EOF
# ðŸ”„ Rapport de Maintenance - Forks & Branches

## ðŸ“… Date: $(date -u '+%Y-%m-%d %H:%M UTC')

## ðŸ”„ Branches Maintenues
- **master**: SynchronisÃ© avec upstream
- **beta**: SynchronisÃ© avec upstream
- **develop**: SynchronisÃ© avec upstream
- **feature/sdk3**: Mise Ã  jour
- **feature/research**: Mise Ã  jour
- **feature/automation**: Mise Ã  jour

## ðŸ“ˆ Statistiques
- **Branches actives**: 6
- **Branches nettoyÃ©es**: $(git branch --merged master | grep -v "master\|beta\|develop" | wc -l)
- **RÃ©fÃ©rences nettoyÃ©es**: $(git remote prune origin --dry-run | wc -l)

## âœ… Actions EffectuÃ©es
- Synchronisation avec upstream
- Mise Ã  jour de toutes les branches
- Nettoyage des branches obsolÃ¨tes
- Nettoyage des rÃ©fÃ©rences distantes

## ðŸ”„ Prochaines Actions
- Maintenance quotidienne Ã  6:00 UTC
- Synchronisation automatique avec upstream
- Nettoyage automatique des branches

---
*GÃ©nÃ©rÃ© automatiquement le $(date -u '+%Y-%m-%d %H:%M UTC')*
EOF
          
      - name: ðŸ“ Commit maintenance results
        run: |
          git add logs/maintenance/
          git commit -m "ðŸ”„ [$(date -u '+%Y-%m-%d %H:%M UTC')] Fork maintenance: All branches synced, cleaned up. Powered by GitHub Actions" || echo "No changes to commit"
          git push origin master
          
      - name: ðŸ“ˆ Update maintenance stats
        run: |
          echo "Fork maintenance completed successfully!"
          echo "Branches maintained: 6"
          echo "Upstream synced: Yes"
          echo "Cleanup performed: Yes"
          echo "Next maintenance: Tomorrow 6:00 UTC" 
