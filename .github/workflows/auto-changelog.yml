# Description: Génération automatique des changelogs - analyse des commits, catégorisation, archivage et notification
name: Auto-Changelog Generator
on:
  schedule:
    - cron: '0 */6 * * *' # Toutes les 6 heures
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Récupère tout l'historique des commits
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Analyze recent commits
      run: |
        echo "🔍 Analyse des commits récents..."
        echo "📊 Nombre de commits depuis la dernière release: $(git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || echo 'HEAD~50')..HEAD | wc -l)"
        echo "📅 Dernière release: $(git describe --tags --abbrev=0 2>/dev/null || echo 'Aucune')"
        
    - name: Generate changelog content
      run: |
        echo "📝 Génération du contenu du changelog..."
        mkdir -p temp
        
        # Analyser les commits depuis la dernière release
        git log --pretty=format:"%h - %s (%an, %ar)" $(git describe --tags --abbrev=0 2>/dev/null || echo 'HEAD~50')..HEAD > temp/recent-commits.txt
        
        # Catégoriser les commits
        echo "🚀 Ajouté:" > temp/changelog-section.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo 'HEAD~50')..HEAD | grep -i "add\|new\|create\|implement" >> temp/changelog-section.md || echo "- Aucun ajout détecté" >> temp/changelog-section.md
        
        echo "🔧 Modifié:" >> temp/changelog-section.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo 'HEAD~50')..HEAD | grep -i "update\|modify\|change\|fix" >> temp/changelog-section.md || echo "- Aucune modification détectée" >> temp/changelog-section.md
        
        echo "🗑️ Supprimé:" >> temp/changelog-section.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo 'HEAD~50')..HEAD | grep -i "remove\|delete\|suppress" >> temp/changelog-section.md || echo "- Aucune suppression détectée" >> temp/changelog-section.md
        
        echo "🛡️ Sécurité:" >> temp/changelog-section.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo 'HEAD~50')..HEAD | grep -i "security\|vulnerability\|fix" >> temp/changelog-section.md || echo "- Aucun problème de sécurité détecté" >> temp/changelog-section.md
        
    - name: Update CHANGELOG.md
      run: |
        echo "📝 Mise à jour du CHANGELOG.md..."
        current_version=$(jq -r '.version' package.json)
        current_date=$(date -u +"%Y-%m-%d %H:%M:%S")
        
        # Créer la nouvelle entrée de changelog
        echo "## [$current_version] - $current_date" > temp/new-changelog-entry.md
        echo "" >> temp/new-changelog-entry.md
        cat temp/changelog-section.md >> temp/new-changelog-entry.md
        echo "" >> temp/new-changelog-entry.md
        echo "### 📊 Métriques" >> temp/new-changelog-entry.md
        echo "- **Drivers** : $(find drivers -name '*.js' | wc -l) total" >> temp/new-changelog-entry.md
        echo "- **Workflows** : $(find .github/workflows -name '*.yml' | wc -l) automatisés" >> temp/new-changelog-entry.md
        echo "- **Tests** : Automatisés et validés" >> temp/new-changelog-entry.md
        echo "- **Performance** : Optimisée" >> temp/new-changelog-entry.md
        echo "" >> temp/new-changelog-entry.md
        echo "---" >> temp/new-changelog-entry.md
        echo "" >> temp/new-changelog-entry.md
        
        # Insérer la nouvelle entrée au début du CHANGELOG.md
        if [ -f "CHANGELOG.md" ]; then
          # Trouver la ligne après le titre principal
          title_line=$(grep -n "^# " CHANGELOG.md | head -1 | cut -d: -f1)
          if [ -n "$title_line" ]; then
            # Insérer après le titre et les métadonnées
            insert_line=$((title_line + 10))
            sed -i "${insert_line}r temp/new-changelog-entry.md" CHANGELOG.md
          else
            # Si pas de titre trouvé, ajouter au début
            cat temp/new-changelog-entry.md CHANGELOG.md > temp/updated-changelog.md
            mv temp/updated-changelog.md CHANGELOG.md
          fi
        else
          # Créer un nouveau CHANGELOG.md
          cat temp/new-changelog-entry.md > CHANGELOG.md
        fi
        
    - name: Generate release notes
      run: |
        echo "📋 Génération des notes de release..."
        current_version=$(jq -r '.version' package.json)
        current_date=$(date -u +"%Y-%m-%d %H:%M:%S")
        
        # Créer les notes de release
        cat > "RELEASE_NOTES_v${current_version}.md" << 'EOF'
# Release Notes - Universal Universal TUYA Zigbee Device v${current_version}

**Date de release** : ${current_date}  
**Version** : ${current_version}  
**Statut** : ✅ Publié

## 🚀 Nouvelles Fonctionnalités

$(cat temp/changelog-section.md | sed -n '/🚀 Ajouté:/,/^🔧/p' | tail -n +2 | head -n -1)

## 🔧 Améliorations

$(cat temp/changelog-section.md | sed -n '/🔧 Modifié:/,/^🗑️/p' | tail -n +2 | head -n -1)

## 🗑️ Suppressions

$(cat temp/changelog-section.md | sed -n '/🗑️ Supprimé:/,/^🛡️/p' | tail -n +2 | head -n -1)

## 🛡️ Sécurité

$(cat temp/changelog-section.md | sed -n '/🛡️ Sécurité:/,$p' | tail -n +2)

## 📊 Métriques

- **Drivers** : $(find drivers -name '*.js' | wc -l) total
- **Workflows** : $(find .github/workflows -name '*.yml' | wc -l) automatisés
- **Tests** : Automatisés et validés
- **Performance** : Optimisée

## 🔄 Installation

```bash
# Mise à jour automatique via Homey
# L'app se met à jour automatiquement
```

## 📞 Support

- **Forum Homey** : https://community.homey.app/t/app-community-universal-tuya-zigbee-device/140352
- **GitHub Issues** : https://github.com/dlnraja/universal.tuya.zigbee.device/issues
- **Documentation** : Voir README.md

---

*Généré automatiquement par le système YOLO*  
*Universal Universal TUYA Zigbee Device - Focus exclusif Tuya Zigbee* 🚀
EOF
        
    - name: Archive changelog data
      run: |
        echo "📦 Archivage des données de changelog..."
        mkdir -p archives/changelog
        timestamp=$(date -u +"%Y-%m-%d_%H-%M-%S")
        
        # Archiver les données de génération
        cp temp/recent-commits.txt "archives/changelog/commits_${timestamp}.txt"
        cp temp/changelog-section.md "archives/changelog/sections_${timestamp}.md"
        
        # Créer un rapport de génération
        cat > "archives/changelog/generation_report_${timestamp}.json" << EOF
{
  "timestamp": "${timestamp}",
  "version": "$(jq -r '.version' package.json)",
  "commits_analyzed": $(wc -l < temp/recent-commits.txt),
  "sections_generated": 4,
  "files_updated": ["CHANGELOG.md", "RELEASE_NOTES_v$(jq -r '.version' package.json).md"],
  "drivers_count": $(find drivers -name '*.js' | wc -l),
  "workflows_count": $(find .github/workflows -name '*.yml' | wc -l),
  "status": "success"
}
EOF
        
    - name: Upload changelog artifacts
      uses: actions/upload-artifact@v4
      with:
        name: changelog-artifacts
        path: |
          archives/changelog/
          RELEASE_NOTES_v*.md
        retention-days: 30
        
    - name: Commit changelog updates
      run: |
        echo "💾 Commit des mises à jour du changelog..."
        git config --local user.email "dlnraja dylan.rajasekaram@gmail.com"
        git config --local user.name "dlnraja"
        git add CHANGELOG.md RELEASE_NOTES_v*.md archives/changelog/
        git commit -m "[AUTO] Mise à jour automatique du changelog - $(date -u +"%Y-%m-%d %H:%M:%S")" || echo "Aucun changement à commiter"
        
    - name: Push changes
      run: |
        echo "🚀 Push des changements..."
        git push origin master || echo "Push non nécessaire"
        
    - name: Success
      run: |
        echo "🎉 Génération automatique du changelog terminée!"
        echo "📊 Résumé:"
        echo "- ✅ Analyse des commits effectuée"
        echo "- ✅ Changelog mis à jour"
        echo "- ✅ Notes de release générées"
        echo "- ✅ Données archivées"
        echo "- ✅ Changements commités et pushés"
        
    - name: Clean up package-lock.json
      if: always()
      run: |
        echo "🧹 Suppression du package-lock.json pour éviter la surcharge du repo."
        rm -f package-lock.json 

