# intelligent-triage.yml
# Description: Workflow automatisÃ© pour intelligent triage
# Date: 2025-07-25
# Version: 1.0

name: ðŸ¤– Intelligent Triage Bot


# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on:
  schedule:
    - cr
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: '0 */1 * * *'  # Toutes les heures
  workflow_dispatch:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, reopened]

env:
  BOT_NAME: "Tuya Zigbee Intelligent Bot"
  MAX_ITEMS: 20
  ENABLE_STATS: true

jobs:
  intelligent-triage:
    runs-
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: ubuntu-latest
    name: ðŸ¤– Triage intelligent
    steps:
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: ðŸ“¥ Checkout
        uses: actions/checkout@v3

      - name: ðŸ¤– Traitement PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            console.log('ðŸ¤– Traitement des PRs...');
            
            const { data: prs } = await github.pulls.list({
              owner, repo, state: 'open', per_page: 20
            });
            
            for (const pr of prs) {
              console.log(`ðŸ“ PR #${pr.number}: ${pr.title}`);
              
              // Commentaire intelligent
              const comment = `ðŸ¤– **PR AnalysÃ©e**\n\n` +
                            `ðŸ“Š **DÃ©tails:**\n` +
                            `- Titre: ${pr.title}\n` +
                            `- Auteur: @${pr.user.login}\n` +
                            `- Fichiers: ${pr.changed_files}\n` +
                            `- Ajouts: +${pr.additions}\n` +
                            `- Suppressions: -${pr.deletions}\n\n` +
                            `ðŸ”„ **Prochaines Ã©tapes:**\n` +
                            `1. âœ… VÃ©rification automatique\n` +
                            `2. ðŸ” Revue par l'Ã©quipe\n` +
                            `3. ðŸš€ Merge si approuvÃ©\n\n` +
                            `*Mode YOLO Intelligent activÃ©*`;
              
              await github.issues.createComment({
                owner, repo, issue_number: pr.number, body: comment
              });
              
              // Labels automatiques
              const labels = [];
              if (pr.title.toLowerCase().includes('fix')) labels.push('bug');
              if (pr.title.toLowerCase().includes('feature')) labels.push('enhancement');
              if (pr.title.toLowerCase().includes('doc')) labels.push('documentation');
              if (pr.changed_files > 10) labels.push('large-change');
              
              if (labels.length > 0) {
                await github.issues.addLabels({
                  owner, repo, issue_number: pr.number, labels
                });
              }
            }
            
            console.log(`âœ… ${prs.length} PRs traitÃ©es`);

      - name: ðŸ¤– Traitement Issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            console.log('ðŸ¤– Traitement des Issues...');
            
            const { data: issues } = await github.issues.listForRepo({
              owner, repo, state: 'open', per_page: 20
            });
            
            const pureIssues = issues.filter(issue => !issue.pull_request);
            
            for (const issue of pureIssues) {
              console.log(`ðŸ“ Issue #${issue.number}: ${issue.title}`);
              
              // Commentaire intelligent
              const comment = `ðŸ¤– **Issue AnalysÃ©e**\n\n` +
                            `ðŸ“Š **DÃ©tails:**\n` +
                            `- Titre: ${issue.title}\n` +
                            `- Auteur: @${issue.user.login}\n` +
                            `- CrÃ©Ã©e: ${new Date(issue.created_at).toLocaleDateString()}\n` +
                            `- Labels: ${issue.labels.map(l => l.name).join(', ') || 'Aucun'}\n\n` +
                            `ðŸ”„ **Prochaines Ã©tapes:**\n` +
                            `1. âœ… VÃ©rification automatique\n` +
                            `2. ðŸ” Analyse par l'Ã©quipe\n` +
                            `3. ðŸš€ RÃ©solution prioritaire\n\n` +
                            `*Mode YOLO Intelligent activÃ©*`;
              
              await github.issues.createComment({
                owner, repo, issue_number: issue.number, body: comment
              });
              
              // Labels automatiques
              const labels = [];
              if (issue.title.toLowerCase().includes('bug')) labels.push('bug');
              if (issue.title.toLowerCase().includes('feature')) labels.push('enhancement');
              if (issue.title.toLowerCase().includes('question')) labels.push('question');
              if (issue.title.toLowerCase().includes('driver')) labels.push('driver');
              if (issue.title.toLowerCase().includes('urgent')) labels.push('urgent');
              
              if (labels.length > 0) {
                await github.issues.addLabels({
                  owner, repo, issue_number: issue.number, labels
                });
              }
            }
            
            console.log(`âœ… ${pureIssues.length} Issues traitÃ©es`);

  statistics:
    runs-
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: ubuntu-latest
    name: ðŸ“Š Statistiques
    if: env.ENABLE_STATS == 'true'
    steps:
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: ðŸ“Š GÃ©nÃ©ration rapport
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            const { data: prs } = await github.pulls.list({
              owner, repo, state: 'open', per_page: 100
            });
            
            const { data: issues } = await github.issues.listForRepo({
              owner, repo, state: 'open', per_page: 100
            });
            
            const pureIssues = issues.filter(issue => !issue.pull_request);
            
            const report = `ðŸ“Š **RAPPORT TRIAGE INTELLIGENT**\n\n` +
                          `ðŸ• **Timestamp:** ${new Date().toLocaleString()}\n` +
                          `ðŸ¤– **Bot:** ${process.env.BOT_NAME}\n\n` +
                          `ðŸ“ˆ **Statistiques:**\n` +
                          `- PRs ouvertes: ${prs.length}\n` +
                          `- Issues ouvertes: ${pureIssues.length}\n` +
                          `- Total Ã©lÃ©ments: ${prs.length + pureIssues.length}\n\n` +
                          `âœ… **Actions effectuÃ©es:**\n` +
                          `- Commentaires automatiques ajoutÃ©s\n` +
                          `- Labels automatiques appliquÃ©s\n` +
                          `- Triage intelligent terminÃ©\n\n` +
                          `ðŸš€ **Mode YOLO Intelligent activÃ©**`;
            
            console.log(report); 

