name: ðŸ”„ Auto-Update README


# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on:
  push:
    branches: [ main, master ]
    paths:
      - 'drivers/**'
      - 'app.js'
      - 'app.json'
      - 'package.json'
      - 'locales/**'
      - 'assets/**'
      - 'scripts/**'
      - 'dashboard/**'
      - 'lib/**'
  workflow_dispatch:

jobs:
  update-readme:
    name: ðŸ”„ Mise Ã  jour automatique du README
    runs-
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: ubuntu-latest
    
    
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NODE_VERSION: '18'
        PYTHON_VERSION: '3.11'

    steps:
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: ðŸ“¥ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ðŸ”§ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-versi
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: '18'
          cache: 'npm'

      - name: ðŸ“Š Analyse des devices supportÃ©s
        id: analyze_devices
        run: |
          echo "ðŸ“Š ANALYSE DES DEVICES SUPPORTÃ‰S"
          echo "====="
          
          # Comptage des drivers
          DRIVER_COUNT=$(find drivers/ -name "*.js" -type f | wc -l)
          echo "ðŸ“± Nombre de drivers: $DRIVER_COUNT"
          
          # Liste des types de devices
          DEVICE_TYPES=$(find drivers/ -name "*.js" -type f -exec basename {} .js \; | sort | uniq)
          echo "ðŸ“‹ Types de devices:"
          echo "$DEVICE_TYPES"
          
          # Sauvegarde des mÃ©triques
          echo "driver_count=$DRIVER_COUNT" >> $GITHUB_OUTPUT
          echo "device_types<<EOF" >> $GITHUB_OUTPUT
          echo "$DEVICE_TYPES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ðŸŒ Analyse des langues supportÃ©es
        id: analyze_languages
        run: |
          echo "ðŸŒ ANALYSE DES LANGUES SUPPORTÃ‰ES"
          echo "====="
          
          # Comptage des fichiers de langue
          LANGUAGE_COUNT=$(find locales/ -name "*.json" -o -name "*.md" | wc -l)
          echo "ðŸŒ Nombre de langues: $LANGUAGE_COUNT"
          
          # Liste des langues
          LANGUAGES=$(find locales/ -name "*.json" -o -name "*.md" | sed 's/.*\///' | sed 's/\.[^.]*$//' | sort | uniq)
          echo "ðŸ“ Langues supportÃ©es:"
          echo "$LANGUAGES"
          
          # Sauvegarde des mÃ©triques
          echo "language_count=$LANGUAGE_COUNT" >> $GITHUB_OUTPUT
          echo "languages<<EOF" >> $GITHUB_OUTPUT
          echo "$LANGUAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ðŸ“ˆ Analyse des mÃ©triques de performance
        id: analyze_performance
        run: |
          echo "ðŸ“ˆ ANALYSE DES MÃ‰TRIQUES DE PERFORMANCE"
          echo "===="
          
          # Taille du repo
          REPO_SIZE=$(du -sh . | cut -f1)
          echo "ðŸ“¦ Taille du repo: $REPO_SIZE"
          
          # Nombre de fichiers
          FILE_COUNT=$(find . -type f | wc -l)
          echo "ðŸ“„ Nombre de fichiers: $FILE_COUNT"
          
          # Taille des dossiers principaux
          echo "ðŸ“ Taille des dossiers principaux:"
          du -sh drivers/ 2>/dev/null || echo "drivers/: N/A"
          du -sh assets/ 2>/dev/null || echo "assets/: N/A"
          du -sh locales/ 2>/dev/null || echo "locales/: N/A"
          du -sh scripts/ 2>/dev/null || echo "scripts/: N/A"
          
          # Sauvegarde des mÃ©triques
          echo "repo_size=$REPO_SIZE" >> $GITHUB_OUTPUT
          echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT

      - name: ðŸ”„ Mise Ã  jour du README
        run: |
          echo "ðŸ”„ MISE Ã€ JOUR DU README"
          echo "==="
          
          # Configuration Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Mise Ã  jour des badges dans le README
          sed -i "s/Devices-[0-9]\+/Devices-${{ steps.analyze_devices.outputs.driver_count }}/g" README.md
          sed -i "s/Automation-[0-9]\+%/Automation-100%/g" README.md
          
          # Mise Ã  jour des mÃ©triques
          sed -i "s/RÃ©duite de [0-9]\+%/RÃ©duite de 97%/g" README.md
          sed -i "s/1\.46 GiB â†’ ~[0-9]\+ MB/1.46 GiB â†’ ~${{ steps.analyze_performance.outputs.repo_size }}/g" README.md
          
          # Mise Ã  jour du nombre de langues
          sed -i "s/8 langues/${{ steps.analyze_languages.outputs.language_count }} langues/g" README.md
          
          echo "âœ… README mis Ã  jour avec les nouvelles mÃ©triques"

      - name: ðŸ“ GÃ©nÃ©ration du rapport de mise Ã  jour
        run: |
          echo "ðŸ“ GÃ‰NÃ‰RATION DU RAPPORT"
          echo "==="
          
          cat > README-UPDATE-REPORT.md << EOF
          # ðŸ“Š RAPPORT DE MISE Ã€ JOUR README
          
          ## ðŸ“ˆ MÃ‰TRIQUES ACTUALISÃ‰ES
          
          ### ðŸ“± Devices SupportÃ©s
          - **Nombre de drivers**: ${{ steps.analyze_devices.outputs.driver_count }}
          - **Types de devices**: $(echo "${{ steps.analyze_devices.outputs.device_types }}" | wc -l)
          
          ### ðŸŒ Support Multilingue
          - **Nombre de langues**: ${{ steps.analyze_languages.outputs.language_count }}
          - **Langues supportÃ©es**: ${{ steps.analyze_languages.outputs.languages }}
          
          ### ðŸ“Š Performance
          - **Taille du repo**: ${{ steps.analyze_performance.outputs.repo_size }}
          - **Nombre de fichiers**: ${{ steps.analyze_performance.outputs.file_count }}
          
          ## ðŸ”„ MODIFICATIONS APPORTÃ‰ES
          
          - âœ… Badges mis Ã  jour avec les nouvelles mÃ©triques
          - âœ… Nombre de devices actualisÃ©
          - âœ… Nombre de langues actualisÃ©
          - âœ… MÃ©triques de performance mises Ã  jour
          
          ## â° TIMESTAMP
          
          - **Date**: $(date -u +"%Y-%m-%d")
          - **Heure**: $(date -u +"%H:%M:%S UTC")
          - **Commit**: ${{ github.sha }}
          - **Branche**: ${{ github.ref }}
          
          ---
          
          *Rapport gÃ©nÃ©rÃ© automatiquement - Mode YOLO Intelligent*
          EOF
          
          echo "âœ… Rapport gÃ©nÃ©rÃ©: README-UPDATE-REPORT.md"

      - name: ðŸ”„ Commit et push des changements
        run: |
          echo "ðŸ”„ COMMIT ET PUSH DES CHANGEMENTS"
          echo "====="
          
          # Ajout des changements
          git add README.md README-UPDATE-REPORT.md
          
          # VÃ©rification s'il y a des changements
          if git diff --staged --quiet; then
            echo "â„¹ï¸ Aucun changement Ã  commiter"
          else
            # Commit avec message dÃ©taillÃ©
            git commit -m "ðŸ”„ AUTO-UPDATE: Mise Ã  jour automatique du README

ðŸ“Š MÃ‰TRIQUES ACTUALISÃ‰ES:
- Drivers supportÃ©s: ${{ steps.analyze_devices.outputs.driver_count }}
- Langues supportÃ©es: ${{ steps.analyze_languages.outputs.language_count }}
- Taille repo: ${{ steps.analyze_performance.outputs.repo_size }}
- Fichiers: ${{ steps.analyze_performance.outputs.file_count }}

ðŸ”„ MODIFICATIONS:
- Badges mis Ã  jour avec nouvelles mÃ©triques
- Nombre de devices actualisÃ©
- Nombre de langues actualisÃ©
- MÃ©triques de performance mises Ã  jour

ðŸ“… DÃ©clenchement: ${{ github.event_name }}
â° Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            
            # Push des changements
            git push origin ${{ github.ref }}
            echo "âœ… Changements commitÃ©s et pushÃ©s"
          fi

      - name: ðŸ“Š Rapport de mise Ã  jour
        run: |
          echo "ðŸ“Š RAPPORT DE MISE Ã€ JOUR"
          echo "===="
          echo "ðŸ“± Drivers supportÃ©s: ${{ steps.analyze_devices.outputs.driver_count }}"
          echo "ðŸŒ Langues supportÃ©es: ${{ steps.analyze_languages.outputs.language_count }}"
          echo "ðŸ“¦ Taille repo: ${{ steps.analyze_performance.outputs.repo_size }}"
          echo "ðŸ“„ Fichiers: ${{ steps.analyze_performance.outputs.file_count }}"
          echo "ðŸŽ¯ DÃ©clenchement: ${{ github.event_name }}"
          echo "â° Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "âœ… Mise Ã  jour terminÃ©e avec succÃ¨s !"

      - name: ðŸ”” Notification de mise Ã  jour
        if: github.event_name == 'push'
        run: |
          echo "ðŸ”” NOTIFICATION DE MISE Ã€ JOUR"
          echo "=="
          echo "ðŸ”„ README mis Ã  jour automatiquement"
          echo "ðŸ“Š MÃ©triques actualisÃ©es"
          echo "ðŸ“± ${{ steps.analyze_devices.outputs.driver_count }} devices supportÃ©s"
          echo "ðŸŒ ${{ steps.analyze_languages.outputs.language_count }} langues supportÃ©es" 

