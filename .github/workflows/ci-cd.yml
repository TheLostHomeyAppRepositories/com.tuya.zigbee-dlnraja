name: Tuya Zigbee CI/CD

on:
  push:
    branches: [ master, main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 2.0.1)'
        required: false
        default: ''

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.10'
  COVERAGE_FILE: coverage/coverage-final.json

jobs:
  validate:
    name: Validate and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x]
        python-version: ['3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install Node.js dependencies
      run: |
        npm ci
        npm install -g homey@latest
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        cd python_service
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        cd ..
    
    - name: Run linting
      run: npm run lint
    
    - name: Run JavaScript unit tests
      run: npm run test:unit
    
    - name: Run JavaScript integration tests
      run: npm run test:integration
      
    - name: Run Python tests with coverage
      working-directory: ./python_service
      run: |
        python -m pytest --cov=app --cov-report=xml:coverage.xml -v
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == '18.x' && matrix.python-version == '3.10' && github.event_name != 'pull_request'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: python_service/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
    
    - name: Run Homey validation
      if: matrix.node-version == '18.x' && matrix.python-version == '3.10'
      run: |
        npm run build
        homey app validate
    
    - name: Build for release
      if: startsWith(github.ref, 'refs/tags/v') && matrix.node-version == '18.x' && matrix.python-version == '3.10'
      run: |
        npm run build
        homey app pack
      env:
        HOMEY_APP_ID: ${{ secrets.HOMEY_APP_ID }}
        HOMEY_CLIENT_ID: ${{ secrets.HOMEY_CLIENT_ID }}
        HOMEY_CLIENT_SECRET: ${{ secrets.HOMEY_CLIENT_SECRET }}
    
    - name: Upload artifact
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v3
      with:
        name: homey-app
        path: |
          *.tar.gz
          *.signed
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.tar.gz
          *.signed
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npm run test:coverage
    
    - name: Upload JavaScript coverage
      if: ${{ !github.event.pull_request || github.event.pull_request.head.repo.full_name == github.repository }}
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN || 'dummy-token' }}
        file: ./coverage/lcov.info
        flags: javascript
        fail_ci_if_error: false
    
    - name: Run Python tests with coverage
      working-directory: ./python_service
      run: |
        python -m pip install -r requirements.txt
        python -m pip install pytest-cov
        python -m pytest tests/ --cov=. --cov-report=xml
    
    - name: Upload Python coverage
      if: ${{ !github.event.pull_request || github.event.pull_request.head.repo.full_name == github.repository }}
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN || 'dummy-token' }}
        file: ./python_service/coverage.xml
        flags: python
        fail_ci_if_error: false
    
    - name: Run integration tests
      run: npm run test:integration
    
    - name: Validate app configuration
      run: npm run validate:all
    
    - name: Build the app
      run: npm run build
    
    - name: Validate Homey app
      run: homey app validate
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      if: success() && matrix.node-version == '18.x'  # Only upload once per OS
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        fail_ci_if_error: false