# enhanced-pr-issue-bot.yml
# Description: Workflow automatisÃ© pour enhanced pr issue bot
# Date: 2025-07-25
# Version: 1.0

name: ðŸ¤– Enhanced PR and Issue Bot - Intelligent Triage


# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on:
  schedule:
    - cr
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: '0 */1 * * *'  # Toutes les heures
    - cr
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: '0 5 * * *'    # Tous les jours Ã  5h00
  workflow_dispatch:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, reopened]

env:
  BOT_NAME: "Tuya Zigbee Bot"
  MAX_ITEMS_PER_RUN: 20
  ENABLE_STATISTICS: true
  ENABLE_LABELS: true
  ENABLE_ASSIGNMENTS: true

jobs:
  # ðŸ” ANALYSE INTELLIGENTE
  intelligent-analysis:
    runs-
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: ubuntu-latest
    name: ðŸ” Analyse intelligente des PR/Issues
    outputs:
      pr-count: ${{ steps.count-prs.outputs.count }}
      issue-count: ${{ steps.count-issues.outputs.count }}
      priority-issues: ${{ steps.priority-check.outputs.count }}
      stale-items: ${{ steps.stale-check.outputs.count }}
    steps:
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: ðŸ“¥ Checkout repository
        uses: actions/checkout@v3

      - name: ðŸ” Comptage des PRs ouvertes
        id: count-prs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: prs } = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            console.log(`ðŸ“Š PRs ouvertes: ${prs.length}`);
            core.setOutput('count', prs.length);

      - name: ðŸ” Comptage des Issues ouvertes
        id: count-issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issues } = await github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            const pureIssues = issues.filter(issue => !issue.pull_request);
            console.log(`ðŸ“Š Issues ouvertes: ${pureIssues.length}`);
            core.setOutput('count', pureIssues.length);

      - name: ðŸ” VÃ©rification des prioritÃ©s
        id: priority-check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issues } = await github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            const priorityIssues = issues.filter(issue => 
              issue.labels.some(label => 
                label.name.toLowerCase().includes('urgent') ||
                label.name.toLowerCase().includes('critical') ||
                label.name.toLowerCase().includes('high')
              )
            );
            console.log(`ðŸš¨ Issues prioritaires: ${priorityIssues.length}`);
            core.setOutput('count', priorityIssues.length);

      - name: ðŸ” VÃ©rification des Ã©lÃ©ments obsolÃ¨tes
        id: stale-check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const now = new Date();
            const staleThreshold = 30; // jours
            
            const { data: issues } = await github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            
            const staleItems = issues.filter(issue => {
              const createdAt = new Date(issue.created_at);
              const daysSinceCreation = (now - createdAt) / (1000 * 60 * 60 * 24);
              return daysSinceCreation > staleThreshold;
            });
            
            console.log(`â° Ã‰lÃ©ments obsolÃ¨tes (>${staleThreshold}j): ${staleItems.length}`);
            core.setOutput('count', staleItems.length);

  # ðŸ¤– TRIAGE INTELLIGENT
  intelligent-triage:
    runs-
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: ubuntu-latest
    needs: intelligent-analysis
    name: ðŸ¤– Triage intelligent des PR/Issues
    steps:
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: ðŸ“¥ Checkout repository
        uses: actions/checkout@v3

      - name: ðŸ¤– Traitement des PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const maxItems = parseInt(process.env.MAX_ITEMS_PER_RUN || '20');
            
            console.log(`ðŸ¤– Traitement des PRs (max: ${maxItems})`);
            
            const { data: prs } = await github.pulls.list({
              owner, repo, state: 'open', per_page: maxItems
            });
            
            for (const pr of prs) {
              console.log(`ðŸ“ Traitement PR #${pr.number}: ${pr.title}`);
              
              // Commentaire automatique
              await github.issues.createComment({
                owner, repo, issue_number: pr.number,
                body: `ðŸ¤– **Merci pour votre PR !**\n\n` +
                      `ðŸ“Š **Analyse automatique:**\n` +
                      `- Titre: ${pr.title}\n` +
                      `- Auteur: @${pr.user.login}\n` +
                      `- CrÃ©Ã©e: ${new Date(pr.created_at).toLocaleDateString()}\n` +
                      `- Fichiers modifiÃ©s: ${pr.changed_files}\n\n` +
                      `ðŸ”„ **Prochaines Ã©tapes:**\n` +
                      `1. âœ… VÃ©rification automatique\n` +
                      `2. ðŸ” Revue par l'Ã©quipe\n` +
                      `3. ðŸš€ Merge si approuvÃ©\n\n` +
                      `*Mode YOLO Intelligent activÃ© - Traitement optimisÃ©*`
              });
              
              // Ajout de labels automatiques
              if (process.env.ENABLE_LABELS === 'true') {
                const labels = [];
                if (pr.title.toLowerCase().includes('fix')) labels.push('bug');
                if (pr.title.toLowerCase().includes('feature')) labels.push('enhancement');
                if (pr.title.toLowerCase().includes('doc')) labels.push('documentation');
                if (pr.changed_files > 10) labels.push('large-change');
                
                if (labels.length > 0) {
                  await github.issues.addLabels({
                    owner, repo, issue_number: pr.number, labels
                  });
                  console.log(`ðŸ·ï¸ Labels ajoutÃ©s: ${labels.join(', ')}`);
                }
              }
              
              // Assignation automatique
              if (process.env.ENABLE_ASSIGNMENTS === 'true') {
                const assignees = [];
                if (pr.changed_files > 5) assignees.push('maintainer');
                if (pr.title.toLowerCase().includes('driver')) assignees.push('driver-expert');
                
                if (assignees.length > 0) {
                  await github.issues.addAssignees({
                    owner, repo, issue_number: pr.number, assignees
                  });
                  console.log(`ðŸ‘¥ AssignÃ©s: ${assignees.join(', ')}`);
                }
              }
            }
            
            console.log(`âœ… ${prs.length} PRs traitÃ©es`);

      - name: ðŸ¤– Traitement des Issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const maxItems = parseInt(process.env.MAX_ITEMS_PER_RUN || '20');
            
            console.log(`ðŸ¤– Traitement des Issues (max: ${maxItems})`);
            
            const { data: issues } = await github.issues.listForRepo({
              owner, repo, state: 'open', per_page: maxItems
            });
            
            const pureIssues = issues.filter(issue => !issue.pull_request);
            
            for (const issue of pureIssues) {
              console.log(`ðŸ“ Traitement Issue #${issue.number}: ${issue.title}`);
              
              // Commentaire automatique
              await github.issues.createComment({
                owner, repo, issue_number: issue.number,
                body: `ðŸ¤– **Merci pour votre issue !**\n\n` +
                      `ðŸ“Š **Analyse automatique:**\n` +
                      `- Titre: ${issue.title}\n` +
                      `- Auteur: @${issue.user.login}\n` +
                      `- CrÃ©Ã©e: ${new Date(issue.created_at).toLocaleDateString()}\n` +
                      `- Labels: ${issue.labels.map(l => l.name).join(', ') || 'Aucun'}\n\n` +
                      `ðŸ”„ **Prochaines Ã©tapes:**\n` +
                      `1. âœ… VÃ©rification automatique\n` +
                      `2. ðŸ” Analyse par l'Ã©quipe\n` +
                      `3. ðŸš€ RÃ©solution prioritaire\n\n` +
                      `*Mode YOLO Intelligent activÃ© - Traitement optimisÃ©*`
              });
              
              // Ajout de labels automatiques
              if (process.env.ENABLE_LABELS === 'true') {
                const labels = [];
                if (issue.title.toLowerCase().includes('bug')) labels.push('bug');
                if (issue.title.toLowerCase().includes('feature')) labels.push('enhancement');
                if (issue.title.toLowerCase().includes('question')) labels.push('question');
                if (issue.title.toLowerCase().includes('driver')) labels.push('driver');
                if (issue.title.toLowerCase().includes('urgent')) labels.push('urgent');
                
                if (labels.length > 0) {
                  await github.issues.addLabels({
                    owner, repo, issue_number: issue.number, labels
                  });
                  console.log(`ðŸ·ï¸ Labels ajoutÃ©s: ${labels.join(', ')}`);
                }
              }
              
              // Assignation automatique
              if (process.env.ENABLE_ASSIGNMENTS === 'true') {
                const assignees = [];
                if (issue.title.toLowerCase().includes('driver')) assignees.push('driver-expert');
                if (issue.title.toLowerCase().includes('urgent')) assignees.push('maintainer');
                if (issue.title.toLowerCase().includes('question')) assignees.push('support');
                
                if (assignees.length > 0) {
                  await github.issues.addAssignees({
                    owner, repo, issue_number: issue.number, assignees
                  });
                  console.log(`ðŸ‘¥ AssignÃ©s: ${assignees.join(', ')}`);
                }
              }
            }
            
            console.log(`âœ… ${pureIssues.length} Issues traitÃ©es`);

  # ðŸ“Š STATISTIQUES ET RAPPORTS
  statistics-report:
    runs-
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: ubuntu-latest
    needs: [intelligent-analysis, intelligent-triage]
    name: ðŸ“Š GÃ©nÃ©ration des statistiques
    if: env.ENABLE_STATISTICS == 'true'
    steps:
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: ðŸ“Š CrÃ©ation du rapport
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            const prCount = ${{ needs.intelligent-analysis.outputs.pr-count }};
            const issueCount = ${{ needs.intelligent-analysis.outputs.issue-count }};
            const priorityCount = ${{ needs.intelligent-analysis.outputs.priority-issues }};
            const staleCount = ${{ needs.intelligent-analysis.outputs.stale-items }};
            
            const report = `ðŸ“Š **RAPPORT TRIAGE INTELLIGENT**\n\n` +
                          `ðŸ• **Timestamp:** ${new Date().toLocaleString()}\n` +
                          `ðŸ¤– **Bot:** ${process.env.BOT_NAME}\n\n` +
                          `ðŸ“ˆ **Statistiques:**\n` +
                          `- PRs ouvertes: ${prCount}\n` +
                          `- Issues ouvertes: ${issueCount}\n` +
                          `- Issues prioritaires: ${priorityCount}\n` +
                          `- Ã‰lÃ©ments obsolÃ¨tes: ${staleCount}\n\n` +
                          `âœ… **Actions effectuÃ©es:**\n` +
                          `- Commentaires automatiques ajoutÃ©s\n` +
                          `- Labels automatiques appliquÃ©s\n` +
                          `- Assignations automatiques effectuÃ©es\n` +
                          `- Triage intelligent terminÃ©\n\n` +
                          `ðŸš€ **Mode YOLO Intelligent activÃ©**\n` +
                          `*Workflow optimisÃ© et automatisÃ©*`;
            
            // CrÃ©er un commentaire sur une issue de rapport
            const { data: issues } = await github.issues.listForRepo({
              owner, repo, state: 'open', per_page: 1
            });
            
            if (issues.length > 0) {
              await github.issues.createComment({
                owner, repo, issue_number: issues[0].number, body: report
              });
            }
            
            console.log('ðŸ“Š Rapport de statistiques gÃ©nÃ©rÃ©');

  # ðŸ”” NOTIFICATIONS AVANCÃ‰ES
  advanced-notifications:
    runs-
# Permissions pour la sÃ©curitÃ©
permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  security-events: read

on: ubuntu-latest
    needs: intelligent-analysis
    name: ðŸ”” Notifications avancÃ©es
    if: needs.intelligent-analysis.outputs.priority-issues > '0'
    steps:
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: ðŸ”” Notification des prioritÃ©s
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const priorityCount = ${{ needs.intelligent-analysis.outputs.priority-issues }};
            
            if (priorityCount > 0) {
              const notification = `ðŸš¨ **ALERTE PRIORITÃ‰**\n\n` +
                                 `âš ï¸ **${priorityCount} issue(s) prioritaire(s) dÃ©tectÃ©e(s)**\n\n` +
                                 `ðŸ” **Action requise:** VÃ©rification immÃ©diate\n` +
                                 `â° **Timestamp:** ${new Date().toLocaleString()}\n\n` +
                                 `*Mode YOLO Intelligent - Alerte automatique*`;
              
              // CrÃ©er une issue d'alerte
              await github.issues.create({
                owner, repo,
                title: `ðŸš¨ ALERTE: ${priorityCount} issue(s) prioritaire(s)`,
                body: notification,
                labels: ['urgent', 'alert', 'priority']
              });
              
              console.log(`ðŸš¨ Alerte crÃ©Ã©e pour ${priorityCount} issue(s) prioritaire(s)`);
            } 

