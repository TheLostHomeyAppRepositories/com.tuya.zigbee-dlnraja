name: Intelligent Driver Integration

on:
  push:
    branches: [ master ]
    paths:
      - 'tools/intelligent-driver-generator.js'
      - 'tools/legacy-driver-converter.js'
      - 'tools/driver-research-automation.js'
      - 'tools/silent-reference-processor.js'
      - 'tools/comprehensive-silent-processor.js'
      - 'tools/additive-silent-integrator.js'
      - 'ref/**'
  pull_request:
    branches: [ master ]
    paths:
      - 'tools/intelligent-driver-generator.js'
      - 'tools/legacy-driver-converter.js'
      - 'tools/driver-research-automation.js'
      - 'tools/silent-reference-processor.js'
      - 'tools/comprehensive-silent-processor.js'
      - 'tools/additive-silent-integrator.js'
      - 'ref/**'
  workflow_dispatch:
    inputs:
      integration_type:
        description: 'Type of integration to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - intelligent
          - legacy
          - research
          - silent
          - additive

jobs:
  intelligent-driver-generation:
    name: Intelligent Driver Generation
    runs-on: ubuntu-latest
    if: github.event.inputs.integration_type == 'all' || github.event.inputs.integration_type == 'intelligent' || github.event.inputs.integration_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        echo "  \n"
        
    - name: Run intelligent driver generation
      run: |
        echo "üß† Running intelligent driver generation..."
        node tools/intelligent-driver-generator.js
        echo "‚úÖ Intelligent driver generation completed"
        echo "  \n"
        
    - name: Count generated drivers
      run: |
        echo "üìä Counting generated drivers..."
        INTELLIGENT_COUNT=$(find drivers/intelligent -name "driver.compose.json" 2>/dev/null | wc -l || echo "0")
        echo "‚úÖ Generated $INTELLIGENT_COUNT intelligent drivers"
        echo "  \n"
        
  legacy-driver-conversion:
    name: Legacy Driver Conversion
    runs-on: ubuntu-latest
    if: github.event.inputs.integration_type == 'all' || github.event.inputs.integration_type == 'legacy' || github.event.inputs.integration_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        echo "  \n"
        
    - name: Run legacy driver conversion
      run: |
        echo "üîÑ Running legacy driver conversion..."
        node tools/legacy-driver-converter.js
        echo "‚úÖ Legacy driver conversion completed"
        echo "  \n"
        
    - name: Count converted drivers
      run: |
        echo "üìä Counting converted drivers..."
        LEGACY_COUNT=$(find drivers/legacy -name "*.js" 2>/dev/null | wc -l || echo "0")
        echo "‚úÖ Converted $LEGACY_COUNT legacy drivers"
        echo "  \n"
        
  driver-research-automation:
    name: Driver Research Automation
    runs-on: ubuntu-latest
    if: github.event.inputs.integration_type == 'all' || github.event.inputs.integration_type == 'research' || github.event.inputs.integration_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        echo "  \n"
        
    - name: Run driver research automation
      run: |
        echo "üîç Running driver research automation..."
        node tools/driver-research-automation.js
        echo "‚úÖ Driver research automation completed"
        echo "  \n"
        
    - name: Count researched drivers
      run: |
        echo "üìä Counting researched drivers..."
        RESEARCH_COUNT=$(find drivers/research -name "driver.compose.json" 2>/dev/null | wc -l || echo "0")
        echo "‚úÖ Researched $RESEARCH_COUNT drivers"
        echo "  \n"
        
  silent-reference-processing:
    name: Silent Reference Processing
    runs-on: ubuntu-latest
    if: github.event.inputs.integration_type == 'all' || github.event.inputs.integration_type == 'silent' || github.event.inputs.integration_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        echo "  \n"
        
    - name: Run silent reference processing
      run: |
        echo "üîá Running silent reference processing..."
        node tools/silent-reference-processor.js
        echo "‚úÖ Silent reference processing completed"
        echo "  \n"
        
    - name: Count processed references
      run: |
        echo "üìä Counting processed references..."
        PROCESSED_COUNT=$(find ref/processed -name "*.json" 2>/dev/null | wc -l || echo "0")
        echo "‚úÖ Processed $PROCESSED_COUNT references"
        echo "  \n"
        
  comprehensive-silent-processing:
    name: Comprehensive Silent Processing
    runs-on: ubuntu-latest
    if: github.event.inputs.integration_type == 'all' || github.event.inputs.integration_type == 'silent' || github.event.inputs.integration_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        echo "  \n"
        
    - name: Run comprehensive silent processing
      run: |
        echo "üîá Running comprehensive silent processing..."
        node tools/comprehensive-silent-processor.js
        echo "‚úÖ Comprehensive silent processing completed"
        echo "  \n"
        
    - name: Count comprehensive references
      run: |
        echo "üìä Counting comprehensive references..."
        COMPREHENSIVE_COUNT=$(find ref/comprehensive -name "*.json" 2>/dev/null | wc -l || echo "0")
        echo "‚úÖ Processed $COMPREHENSIVE_COUNT comprehensive references"
        echo "  \n"
        
  additive-silent-integration:
    name: Additive Silent Integration
    runs-on: ubuntu-latest
    if: github.event.inputs.integration_type == 'all' || github.event.inputs.integration_type == 'additive' || github.event.inputs.integration_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        echo "  \n"
        
    - name: Run additive silent integration
      run: |
        echo "‚ûï Running additive silent integration..."
        node tools/additive-silent-integrator.js
        echo "‚úÖ Additive silent integration completed"
        echo "  \n"
        
    - name: Count additive integrations
      run: |
        echo "üìä Counting additive integrations..."
        ADDITIVE_COUNT=$(find ref/integrated -name "*.json" 2>/dev/null | wc -l || echo "0")
        echo "‚úÖ Integrated $ADDITIVE_COUNT additive references"
        echo "  \n"
        
  update-reference-files:
    name: Update Reference Files
    runs-on: ubuntu-latest
    needs: [intelligent-driver-generation, legacy-driver-conversion, driver-research-automation, silent-reference-processing, comprehensive-silent-processing, additive-silent-integration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Update firmware patterns
      run: |
        echo "üîÑ Updating firmware patterns..."
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        const patternsPath = path.join('ref', 'firmware-patterns.json');
        if (fs.existsSync(patternsPath)) {
          const patterns = JSON.parse(fs.readFileSync(patternsPath, 'utf8'));
          patterns.lastUpdated = new Date().toISOString();
          patterns.version = (patterns.version || 0) + 1;
          fs.writeFileSync(patternsPath, JSON.stringify(patterns, null, 2));
          console.log('‚úÖ Firmware patterns updated');
        }
        "
        echo "  \n"
        
    - name: Update manufacturer IDs
      run: |
        echo "üè≠ Updating manufacturer IDs..."
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        const manufacturersPath = path.join('ref', 'manufacturer-ids.json');
        if (fs.existsSync(manufacturersPath)) {
          const manufacturers = JSON.parse(fs.readFileSync(manufacturersPath, 'utf8'));
          manufacturers.lastUpdated = new Date().toISOString();
          manufacturers.version = (manufacturers.version || 0) + 1;
          fs.writeFileSync(manufacturersPath, JSON.stringify(manufacturers, null, 2));
          console.log('‚úÖ Manufacturer IDs updated');
        }
        "
        echo "  \n"
        
    - name: Update device types
      run: |
        echo "üì± Updating device types..."
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        const deviceTypesPath = path.join('ref', 'device-types.json');
        if (fs.existsSync(deviceTypesPath)) {
          const deviceTypes = JSON.parse(fs.readFileSync(deviceTypesPath, 'utf8'));
          deviceTypes.lastUpdated = new Date().toISOString();
          deviceTypes.version = (deviceTypes.version || 0) + 1;
          fs.writeFileSync(deviceTypesPath, JSON.stringify(deviceTypes, null, 2));
          console.log('‚úÖ Device types updated');
        }
        "
        echo "  \n"
        
  update-driver-matrix:
    name: Update Driver Matrix
    runs-on: ubuntu-latest
    needs: [update-reference-files]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Update driver matrix
      run: |
        echo "üìä Updating driver matrix..."
        
        # Count all drivers
        SDK3_COUNT=$(find drivers/sdk3 -name "driver.compose.json" 2>/dev/null | wc -l || echo "0")
        LEGACY_COUNT=$(find drivers/legacy -name "*.js" 2>/dev/null | wc -l || echo "0")
        INTELLIGENT_COUNT=$(find drivers/intelligent -name "driver.compose.json" 2>/dev/null | wc -l || echo "0")
        RESEARCH_COUNT=$(find drivers/research -name "driver.compose.json" 2>/dev/null | wc -l || echo "0")
        
        # Create matrix file
        mkdir -p docs/matrix
        echo "# Driver Compatibility Matrix" > docs/matrix/driver-matrix.md
        echo "" >> docs/matrix/driver-matrix.md
        echo "Last Updated: $(date)" >> docs/matrix/driver-matrix.md
        echo "Total Drivers: $((SDK3_COUNT + LEGACY_COUNT + INTELLIGENT_COUNT + RESEARCH_COUNT))" >> docs/matrix/driver-matrix.md
        echo "" >> docs/matrix/driver-matrix.md
        echo "## Driver Categories" >> docs/matrix/driver-matrix.md
        echo "- SDK3 Drivers: $SDK3_COUNT" >> docs/matrix/driver-matrix.md
        echo "- Legacy Drivers: $LEGACY_COUNT" >> docs/matrix/driver-matrix.md
        echo "- Intelligent Drivers: $INTELLIGENT_COUNT" >> docs/matrix/driver-matrix.md
        echo "- Research Drivers: $RESEARCH_COUNT" >> docs/matrix/driver-matrix.md
        
        echo "‚úÖ Driver matrix updated"
        echo "  \n"
        
  generate-integration-report:
    name: Generate Integration Report
    runs-on: ubuntu-latest
    needs: [intelligent-driver-generation, legacy-driver-conversion, driver-research-automation, silent-reference-processing, comprehensive-silent-processing, additive-silent-integration, update-driver-matrix]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate report
      run: |
        echo "üìä Generating integration report..."
        
        # Count all drivers
        SDK3_COUNT=$(find drivers/sdk3 -name "driver.compose.json" 2>/dev/null | wc -l || echo "0")
        LEGACY_COUNT=$(find drivers/legacy -name "*.js" 2>/dev/null | wc -l || echo "0")
        INTELLIGENT_COUNT=$(find drivers/intelligent -name "driver.compose.json" 2>/dev/null | wc -l || echo "0")
        RESEARCH_COUNT=$(find drivers/research -name "driver.compose.json" 2>/dev/null | wc -l || echo "0")
        
        # Count references
        PROCESSED_COUNT=$(find ref/processed -name "*.json" 2>/dev/null | wc -l || echo "0")
        COMPREHENSIVE_COUNT=$(find ref/comprehensive -name "*.json" 2>/dev/null | wc -l || echo "0")
        ADDITIVE_COUNT=$(find ref/integrated -name "*.json" 2>/dev/null | wc -l || echo "0")
        
        echo "## Intelligent Integration Report" > integration-report.md
        echo "" >> integration-report.md
        echo "Date: $(date)" >> integration-report.md
        echo "Branch: ${{ github.ref_name }}" >> integration-report.md
        echo "Commit: ${{ github.sha }}" >> integration-report.md
        echo "" >> integration-report.md
        echo "### Driver Statistics" >> integration-report.md
        echo "- SDK3 Drivers: $SDK3_COUNT" >> integration-report.md
        echo "- Legacy Drivers: $LEGACY_COUNT" >> integration-report.md
        echo "- Intelligent Drivers: $INTELLIGENT_COUNT" >> integration-report.md
        echo "- Research Drivers: $RESEARCH_COUNT" >> integration-report.md
        echo "- Total Drivers: $((SDK3_COUNT + LEGACY_COUNT + INTELLIGENT_COUNT + RESEARCH_COUNT))" >> integration-report.md
        echo "" >> integration-report.md
        echo "### Reference Statistics" >> integration-report.md
        echo "- Processed References: $PROCESSED_COUNT" >> integration-report.md
        echo "- Comprehensive References: $COMPREHENSIVE_COUNT" >> integration-report.md
        echo "- Additive References: $ADDITIVE_COUNT" >> integration-report.md
        echo "- Total References: $((PROCESSED_COUNT + COMPREHENSIVE_COUNT + ADDITIVE_COUNT))" >> integration-report.md
        echo "" >> integration-report.md
        echo "### Integration Results" >> integration-report.md
        echo "- Intelligent Generation: ‚úÖ Completed" >> integration-report.md
        echo "- Legacy Conversion: ‚úÖ Completed" >> integration-report.md
        echo "- Research Automation: ‚úÖ Completed" >> integration-report.md
        echo "- Silent Processing: ‚úÖ Completed" >> integration-report.md
        echo "- Comprehensive Processing: ‚úÖ Completed" >> integration-report.md
        echo "- Additive Integration: ‚úÖ Completed" >> integration-report.md
        echo "- Reference Updates: ‚úÖ Completed" >> integration-report.md
        echo "- Matrix Updates: ‚úÖ Completed" >> integration-report.md
        echo "" >> integration-report.md
        echo "### Status" >> integration-report.md
        echo "Overall Status: ‚úÖ All integrations completed successfully" >> integration-report.md
        
        cat integration-report.md
        echo "  \n"
        
    - name: Upload integration report
      uses: actions/upload-artifact@v4
      with:
        name: integration-report
        path: integration-report.md
        
  commit-changes:
    name: Commit Changes
    runs-on: ubuntu-latest
    needs: [generate-integration-report]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure git
      run: |
        git config user.name "dlnraja"
        git config user.email "dylan.rajasekaram+homey@gmail.com"
        
    - name: Add changes
      run: |
        git add .
        
    - name: Commit changes
      run: |
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No changes to commit"
        else
          git commit -m "feat: Intelligent integration completed - $(date '+%Y-%m-%d %H:%M:%S') GMT+2 - Intelligent driver integration completed - Legacy drivers converted - Research automation completed - Silent reference processing completed - Additive silent integration completed - Reference files updated - Driver matrix updated - Generated by GitHub Actions workflow"
          
          git push origin master
          echo "‚úÖ Changes committed and pushed"
        fi
        echo "  \n" 