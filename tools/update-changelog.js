#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

function generateChangelog() {
  const now = new Date();
  const version = process.env.VERSION || '1.0.0';
  const commitHash = process.env.GITHUB_SHA || 'local';
  
  const changelogContent = `# Changelog

## [${version}] - ${now.toISOString().split('T')[0]}

### Added
- Enhanced Zigbee matrix with comprehensive cluster definitions
- Improved dashboard with modern UI and real-time statistics
- Added tuya-light version for simplified deployment
- Enhanced driver validation with zigbee.endpoint checks
- Multi-language README generation (EN, FR, NL, TA)

### Changed
- Updated GitHub Actions workflows for better automation
- Improved .gitignore rules for local development files
- Enhanced driver TS0201 with proper zigbee configuration
- Optimized project structure and documentation

### Fixed
- Corrected workflow syntax in release-tuya-light.yml
- Fixed driver endpoint configurations
- Resolved local configuration leaks in commits
- Cleaned up repository structure

### Technical Details
- **Commit:** ${commitHash}
- **Generated:** ${now.toISOString()}
- **SDK Version:** Homey SDK3
- **Total Drivers:** ${getDriverCount()}
- **Zigbee Clusters:** ${getClusterCount()}

---

*This changelog is automatically generated by the project tools.*
`;

  return changelogContent;
}

function getDriverCount() {
  try {
    const driversDir = path.join(__dirname, '..', 'drivers', 'sdk3');
    if (fs.existsSync(driversDir)) {
      return fs.readdirSync(driversDir).filter(item => 
        fs.statSync(path.join(driversDir, item)).isDirectory()
      ).length;
    }
  } catch (error) {
    console.log('Error counting drivers:', error.message);
  }
  return 'N/A';
}

function getClusterCount() {
  try {
    const clustersFile = path.join(__dirname, '..', 'ref', 'zigbee-matrix.json');
    if (fs.existsSync(clustersFile)) {
      const data = JSON.parse(fs.readFileSync(clustersFile, 'utf8'));
      return Object.keys(data.clusters || {}).length;
    }
  } catch (error) {
    console.log('Error counting clusters:', error.message);
  }
  return 'N/A';
}

function main() {
  try {
    console.log('üîÑ Generating changelog...');
    
    const changelogContent = generateChangelog();
    const changelogPath = path.join(__dirname, '..', 'CHANGELOG.md');
    
    fs.writeFileSync(changelogPath, changelogContent);
    console.log(`‚úÖ Changelog generated: ${changelogPath}`);
    
    console.log('üéâ Changelog generation completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error generating changelog:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { generateChangelog };
console.log('Changelog updater ready');
