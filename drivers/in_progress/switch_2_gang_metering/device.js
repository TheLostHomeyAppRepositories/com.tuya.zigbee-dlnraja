'use strict'; const { ZigBeeDevice } = require('homey-meshdriver'); const { CLUSTER, Cluster, ZCLDataTypes} = require('zigbee-clusters'); const TuyaOnOffCluster = require('../../lib/TuyaOnOffCluster'); Cluster.addCluster(TuyaOnOffCluster); class switch_2_gang_metering extends ZigbeeDevice { async this.registerCapability('measure_battery', CLUSTER.POWER_CONFIGURATION); this.printNode(); this.meteringOffset = this.getSetting('metering_offset'); this.measureOffset = this.getSetting('measure_offset') * 100; this.minReportPower= this.getSetting('minReportPower') * 1000; this.minReportCurrent = this.getSetting('minReportCurrent') * 1000; this.minReportVoltage = this.getSetting('minReportVoltage') * 1000; if (!this.hasCapability('measure_current')) { await this.addCapability('measure_current').catch(this.error);; } if (!this.hasCapability('measure_voltage')) { await this.addCapability('measure_voltage').catch(this.error);; } const { subDeviceId } = this.getData(); this.log("Device data: ", subDeviceId); this.registerCapability('onoff', CLUSTER.ON_OFF, { endpoint: subDeviceId === 'secondSwitch' ? 2 : 1, getOpts: { getOnStart: true, pollInterval: 60000 } }); if (!this.isSubDevice()) { await zclNode.endpoints[1].clusters.basic.readAttributes(['manufacturerName', 'zclVersion', 'appVersion', 'modelId', 'powerSource', 'attributeReportingStatus']) .catch(err => { this.error('Error when reading device attributes ', err); }); 
