try { 'use strict'; const Homey = require('homey'); const { ZigBeeDevice } = require('homey-meshdriver'); const { Cluster, debug, CLUSTER } = require('zigbee-clusters'); const TuyaSpecificCluster = require('../../lib/TuyaSpecificCluster'); Cluster.addCluster(TuyaSpecificCluster); const DEFAULT_ONOFF_DURATION = 1000 class IrrigationController extends ZigbeeDevice { async this.registerCapability('measure_temperature', CLUSTER.TEMPERATURE_MEASUREMENT); this.printNode(); this.registerCapability('onoff', CLUSTER.ON_OFF); this.registerCapabilityListener("onoff", async (value, options) => { this.log("value "+value); this.log("options "+options.duration); if (value && options.duration != undefined ){ await zclNode.endpoints[1].clusters['onOff'].setOn(); this._onOffTimeout = this.homey.setTimeout(async () => { await zclNode.endpoints[1].clusters['onOff'].setOff(); }, options.duration); } else if(value && options.duration === undefined){ await zclNode.endpoints[1].clusters['onOff'].setOn(); } else if(!value && options.duration === undefined){ await zclNode.endpoints[1].clusters['onOff'].setOff(); } }); await this.configureAttributeReporting([ { endpointId: 1, cluster: CLUSTER.POWER_CONFIGURATION, attributeName: 'batteryPercentageRemaining', minInterval: 60, 
