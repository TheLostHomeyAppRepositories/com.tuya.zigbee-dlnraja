'use strict';

const FlowV3 = require('../../HomeyAPIV3/ManagerFlow/Flow');

class Flow extends FlowV3 {
  static transformGet(item) {
    item = super.transformGet(item);

    if (item.trigger) {
      item.trigger.id = `${item.trigger.uri}:${item.trigger.id}`;
      delete item.trigger.uri;
    }

    if (Array.isArray(item.conditions)) {
      item.conditions.forEach((card) => {
        card.id = `${card.uri}:${card.id}`;
        delete card.uri;
      });
    }

    if (Array.isArray(item.actions)) {
      item.actions.forEach((card) => {
        card.id = `${card.uri}:${card.id}`;
        delete card.uri;
      });
    }

    delete item.broken;

    return item;
  }

  static transformSet(item) {
    const nextItem = {
      ...item,
    };

    if (nextItem.trigger) {
      nextItem.trigger = {
        ...nextItem.trigger,
        uri: nextItem.trigger.id.split(':', 3).join(':'),
        id: nextItem.trigger.id.split(':').slice(3).join(':'),
      };
    }

    if (Array.isArray(nextItem.conditions)) {
      nextItem.conditions = nextItem.conditions.map((card) => ({
        ...card,
        uri: card.id.split(':', 3).join(':'),
        id: card.id.split(':').slice(3).join(':'),
      }));
    }

    if (Array.isArray(nextItem.actions)) {
      nextItem.actions = nextItem.actions.map((card) => ({
        ...card,
        uri: card.id.split(':', 3).join(':'),
        id: card.id.split(':').slice(3).join(':'),
      }));
    }

    return nextItem;
  }
}

module.exports = Flow;
