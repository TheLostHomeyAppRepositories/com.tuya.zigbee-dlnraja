# Fix Terminal Stability - Correction des probl√®mes de terminal
# √âvite les blocages et les demandes d'appui sur Entr√©e

Write-Host "üîß CORRECTION DE LA STABILIT√â DU TERMINAL" -ForegroundColor Green
Write-Host "==========================================" -ForegroundColor Green

# Configuration pour √©viter les blocages
$Host.UI.RawUI.WindowTitle = "Tuya Repair - Terminal Stable"
$ErrorActionPreference = "Continue"
$ProgressPreference = "SilentlyContinue"

# D√©sactivation des prompts interactifs
$ConfirmPreference = "None"
$WhatIfPreference = $false

# Configuration PowerShell pour √©viter les blocages
if (Get-Module PSReadLine -ErrorAction SilentlyContinue) {
    Set-PSReadLineOption -EditMode Windows
    Set-PSReadLineOption -PredictionSource None
    Set-PSReadLineOption -PredictionViewStyle ListView
}

Write-Host "‚úÖ Configuration terminal appliqu√©e" -ForegroundColor Green

# Fonction pour ex√©cuter des commandes sans blocage
function Invoke-SafeCommand {
    param(
        [string]$Command,
        [string]$Description = ""
    )
    
    Write-Host "üîÑ Ex√©cution: $Description" -ForegroundColor Cyan
    
    try {
        # Ex√©cution avec timeout pour √©viter les blocages
        $job = Start-Job -ScriptBlock { 
            param($cmd)
            Invoke-Expression $cmd
        } -ArgumentList $Command
        
        # Attendre avec timeout
        Wait-Job $job -Timeout 30 | Out-Null
        
        if ($job.State -eq "Running") {
            Stop-Job $job
            Write-Host "‚è∞ Timeout atteint pour: $Description" -ForegroundColor Yellow
        } else {
            $result = Receive-Job $job
            Write-Host "‚úÖ Succ√®s: $Description" -ForegroundColor Green
            return $result
        }
    }
    catch {
        Write-Host "‚ùå Erreur: $Description - $($_.Exception.Message)" -ForegroundColor Red
    }
    finally {
        if ($job) {
            Remove-Job $job -Force -ErrorAction SilentlyContinue
        }
    }
}

# Fonction pour traiter les fichiers sans blocage
function Process-FilesNonBlocking {
    param($Path, $Pattern = "*")
    
    Write-Host "üìÅ Traitement non-bloquant: $Path" -ForegroundColor Yellow
    
    try {
        Get-ChildItem -Path $Path -Filter $Pattern -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "  üìÑ $($_.Name)" -ForegroundColor Gray
        }
    }
    catch {
        Write-Host "‚ö†Ô∏è Erreur d'acc√®s: $Path" -ForegroundColor Yellow
    }
}

# Configuration pour les commandes longues
Write-Host "‚öôÔ∏è Configuration des commandes longues..." -ForegroundColor Yellow

# Test de stabilit√©
Write-Host "üß™ Test de stabilit√© du terminal..." -ForegroundColor Yellow

# Ex√©cution de commandes de test
Invoke-SafeCommand -Command "Get-Date" -Description "Test de date"
Invoke-SafeCommand -Command "Get-Location" -Description "Test de localisation"
Invoke-SafeCommand -Command "Get-ChildItem -Path . -Name | Select-Object -First 5" -Description "Test de listing"

Write-Host "‚úÖ Tests de stabilit√© termin√©s" -ForegroundColor Green

# Configuration finale
Write-Host "üéØ Configuration finale appliqu√©e:" -ForegroundColor Green
Write-Host "  - Timeout automatique: 30 secondes" -ForegroundColor Cyan
Write-Host "  - Gestion d'erreurs: Continue" -ForegroundColor Cyan
Write-Host "  - Prompts d√©sactiv√©s" -ForegroundColor Cyan
Write-Host "  - PSReadLine optimis√©" -ForegroundColor Cyan

Write-Host "üöÄ Terminal pr√™t pour les op√©rations YOLO!" -ForegroundColor Green 