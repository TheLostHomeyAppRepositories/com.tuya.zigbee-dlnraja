# Test des Workflows Améliorés - Tuya Zigbee Project
Write-Host "Test des Workflows Améliorés - Tuya Zigbee Project" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Green

# Récupérer tous les workflows
$Workflows = Get-ChildItem -Path ".github/workflows" -Filter "*.yml"

Write-Host "Test de $($Workflows.Count) workflows améliorés..." -ForegroundColor Cyan

$TestResults = @()
$ValidCount = 0
$InvalidCount = 0

foreach ($Workflow in $Workflows) {
    Write-Host "Testing $($Workflow.Name)..." -ForegroundColor Yellow
    
    $Content = Get-Content $Workflow.FullName -Raw -ErrorAction SilentlyContinue
    $TestResult = @{
        Name = $Workflow.Name
        Size = $Workflow.Length
        Tests = @()
        Status = "Unknown"
    }
    
    # Test 1: Vérifier la structure de base
    if ($Content -match "on:" -and $Content -match "jobs:") {
        $TestResult.Tests += "Structure de base: PASS"
    } else {
        $TestResult.Tests += "Structure de base: FAIL"
        $TestResult.Status = "Invalid"
    }
    
    # Test 2: Vérifier les permissions
    if ($Content -match "permissions:") {
        $TestResult.Tests += "Permissions: PASS"
    } else {
        $TestResult.Tests += "Permissions: FAIL"
    }
    
    # Test 3: Vérifier les timeouts
    if ($Content -match "timeout-minutes:") {
        $TestResult.Tests += "Timeouts: PASS"
    } else {
        $TestResult.Tests += "Timeouts: FAIL"
    }
    
    # Test 4: Vérifier les variables d'environnement
    if ($Content -match "env:") {
        $TestResult.Tests += "Variables d'environnement: PASS"
    } else {
        $TestResult.Tests += "Variables d'environnement: FAIL"
    }
    
    # Test 5: Vérifier les caches
    if ($Content -match "actions/cache") {
        $TestResult.Tests += "Caches: PASS"
    } else {
        $TestResult.Tests += "Caches: FAIL"
    }
    
    # Test 6: Vérifier les validations
    if ($Content -match "validate|test|check") {
        $TestResult.Tests += "Validations: PASS"
    } else {
        $TestResult.Tests += "Validations: FAIL"
    }
    
    # Test 7: Vérifier la documentation
    if ($Content -match "description:" -or $Content -match "##") {
        $TestResult.Tests += "Documentation: PASS"
    } else {
        $TestResult.Tests += "Documentation: FAIL"
    }
    
    # Déterminer le statut final
    $PassCount = ($TestResult.Tests | Where-Object { $_ -match "PASS" }).Count
    $TotalTests = $TestResult.Tests.Count
    
    if ($PassCount -eq $TotalTests) {
        $TestResult.Status = "Valid"
        $ValidCount++
        Write-Host "  SUCCESS: All tests passed" -ForegroundColor Green
    } else {
        $TestResult.Status = "Invalid"
        $InvalidCount++
        Write-Host "  WARNING: $($TotalTests - $PassCount) tests failed" -ForegroundColor Yellow
    }
    
    $TestResults += $TestResult
}

# Générer le rapport de test
$ReportDate = Get-Date -Format "yyyyMMdd"
$ReportContent = @"
# Rapport de Test des Workflows Améliorés - Tuya Zigbee Project

**Date:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
**Generated by:** Test des Workflows Améliorés Script

## Résumé des Tests

- **Total Workflows:** $($Workflows.Count)
- **Workflows Valides:** $ValidCount
- **Workflows Invalides:** $InvalidCount
- **Taux de Réussite:** $([math]::Round(($ValidCount / $Workflows.Count) * 100, 1))%

## Tests Effectués

1. **Structure de base** - Vérification de la syntaxe YAML
2. **Permissions** - Contrôle des permissions de sécurité
3. **Timeouts** - Vérification des timeouts de contrôle
4. **Variables d'environnement** - Contrôle des variables
5. **Caches** - Vérification des caches de performance
6. **Validations** - Contrôle des étapes de validation
7. **Documentation** - Vérification de la documentation

## Résultats Détaillés

"@

foreach ($Result in $TestResults) {
    $ReportContent += @"

### $($Result.Name)
- **Status:** $($Result.Status)
- **Size:** $($Result.Size) bytes
- **Tests:**
$($Result.Tests | ForEach-Object { "  - $_" })

"@
}

$ReportContent += @"

## Statistiques des Tests

| Test | Passés | Échoués | Taux de Réussite |
|------|--------|---------|------------------|
| Structure de base | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Structure de base: PASS" }).Count) | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Structure de base: FAIL" }).Count) | $([math]::Round((($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Structure de base: PASS" }).Count / $Workflows.Count) * 100, 1))% |
| Permissions | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Permissions: PASS" }).Count) | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Permissions: FAIL" }).Count) | $([math]::Round((($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Permissions: PASS" }).Count / $Workflows.Count) * 100, 1))% |
| Timeouts | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Timeouts: PASS" }).Count) | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Timeouts: FAIL" }).Count) | $([math]::Round((($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Timeouts: PASS" }).Count / $Workflows.Count) * 100, 1))% |
| Variables d'environnement | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Variables d'environnement: PASS" }).Count) | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Variables d'environnement: FAIL" }).Count) | $([math]::Round((($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Variables d'environnement: PASS" }).Count / $Workflows.Count) * 100, 1))% |
| Caches | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Caches: PASS" }).Count) | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Caches: FAIL" }).Count) | $([math]::Round((($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Caches: PASS" }).Count / $Workflows.Count) * 100, 1))% |
| Validations | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Validations: PASS" }).Count) | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Validations: FAIL" }).Count) | $([math]::Round((($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Validations: PASS" }).Count / $Workflows.Count) * 100, 1))% |
| Documentation | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Documentation: PASS" }).Count) | $(($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Documentation: FAIL" }).Count) | $([math]::Round((($TestResults | ForEach-Object { $_.Tests } | Where-Object { $_ -match "Documentation: PASS" }).Count / $Workflows.Count) * 100, 1))% |

## Recommandations

1. **Workflows valides:** Prêts pour la production
2. **Workflows invalides:** Nécessitent une révision manuelle
3. **Tests échoués:** Corriger les problèmes identifiés
4. **Monitoring:** Surveiller les performances en production

---
*Rapport généré automatiquement par le script Test des Workflows Améliorés*
"@

if (!(Test-Path "rapports")) {
    New-Item -ItemType Directory -Path "rapports" -Force
}

Set-Content -Path "rapports/WORKFLOW_TEST_REPORT_$ReportDate.md" -Value $ReportContent -Encoding UTF8

Write-Host "`nTests terminés!" -ForegroundColor Green
Write-Host "Rapport: rapports/WORKFLOW_TEST_REPORT_$ReportDate.md" -ForegroundColor Cyan

Write-Host "`nRésumé des tests:" -ForegroundColor Yellow
Write-Host "  Workflows testés: $($Workflows.Count)" -ForegroundColor White
Write-Host "  Valides: $ValidCount" -ForegroundColor Green
Write-Host "  Invalides: $InvalidCount" -ForegroundColor Red
Write-Host "  Taux de réussite: $([math]::Round(($ValidCount / $Workflows.Count) * 100, 1))%" -ForegroundColor Cyan 