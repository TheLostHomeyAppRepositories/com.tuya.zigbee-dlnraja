#!/usr/bin/env node

/**
 * üìä QUICK STATUS CHECK - BRIEF "B√âTON"
 * 
 * V√©rification rapide de l'√©tat du processus silencieux
 * Sans interf√©rer avec le processus en cours
 */

const SilentBackgroundProcessor = require('./silent-background-processor');

class QuickStatusCheck {
    constructor() {
        this.statusFile = '.tmp_silent_processing/silent-status.json';
        this.logFile = '.tmp_silent_processing/silent-processing.log';
    }

    async run() {
        try {
            console.log('üìä QUICK STATUS CHECK - BRIEF "B√âTON"');
            console.log('=' .repeat(50));
            console.log('üîç V√©rification rapide de l\'√©tat...\n');

            // V√©rifier le statut
            await this.checkStatus();
            
            // Afficher un r√©sum√© rapide
            await this.showQuickSummary();

        } catch (error) {
            console.error('‚ùå Erreur lors de la v√©rification:', error);
        }
    }

    async checkStatus() {
        try {
            const status = SilentBackgroundProcessor.getStatusFromFile();
            
            if (status) {
                console.log('üìä STATUT DU PROCESSUS SILENCIEUX');
                console.log('-' .repeat(40));
                console.log(`üïê Derni√®re mise √† jour: ${status.lastUpdate}`);
                console.log(`üìä Total ZIPs: ${status.stats.totalZips}`);
                console.log(`‚úÖ Extrait: ${status.stats.extracted}`);
                console.log(`‚ùå √âchou√©: ${status.stats.failed}`);
                console.log(`üîÑ En cours: ${status.stats.inProgress}`);
                console.log(`üîß Enrichissement: ${status.stats.enrichmentSteps}`);

                if (status.stats.totalZips > 0) {
                    const progress = ((status.stats.extracted + status.stats.failed) / status.stats.totalZips * 100).toFixed(1);
                    console.log(`üìà Progression: ${progress}%`);
                }

                if (status.processes.length > 0) {
                    console.log('\nüìã PROCESSUS ACTIFS:');
                    for (const process of status.processes) {
                        const statusIcon = process.status === 'completed' ? '‚úÖ' : 
                                          process.status === 'running' ? 'üîÑ' : 
                                          process.status === 'failed' ? '‚ùå' : '‚è∏Ô∏è';
                        const duration = process.duration || 0;
                        console.log(`   ${statusIcon} ${process.name}: ${process.status} (${duration}s)`);
                    }
                }

            } else {
                console.log('‚ö†Ô∏è Aucun processus silencieux en cours');
                console.log('üöÄ Utilisez "node scripts/silent-controller.js" pour d√©marrer');
            }

        } catch (error) {
            console.log(`‚ùå Erreur v√©rification statut: ${error.message}`);
        }
    }

    async showQuickSummary() {
        try {
            const logs = SilentBackgroundProcessor.getLogs();
            
            if (logs) {
                const lines = logs.split('\n').filter(line => line.trim());
                const recentLines = lines.slice(-5);
                
                if (recentLines.length > 0) {
                    console.log('\nüìã DERNI√àRES ACTIVIT√âS:');
                    console.log('-' .repeat(40));
                    
                    for (const line of recentLines) {
                        if (line.trim()) {
                            console.log(`   ${line}`);
                        }
                    }
                }
            }

        } catch (error) {
            console.log(`‚ö†Ô∏è Impossible de r√©cup√©rer les logs: ${error.message}`);
        }
    }

    // M√©thode statique pour utilisation externe
    static getQuickStatus() {
        try {
            const status = SilentBackgroundProcessor.getStatusFromFile();
            const logs = SilentBackgroundProcessor.getLogs();
            
            return {
                status: status,
                recentLogs: logs ? logs.split('\n').slice(-3) : [],
                timestamp: new Date().toISOString()
            };
        } catch (error) {
            return {
                error: error.message,
                timestamp: new Date().toISOString()
            };
        }
    }
}

if (require.main === module) {
    const checker = new QuickStatusCheck();
    checker.run().catch(console.error);
}

module.exports = QuickStatusCheck;
