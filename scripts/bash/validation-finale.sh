#!/bin/bash# VALIDATION FINALE - Tuya Zigbee Project# Script de validation finale du projet (Bash version)# Couleurs pour l'affichageRED='\033[0;31m'GREEN='\033[0;32m'YELLOW='\033[1;33m'CYAN='\033[0;36m'WHITE='\033[1;37m'NC='\033[0m' # No Color# VariablesVALIDATION_REPORT="VALIDATION-FINALE-$(date +%Y%m%d-%H%M%S).md"TOTAL_TESTS=0PASSED_TESTS=0FAILED_TESTS=0echo -e "${CYAN}VALIDATION FINALE DU PROJET${NC}"echo "============================="# Fonction pour ajouter au rapportadd_to_report() {    echo "$1" >> "$VALIDATION_REPORT"}# Fonction pour tester un √©l√©menttest_item() {    local test_name="$1"    local test_command="$2"    local success_message="$3"    local failure_message="$4"        TOTAL_TESTS=$((TOTAL_TESTS + 1))        if eval "$test_command" > /dev/null 2>&1; then        echo -e "${GREEN}‚úÖ $test_name${NC}"        add_to_report "- ‚úÖ $test_name"        PASSED_TESTS=$((PASSED_TESTS + 1))        return 0    else        echo -e "${RED}‚ùå $test_name${NC}"        add_to_report "- ‚ùå $test_name"        FAILED_TESTS=$((FAILED_TESTS + 1))        return 1    fi}# Initialiser le rapportcat > "$VALIDATION_REPORT" << EOF# VALIDATION FINALE - Tuya Zigbee Project## üß™ TESTS DE VALIDATIONEOF# 1) Validation de la structure du projetecho -e "${YELLOW}1. VALIDATION DE LA STRUCTURE${NC}"echo "==============================="test_item "Repository Git initialis√©" "[ -d '.git' ]" "Repository Git valide" "Repository Git manquant"test_item "Fichier app.js pr√©sent" "[ -f 'app.js' ]" "app.js trouv√©" "app.js manquant"test_item "Fichier app.json pr√©sent" "[ -f 'app.json' ]" "app.json trouv√©" "app.json manquant"test_item "Fichier package.json pr√©sent" "[ -f 'package.json' ]" "package.json trouv√©" "package.json manquant"test_item "Fichier README.md pr√©sent" "[ -f 'README.md' ]" "README.md trouv√©" "README.md manquant"test_item "Fichier .gitignore pr√©sent" "[ -f '.gitignore' ]" ".gitignore trouv√©" ".gitignore manquant"# 2) Validation des scriptsecho -e "${YELLOW}2. VALIDATION DES SCRIPTS${NC}"echo "========================="test_item "Script update-readme.sh pr√©sent" "[ -f 'scripts/update-readme.sh' ]" "update-readme.sh trouv√©" "update-readme.sh manquant"test_item "Script cleanup-repo.sh pr√©sent" "[ -f 'scripts/cleanup-repo.sh' ]" "cleanup-repo.sh trouv√©" "cleanup-repo.sh manquant"test_item "Script sync-drivers.sh pr√©sent" "[ -f 'scripts/sync-drivers.sh' ]" "sync-drivers.sh trouv√©" "sync-drivers.sh manquant"test_item "Script setup-auto-readme.sh pr√©sent" "[ -f 'scripts/setup-auto-readme.sh' ]" "setup-auto-readme.sh trouv√©" "setup-auto-readme.sh manquant"test_item "Script diagnostic-complet.sh pr√©sent" "[ -f 'scripts/diagnostic-complet.sh' ]" "diagnostic-complet.sh trouv√©" "diagnostic-complet.sh manquant"# 3) Validation des scripts ex√©cutablesecho -e "${YELLOW}3. VALIDATION DES SCRIPTS EX√âCUTABLES${NC}"echo "====================================="test_item "update-readme.sh ex√©cutable" "[ -x 'scripts/update-readme.sh' ]" "update-readme.sh ex√©cutable" "update-readme.sh non ex√©cutable"test_item "cleanup-repo.sh ex√©cutable" "[ -x 'scripts/cleanup-repo.sh' ]" "cleanup-repo.sh ex√©cutable" "cleanup-repo.sh non ex√©cutable"test_item "sync-drivers.sh ex√©cutable" "[ -x 'scripts/sync-drivers.sh' ]" "sync-drivers.sh ex√©cutable" "sync-drivers.sh non ex√©cutable"test_item "setup-auto-readme.sh ex√©cutable" "[ -x 'scripts/setup-auto-readme.sh' ]" "setup-auto-readme.sh ex√©cutable" "setup-auto-readme.sh non ex√©cutable"test_item "diagnostic-complet.sh ex√©cutable" "[ -x 'scripts/diagnostic-complet.sh' ]" "diagnostic-complet.sh ex√©cutable" "diagnostic-complet.sh non ex√©cutable"# 4) Validation des dossiersecho -e "${YELLOW}4. VALIDATION DES DOSSIERS${NC}"echo "========================="test_item "Dossier drivers pr√©sent" "[ -d 'drivers' ]" "Dossier drivers trouv√©" "Dossier drivers manquant"test_item "Dossier scripts pr√©sent" "[ -d 'scripts' ]" "Dossier scripts trouv√©" "Dossier scripts manquant"test_item "Dossier locales pr√©sent" "[ -d 'locales' ]" "Dossier locales trouv√©" "Dossier locales manquant"test_item "Dossier assets pr√©sent" "[ -d 'assets' ]" "Dossier assets trouv√©" "Dossier assets manquant"test_item "Dossier dashboard pr√©sent" "[ -d 'dashboard' ]" "Dossier dashboard trouv√©" "Dossier dashboard manquant"# 5) Validation des workflowsecho -e "${YELLOW}5. VALIDATION DES WORKFLOWS${NC}"echo "==============================="test_item "Dossier workflows pr√©sent" "[ -d '.github/workflows' ]" "Dossier workflows trouv√©" "Dossier workflows manquant"test_item "Workflow cleanup pr√©sent" "[ -f '.github/workflows/cleanup.yml' ]" "Workflow cleanup trouv√©" "Workflow cleanup manquant"test_item "Workflow cleanup mensuel pr√©sent" "[ -f '.github/workflows/cleanup-monthly.yml' ]" "Workflow cleanup mensuel trouv√©" "Workflow cleanup mensuel manquant"# 6) Validation des fichiers de configurationecho -e "${YELLOW}6. VALIDATION DES FICHIERS DE CONFIGURATION${NC}"echo "============================================="test_item "Fichier app.json valide JSON" "jq empty app.json" "app.json JSON valide" "app.json JSON invalide"test_item "Fichier package.json valide JSON" "jq empty package.json" "package.json JSON valide" "package.json JSON invalide"# 7) Validation des m√©triquesecho -e "${YELLOW}7. VALIDATION DES M√âTRIQUES${NC}"echo "============================="DRIVER_COUNT=$(find drivers -name "*.js" -type f 2>/dev/null | wc -l)LANGUAGE_FILES=$(find locales -name "*.json" -o -name "*.md" 2>/dev/null | wc -l)WORKFLOW_COUNT=$(find .github/workflows -name "*.yml" -o -name "*.yaml" 2>/dev/null | wc -l)test_item "Au moins 1 driver pr√©sent" "[ $DRIVER_COUNT -gt 0 ]" "Drivers trouv√©s: $DRIVER_COUNT" "Aucun driver trouv√©"test_item "Au moins 1 fichier de langue pr√©sent" "[ $LANGUAGE_FILES -gt 0 ]" "Fichiers de langue trouv√©s: $LANGUAGE_FILES" "Aucun fichier de langue trouv√©"test_item "Au moins 1 workflow pr√©sent" "[ $WORKFLOW_COUNT -gt 0 ]" "Workflows trouv√©s: $WORKFLOW_COUNT" "Aucun workflow trouv√©"# 8) Validation des hooks Gitecho -e "${YELLOW}8. VALIDATION DES HOOKS GIT${NC}"echo "==============================="test_item "Hook pre-commit pr√©sent" "[ -f '.git/hooks/pre-commit' ]" "Hook pre-commit trouv√©" "Hook pre-commit manquant"test_item "Hook pre-commit ex√©cutable" "[ -x '.git/hooks/pre-commit' ]" "Hook pre-commit ex√©cutable" "Hook pre-commit non ex√©cutable"# 9) Test de fonctionnement des scriptsecho -e "${YELLOW}9. TEST DE FONCTIONNEMENT DES SCRIPTS${NC}"echo "========================================="test_item "Script update-readme.sh fonctionnel" "bash scripts/update-readme.sh --dry-run > /dev/null 2>&1" "update-readme.sh fonctionnel" "update-readme.sh d√©faillant"test_item "Script cleanup-repo.sh fonctionnel" "bash scripts/cleanup-repo.sh --dry-run > /dev/null 2>&1" "cleanup-repo.sh fonctionnel" "cleanup-repo.sh d√©faillant"test_item "Script diagnostic-complet.sh fonctionnel" "bash scripts/diagnostic-complet.sh > /dev/null 2>&1" "diagnostic-complet.sh fonctionnel" "diagnostic-complet.sh d√©faillant"# 10) Validation de la taille du repoecho -e "${YELLOW}10. VALIDATION DE LA TAILLE DU REPO${NC}"echo "====================================="REPO_SIZE=$(du -sm . | cut -f1)test_item "Taille du repo inf√©rieure √† 1000 MB" "[ $REPO_SIZE -lt 1000 ]" "Taille repo OK: ${REPO_SIZE} MB" "Taille repo trop importante: ${REPO_SIZE} MB"# Calcul des r√©sultatsecho -e "${YELLOW}11. CALCUL DES R√âSULTATS${NC}"echo "============================="if [ $TOTAL_TESTS -gt 0 ]; then    SUCCESS_RATE=$((PASSED_TESTS * 100 / TOTAL_TESTS))else    SUCCESS_RATE=0fiecho -e "${WHITE}Tests totaux: $TOTAL_TESTS${NC}"echo -e "${GREEN}Tests r√©ussis: $PASSED_TESTS${NC}"echo -e "${RED}Tests √©chou√©s: $FAILED_TESTS${NC}"echo -e "${WHITE}Taux de r√©ussite: ${SUCCESS_RATE}%${NC}"# G√©n√©ration du rapport finaladd_to_report ""add_to_report "## üìä R√âSULTATS FINAUX"add_to_report ""add_to_report "### Statistiques"add_to_report "- Tests totaux: $TOTAL_TESTS"add_to_report "- Tests r√©ussis: $PASSED_TESTS"add_to_report "- Tests √©chou√©s: $FAILED_TESTS"add_to_report "- Taux de r√©ussite: ${SUCCESS_RATE}%"add_to_report ""add_to_report "### M√©triques"add_to_report "- Drivers support√©s: $DRIVER_COUNT"add_to_report "- Langues support√©es: $LANGUAGE_FILES"add_to_report "- Workflows: $WORKFLOW_COUNT"add_to_report "- Taille repo: ${REPO_SIZE} MB"add_to_report ""add_to_report "### Timestamp"add_to_report "- Date: $(date +%Y-%m-%d)"add_to_report "- Heure: $(date +%H:%M:%S) UTC"add_to_report "- Script: validation-finale.sh"add_to_report ""add_to_report "---"add_to_report ""add_to_report "*Rapport g√©n√©r√© automatiquement - Mode YOLO Intelligent*"# Conclusionecho -e "${GREEN}üìä RAPPORT FINAL${NC}"echo "==============="echo -e "${WHITE}Rapport g√©n√©r√©: $VALIDATION_REPORT${NC}"echo -e "${WHITE}Taux de r√©ussite: ${SUCCESS_RATE}%${NC}"echo -e "${WHITE}Timestamp: $(date +%Y-%m-%d %H:%M:%S UTC)${NC}"if [ $SUCCESS_RATE -ge 90 ]; then    echo -e "${GREEN}‚úÖ VALIDATION EXCELLENTE${NC}"    echo -e "${CYAN}üéâ Projet pr√™t pour la production${NC}"elif [ $SUCCESS_RATE -ge 80 ]; then    echo -e "${GREEN}‚úÖ VALIDATION BONNE${NC}"    echo -e "${CYAN}‚ö†Ô∏è Quelques am√©liorations recommand√©es${NC}"elif [ $SUCCESS_RATE -ge 70 ]; then    echo -e "${YELLOW}‚ö†Ô∏è VALIDATION MOYENNE${NC}"    echo -e "${CYAN}üîß Am√©liorations n√©cessaires${NC}"else    echo -e "${RED}‚ùå VALIDATION INSUFFISANTE${NC}"    echo -e "${CYAN}üö® Corrections critiques requises${NC}"fiecho -e "${GREEN}VALIDATION FINALE TERMIN√âE !${NC}"echo -e "${CYAN}Mode YOLO Intelligent activ√© - Optimisation continue${NC}" 
