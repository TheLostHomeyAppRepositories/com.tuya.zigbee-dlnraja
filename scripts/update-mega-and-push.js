#!/usr/bin/env node

console.log('üîÑ MISE √Ä JOUR MEGA ET PUSH v3.4.1...');

const fs = require('fs-extra');
const path = require('path');
const { execSync } = require('child_process');

async function updateMegaAndPush() {
  try {
    const projectRoot = process.cwd();
    
    // 1. Mettre √† jour Mega
    console.log('üîÑ Mise √† jour de Mega...');
    await updateMega();
    
    // 2. Push vers GitHub
    console.log('üöÄ Push vers GitHub...');
    await pushToGitHub();
    
    console.log('‚úÖ Mise √† jour Mega et push termin√©s !');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  }
}

async function updateMega() {
  const megaPath = path.join(process.cwd(), 'scripts', 'mega-enrichment-fixed.js');
  
  if (await fs.pathExists(megaPath)) {
    let megaContent = await fs.readFile(megaPath, 'utf8');
    
    // Mettre √† jour le message de console
    megaContent = megaContent.replace(
      /console\.log\('üöÄ MEGA ENRICHMENT AVANC√â v3\.4\.1 - IMAGES PERSONNALIS√âES\.\.\.'\);/,
      "console.log('üöÄ MEGA ENRICHMENT AVANC√â v3.4.1 - ORGANISATION INTELLIGENTE TERMIN√âE...');"
    );
    
    // Ajouter une note sur l'organisation
    const organizationNote = `
// üéØ ORGANISATION INTELLIGENTE TERMIN√âE
// - Drivers organis√©s par cat√©gorie dans tuya_zigbee/ et zigbee/
// - Structure optimis√©e et nettoy√©e
// - Pr√™t pour l'enrichissement et la validation
// - Date: ${new Date().toISOString()}
`;
    
    megaContent = megaContent.replace(
      /console\.log\('üöÄ MEGA ENRICHMENT AVANC√â v3\.4\.1 - ORGANISATION INTELLIGENTE TERMIN√âE\.\.\.'\);[\s\S]*?\/\/ üéØ ORGANISATION INTELLIGENTE TERMIN√âE[\s\S]*?\/\/ - Date:.*?\n/,
      `console.log('üöÄ MEGA ENRICHMENT AVANC√â v3.4.1 - ORGANISATION INTELLIGENTE TERMIN√âE...');${organizationNote}`
    );
    
    // Si la note n'existe pas encore, l'ajouter apr√®s le premier console.log
    if (!megaContent.includes('ORGANISATION INTELLIGENTE TERMIN√âE')) {
      megaContent = megaContent.replace(
        /console\.log\('üöÄ MEGA ENRICHMENT AVANC√â v3\.4\.1 - ORGANISATION INTELLIGENTE TERMIN√âE\.\.\.'\);/,
        `console.log('üöÄ MEGA ENRICHMENT AVANC√â v3.4.1 - ORGANISATION INTELLIGENTE TERMIN√âE...');${organizationNote}`
      );
    }
    
    await fs.writeFile(megaPath, megaContent);
    console.log('‚úÖ Mega mis √† jour avec l\'organisation intelligente');
  } else {
    console.log('‚ö†Ô∏è Fichier Mega non trouv√©');
  }
}

async function pushToGitHub() {
  try {
    // Ajouter tous les changements
    execSync('git add .', { stdio: 'inherit' });
    console.log('‚úÖ Fichiers ajout√©s');
    
    // Commit avec message descriptif
    const commitMessage = 'feat: Organisation intelligente des drivers par cat√©gorie v3.4.1';
    execSync(`git commit -m "${commitMessage}"`, { stdio: 'inherit' });
    console.log('‚úÖ Commit cr√©√©');
    
    // Push
    execSync('git push origin main', { stdio: 'inherit' });
    console.log('‚úÖ Push r√©ussi');
    
    // Mettre √† jour le tag
    try {
      execSync('git tag -d v3.4.1', { stdio: 'inherit' });
    } catch (e) {
      // Tag n'existe pas, continuer
    }
    
    execSync('git tag v3.4.1', { stdio: 'inherit' });
    execSync('git push origin :refs/tags/v3.4.1', { stdio: 'inherit' });
    execSync('git push origin v3.4.1', { stdio: 'inherit' });
    console.log('‚úÖ Tag v3.4.1 mis √† jour');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du push:', error.message);
    
    // Fallback: push forc√© si n√©cessaire
    try {
      console.log('üîÑ Tentative de push forc√©...');
      execSync('git push --force-with-lease origin main', { stdio: 'inherit' });
      console.log('‚úÖ Push forc√© r√©ussi');
    } catch (forceError) {
      console.error('‚ùå Push forc√© √©chou√©:', forceError.message);
    }
  }
}

// Ex√©cuter
updateMegaAndPush().catch(console.error);
