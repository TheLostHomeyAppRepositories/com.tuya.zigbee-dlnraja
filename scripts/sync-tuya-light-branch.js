// MEGA ULTIMATE ENHANCED - 2025-08-07T16:33:44.828Z
// Script am√©lior√© avec liens corrig√©s et fonctionnalit√©s √©tendues

#!/usr/bin/env node
/**
 * Script de synchronisation de la branche tuya-light
 * Synchronise les drivers tuya depuis master vers tuya-light
 * Version: 1.0.12-20250729-1700
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Configuration
const CONFIG = {
    version: '1.0.12-20250729-1700',
    logFile: './logs/sync-tuya-light.log',
    syncDataFile: './data/tuya-light-sync.json'
};

// Fonction de logging
function log(message, level = 'INFO') {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] [${level}] ${message}`;
    console.log(logMessage);
    
    const logDir = path.dirname(CONFIG.logFile);
    if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir, { recursive: true });
    }
    fs.appendFileSync(CONFIG.logFile, logMessage + '\n');
}

// Fonction pour v√©rifier l'√©tat actuel
function checkCurrentState() {
    log('üîç === V√âRIFICATION DE L\'√âTAT ACTUEL ===');
    
    try {
        // V√©rifier la branche actuelle
        const currentBranch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
        log(`Branche actuelle: ${currentBranch}`);
        
        // V√©rifier s'il y a des changements non commit√©s
        const status = execSync('git status --porcelain', { encoding: 'utf8' });
        if (status.trim()) {
            log('‚ö†Ô∏è Changements non commit√©s d√©tect√©s', 'WARN');
            log(status);
        } else {
            log('Repository propre');
        }
        
        // Lister les branches disponibles
        const branches = execSync('git branch -a', { encoding: 'utf8' });
        log('Branches disponibles:');
        log(branches);
        
        return { currentBranch, hasChanges: !!status.trim() };
        
    } catch (error) {
        log(`‚ùå Erreur v√©rification √©tat: ${error.message}`, 'ERROR');
        throw error;
    }
}

// Fonction pour cr√©er/v√©rifier la branche tuya-light
function ensureTuyaLightBranch() {
    log('üåø === V√âRIFICATION/CREATION BRANCHE TUYA-LIGHT ===');
    
    try {
        // V√©rifier si la branche existe
        const branches = execSync('git branch -a', { encoding: 'utf8' });
        
        if (branches.includes('tuya-light')) {
            log('Branche tuya-light existe d√©j√†');
            
            // Basculer vers tuya-light
            execSync('git checkout tuya-light');
            log('Basculement vers tuya-light');
            
        } else {
            log('Cr√©ation de la branche tuya-light');
            execSync('git checkout -b tuya-light');
            log('Branche tuya-light cr√©√©e et bascul√©e');
        }
        
        return true;
        
    } catch (error) {
        log(`‚ùå Erreur cr√©ation branche: ${error.message}`, 'ERROR');
        throw error;
    }
}

// Fonction pour synchroniser les drivers tuya
function syncTuyaDrivers() {
    log('üîÑ === SYNCHRONISATION DES DRIVERS TUYA ===');
    
    try {
        // Retourner √† master pour r√©cup√©rer les drivers
        execSync('git checkout master');
        log('Retour √† master');
        
        // V√©rifier que le dossier tuya existe
        if (!fs.existsSync('./drivers/tuya')) {
            log('‚ùå Dossier tuya non trouv√© dans master', 'ERROR');
            throw new Error('Dossier tuya manquant dans master');
        }
        
        // Basculer vers tuya-light
        execSync('git checkout tuya-light');
        log('Basculement vers tuya-light');
        
        // Supprimer l'ancien dossier tuya s'il existe
        if (fs.existsSync('./drivers/tuya')) {
            fs.rmSync('./drivers/tuya', { recursive: true, force: true });
            log('Ancien dossier tuya supprim√©');
        }
        
        // Copier le dossier tuya depuis master
        execSync('git checkout master -- drivers/tuya');
        log('Dossier tuya copi√© depuis master');
        
        // Compter les drivers tuya
        const tuyaDrivers = execSync('Get-ChildItem -Path ".\\drivers\\tuya" -Recurse -Include "driver.compose.json" | Measure-Object | Select-Object Count', { shell: 'powershell', encoding: 'utf8' });
        const count = parseInt(tuyaDrivers.match(/\d+/)[0]);
        log(`‚úÖ Drivers tuya synchronis√©s: ${count}`);
        
        return { syncedDrivers: count };
        
    } catch (error) {
        log(`‚ùå Erreur synchronisation: ${error.message}`, 'ERROR');
        throw error;
    }
}

// Fonction pour commiter les changements
function commitChanges() {
    log('üíæ === COMMIT DES CHANGEMENTS ===');
    
    try {
        // Ajouter tous les changements
        execSync('git add drivers/tuya/');
        log('Changements ajout√©s au staging');
        
        // Commiter avec un message descriptif
        const commitMessage = `üîÑ Sync tuya drivers from master - ${new Date().toISOString()}`;
        execSync(`git commit -m "${commitMessage}"`);
        log('Changements commit√©s');
        
        return true;
        
    } catch (error) {
        log(`‚ùå Erreur commit: ${error.message}`, 'ERROR');
        return false;
    }
}

// Fonction pour pousser vers le remote
function pushToRemote() {
    log('üöÄ === PUSH VERS REMOTE ===');
    
    try {
        execSync('git push origin tuya-light');
        log('‚úÖ Push vers tuya-light r√©ussi');
        return true;
        
    } catch (error) {
        log(`‚ùå Erreur push: ${error.message}`, 'ERROR');
        return false;
    }
}

// Fonction pour retourner √† master
function returnToMaster() {
    log('üè† === RETOUR √Ä MASTER ===');
    
    try {
        execSync('git checkout master');
        log('Retour √† master');
        return true;
        
    } catch (error) {
        log(`‚ùå Erreur retour master: ${error.message}`, 'ERROR');
        return false;
    }
}

// Fonction pour configurer la synchronisation automatique
function setupAutoSync() {
    log('‚è∞ === CONFIGURATION SYNCHRONISATION AUTOMATIQUE ===');
    
    try {
        // Cr√©er un workflow GitHub Actions pour la synchronisation mensuelle
        const workflowContent = `name: üîÑ Sync tuya-light branch

on:
  schedule:
    - cron: '0 2 1 * *'  # Premier jour de chaque mois √† 2h
  workflow_dispatch:

jobs:
  sync-tuya-light:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üîÑ Sync tuya-light branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Basculer vers tuya-light
          git checkout tuya-light
          
          # R√©cup√©rer les drivers tuya depuis master
          git checkout master -- drivers/tuya/
          
          # Commiter les changements
          git add drivers/tuya/
          git commit -m "üîÑ Auto-sync tuya drivers from master" || echo "No changes to commit"
          
          # Pousser vers remote
          git push origin tuya-light
          
      - name: üìä Report
        run: |
          echo "## üîÑ Tuya-light Sync Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Synchronisation termin√©e" >> $GITHUB_STEP_SUMMARY
          echo "- Drivers tuya synchronis√©s depuis master" >> $GITHUB_STEP_SUMMARY
          echo "- Branche tuya-light mise √† jour" >> $GITHUB_STEP_SUMMARY
          echo "- Synchronisation automatique configur√©e" >> $GITHUB_STEP_SUMMARY
`;
        
        const workflowDir = './.github/workflows';
        if (!fs.existsSync(workflowDir)) {
            fs.mkdirSync(workflowDir, { recursive: true });
        }
        
        fs.writeFileSync('./.github/workflows/sync-tuya-light.yml', workflowContent);
        log('‚úÖ Workflow GitHub Actions cr√©√©');
        
        return true;
        
    } catch (error) {
        log(`‚ùå Erreur configuration auto-sync: ${error.message}`, 'ERROR');
        return false;
    }
}

// Fonction principale
function syncTuyaLightBranch() {
    log('üöÄ === SYNCHRONISATION BRANCHE TUYA-LIGHT ===');
    
    const startTime = Date.now();
    const results = {
        timestamp: new Date().toISOString(),
        version: CONFIG.version,
        steps: {},
        summary: {}
    };
    
    try {
        // 1. V√©rifier l'√©tat actuel
        results.steps.checkState = checkCurrentState();
        
        // 2. Cr√©er/v√©rifier la branche tuya-light
        results.steps.ensureBranch = ensureTuyaLightBranch();
        
        // 3. Synchroniser les drivers tuya
        results.steps.syncDrivers = syncTuyaDrivers();
        
        // 4. Commiter les changements
        results.steps.commit = commitChanges();
        
        // 5. Pousser vers le remote
        results.steps.push = pushToRemote();
        
        // 6. Retourner √† master
        results.steps.returnMaster = returnToMaster();
        
        // 7. Configurer la synchronisation automatique
        results.steps.autoSync = setupAutoSync();
        
        // Calculer le r√©sum√©
        const duration = Date.now() - startTime;
        results.summary = {
            success: true,
            duration,
            syncedDrivers: results.steps.syncDrivers?.syncedDrivers || 0,
            autoSyncConfigured: results.steps.autoSync
        };
        
        // Rapport final
        log('üìä === RAPPORT FINAL SYNCHRONISATION ===');
        log(`Drivers synchronis√©s: ${results.summary.syncedDrivers}`);
        log(`Dur√©e: ${duration}ms`);
        log(`Auto-sync configur√©: ${results.summary.autoSyncConfigured ? '‚úÖ' : '‚ùå'}`);
        
        // Sauvegarder les r√©sultats
        const dataDir = path.dirname(CONFIG.syncDataFile);
        if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
        }
        fs.writeFileSync(CONFIG.syncDataFile, JSON.stringify(results, null, 2));
        
        log('‚úÖ Synchronisation tuya-light termin√©e avec succ√®s');
        
        return results;
        
    } catch (error) {
        log(`‚ùå ERREUR CRITIQUE SYNCHRONISATION: ${error.message}`, 'ERROR');
        results.summary = {
            success: false,
            error: error.message,
            duration: Date.now() - startTime
        };
        
        // Sauvegarder m√™me en cas d'erreur
        const dataDir = path.dirname(CONFIG.syncDataFile);
        if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
        }
        fs.writeFileSync(CONFIG.syncDataFile, JSON.stringify(results, null, 2));
        
        throw error;
    }
}

// Ex√©cution si appel√© directement
if (require.main === module) {
    try {
        const results = syncTuyaLightBranch();
        log('‚úÖ Synchronisation termin√©e avec succ√®s', 'SUCCESS');
    } catch (error) {
        log(`‚ùå Synchronisation √©chou√©e: ${error.message}`, 'ERROR');
        process.exit(1);
    }
}

module.exports = { syncTuyaLightBranch }; 