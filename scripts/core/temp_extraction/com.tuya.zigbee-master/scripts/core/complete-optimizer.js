#!/usr/bin/env node
'use strict';

// core/complete-optimizer.js// Optimiseur complet qui comprend tout l'historique et optimise tout// Analyse depuis le plus ancien √©l√©ment jusqu'au plus r√©centconst fs = require('fs');const path = require('path');const { execSync } = require('child_process');class CompleteOptimizer { constructor() { this.projectName = 'com.tuya.zigbee'; this.sdkVersion = 3; this.history = { backups: [], logs: [], versions: [], changes: [] }; this.optimizationTargets = { performance: true, structure: true, drivers: true, documentation: true, validation: true, compatibility: true }; } // Analyser tout l'historique du projet async analyzeCompleteHistory() { log('üîç === ANALYSE COMPL√àTE DE L\'HISTORIQUE ==='); // Analyser les backups await this.analyzeBackups(); // Analyser les logs await this.analyzeLogs(); // Analyser les versions Git await this.analyzeGitHistory(); // Analyser les changements r√©cents await this.analyzeRecentChanges(); return { success: true, history: this.history }; } // Analyser les backups async analyzeBackups() { log('üì¶ Analyse des backups...'); const backupDir = 'backup'; if (fs.existsSync(backupDir)) { const backups = fs.readdirSync(backupDir); for (const backup of backups) { const backupPath = path.join(backupDir, backup); const stat = fs.statSync(backupPath); this.history.backups.push({ name: backup, path: backupPath, date: stat.mtime, size: stat.size, type: 'backup' }); } } log(`üì¶ ${this.history.backups.length} backups analys√©s`); } // Analyser les logs async analyzeLogs() { log('üìã Analyse des logs...'); const logsDir = 'logs'; if (fs.existsSync(logsDir)) { const logFiles = fs.readdirSync(logsDir); for (const logFile of logFiles) { const logPath = path.join(logsDir, logFile); const stat = fs.statSync(logPath); try { const content = fs.readFileSync(logPath, 'utf8'); const lines = content.split('\n'); this.history.logs.push({ name: logFile, path: logPath, date: stat.mtime, size: stat.size, lines: lines.length, content: content.substring(0, 1000), // Premiers 1000 caract√®res type: 'log' }); } catch (error) { log(`‚ùå Erreur lecture log ${logFile}: ${error.message}`, 'ERROR'); } } } log(`üìã ${this.history.logs.length} logs analys√©s`); } // Analyser l'historique Git async analyzeGitHistory() { log('üîß Analyse de l\'historique Git...'); if (fs.existsSync('.git')) { try { // Obtenir les commits r√©cents const gitLog = execSync('git log --oneline -10', { encoding: 'utf8' }); const commits = gitLog.split('\n').filter(line => line.trim()); for (const commit of commits) { const parts = commit.split(' '); const hash = parts[0]; const message = parts.slice(1).join(' '); this.history.versions.push({ hash: hash, message: message, type: 'git_commit' }); } // Obtenir les tags const gitTags = execSync('git tag', { encoding: 'utf8' }); const tags = gitTags.split('\n').filter(tag => tag.trim()); for (const tag of tags) { this.history.versions.push({ tag: tag, type: 'git_tag' }); } } catch (error) { log(`‚ùå Erreur Git: ${error.message}`, 'ERROR'); } } log(`üîß ${this.history.versions.length} versions analys√©es`); } // Analyser les changements r√©cents async analyzeRecentChanges() { log('üìù Analyse des changements r√©cents...'); const currentFiles = this.scanCurrentFiles(); const recentChanges = []; // Analyser les fichiers modifi√©s r√©cemment for (const file of currentFiles) { const stat = fs.statSync(file); const hoursAgo = (Date.now() - stat.mtime.getTime()) / (1000 * 60 * 60); if (hoursAgo < 24) { // Fichiers modifi√©s dans les 24h recentChanges.push({ file: file, date: stat.mtime, size: stat.size, hoursAgo: hoursAgo, type: 'recent_change' }); } } this.history.changes = recentChanges; log(`üìù ${recentChanges.length} changements r√©cents d√©tect√©s`); } // Scanner tous les fichiers actuels scanCurrentFiles() { const files = []; const scanDir = (dir) => { if (!fs.existsSync(dir)) return; const items = fs.readdirSync(dir); for (const item of items) { const fullPath = path.join(dir, item); const stat = fs.statSync(fullPath); if (stat.isDirectory()) { scanDir(fullPath); } else { files.push(fullPath); } } }; scanDir('.'); return files; } // Optimiser compl√®tement le projet async optimizeCompleteProject() { log('üöÄ === OPTIMISATION COMPL√àTE DU PROJET ==='); // 1. Optimisation de la structure const structureOptimization = await this.optimizeStructure(); // 2. Optimisation des drivers const driversOptimization = await this.optimizeDrivers(); // 3. Optimisation des performances const performanceOptimization = await this.optimizePerformance(); // 4. Optimisation de la documentation const documentationOptimization = await this.optimizeDocumentation(); // 5. Optimisation de la validation const validationOptimization = await this.optimizeValidation(); // 6. Optimisation de la compatibilit√© const compatibilityOptimization = await this.optimizeCompatibility(); return { success: structureOptimization.success && driversOptimization.success && performanceOptimization.success && documentationOptimization.success && validationOptimization.success && compatibilityOptimization.success, optimizations: { structure: structureOptimization, drivers: driversOptimization, performance: performanceOptimization, documentation: documentationOptimization, validation: validationOptimization, compatibility: compatibilityOptimization } }; } // Optimiser la structure async optimizeStructure() { log('üèóÔ∏è Optimisation de la structure...'); const optimizations = []; // Nettoyer les fichiers temporaires const tempFiles = this.findTempFiles(); for (const file of tempFiles) { try { fs.unlinkSync(file); optimizations.push(`Supprim√©: ${file}`); } catch (error) { log(`‚ùå Erreur suppression ${file}: ${error.message}`, 'ERROR'); } } // Organiser les dossiers const directories = ['drivers/tuya', 'drivers/zigbee', 'scripts/core', 'docs/specs']; for (const dir of directories) { if (!fs.existsSync(dir)) { fs.mkdirSync(dir, { recursive: true }); optimizations.push(`Cr√©√©: ${dir}`); } } // Supprimer les dossiers obsol√®tes const obsoleteDirs = ['drivers/fusion', 'drivers/legacy', 'drivers/deprecated']; for (const dir of obsoleteDirs) { if (fs.existsSync(dir)) { try { fs.rmSync(dir, { recursive: true, force: true }); optimizations.push(`Supprim√©: ${dir}`); } catch (error) { log(`‚ùå Erreur suppression ${dir}: ${error.message}`, 'ERROR'); } } } return { success: true, optimizations: optimizations }; } // Trouver les fichiers temporaires findTempFiles() { const tempFiles = []; const tempPatterns = ['.tmp', '.temp', '.cache', '.bak', '.old', '.backup']; const scanDir = (dir) => { if (!fs.existsSync(dir)) return; const items = fs.readdirSync(dir); for (const item of items) { const fullPath = path.join(dir, item); const stat = fs.statSync(fullPath); if (stat.isDirectory()) { scanDir(fullPath); } else { for (const pattern of tempPatterns) { if (item.includes(pattern)) { tempFiles.push(fullPath); break; } } } } }; scanDir('.'); return tempFiles; } // Optimiser les drivers async optimizeDrivers() { log('üîß Optimisation des drivers...'); const driverManager = require('./driver-manager.js').DriverManager; const manager = new driverManager(); // Scanner tous les drivers const drivers = manager.scanDrivers(); // Fusionner les doublons const mergedDrivers = manager.mergeDuplicateDrivers(); // Corriger les drivers invalides let fixedCount = 0; for (const driver of drivers) { if (!driver.valid) { const fixResult = manager.fixDriver(driver.path); if (fixResult.success) { fixedCount++; } } } // Nettoyer la structure const cleanupResult = manager.cleanStructure(); return { success: true, total: drivers.length, merged: mergedDrivers.length, fixed: fixedCount, cleanup: cleanupResult }; } // Optimiser les performances async optimizePerformance() { log('‚ö° Optimisation des performances...'); const optimizations = []; // Optimiser les scripts const scriptsDir = 'scripts'; if (fs.existsSync(scriptsDir)) { const scripts = fs.readdirSync(scriptsDir); for (const script of scripts) { if (script.endsWith('.js')) { const scriptPath = path.join(scriptsDir, script); const content = fs.readFileSync(scriptPath, 'utf8'); // Optimisations de base let optimized = content; // Supprimer les console.log en production if (process.env.NODE_ENV === 'production') { optimized = optimized.replace(/console\.log\([^)]*\);?/g, ''); } // Optimiser les imports optimized = optimized.replace(/require\(['"]([^'"]+)['"]\)/g, (match, module) => { return \require('${module}')`; }); if (optimized !== content) { fs.writeFileSync(scriptPath, optimized); optimizations.push(`Optimis√©: ${script}`); } } } } return { success: true, optimizations: optimizations }; } // Optimiser la documentation async optimizeDocumentation() { log('üìö Optimisation de la documentation...'); const documentationGenerator = require('./documentation-generator.js').DocumentationGenerator; const generator = new documentationGenerator(); // G√©n√©rer toute la documentation const result = generator.generateAllDocumentation(); return { success: result.success, documentation: result }; } // Optimiser la validation async optimizeValidation() { log('‚úÖ Optimisation de la validation...'); const validator = require('./validator.js').HomeyValidator; const homeyValidator = new validator(); // Validation compl√®te const validation = await homeyValidator.validateAll(); return { success: validation.errors.length === 0, validation: validation }; } // Optimiser la compatibilit√© async optimizeCompatibility() { log('üîó Optimisation de la compatibilit√©...'); const optimizations = []; // V√©rifier la compatibilit√© SDK3 const appJson = JSON.parse(fs.readFileSync('app.json', 'utf8')); if (appJson.sdk !== 3) { appJson.sdk = 3; fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2)); optimizations.push('SDK mis √† jour vers 3'); } // V√©rifier les permissions if (!appJson.permissions || !Array.isArray(appJson.permissions)) { appJson.permissions = ['homey:manager:api', 'homey:app:com.tuya.zigbee']; fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2)); optimizations.push('Permissions ajout√©es'); } // V√©rifier la compatibilit√© Homey if (!appJson.compatibility || !appJson.compatibility.includes('5.0.0')) { appJson.compatibility = '>=5.0.0'; fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2)); optimizations.push('Compatibilit√© mise √† jour'); } return { success: true, optimizations: optimizations }; } // G√©n√©rer un rapport complet d'optimisation generateOptimizationReport() { log('üìä G√©n√©ration du rapport d\'optimisation...'); const report = { timestamp: new Date().toISOString(), project: this.projectName, sdk: this.sdkVersion, history: { backups: this.history.backups.length, logs: this.history.logs.length, versions: this.history.versions.length, changes: this.history.changes.length }, optimizations: this.optimizationTargets, summary: { totalOptimizations: 0, successRate: 0, recommendations: [] } }; // Sauvegarder le rapport const reportsDir = 'reports'; if (!fs.existsSync(reportsDir)) { fs.mkdirSync(reportsDir, { recursive: true }); } const reportFile = path.join(reportsDir, `complete-optimization-report-${Date.now()}.json`); fs.writeFileSync(reportFile, JSON.stringify(report, null, 2)); return { success: true, report: report, savedTo: reportFile }; }}// Fonction utilitaire pour les logsfunction log(message, level = 'INFO') { const timestamp = new Date().toISOString(); const emoji = { 'INFO': '‚ÑπÔ∏è', 'SUCCESS': '‚úÖ', 'WARN': '‚ö†Ô∏è', 'ERROR': '‚ùå' }; console.log(`[${timestamp}] [${level}] ${emoji[level] || ''} ${message}`);}// Export pour utilisation dans d'autres scriptsmodule.exports = { CompleteOptimizer, log };// Ex√©cution directe si appel√© directementif (require.main === module) { const optimizer = new CompleteOptimizer(); optimizer.analyzeCompleteHistory().then(historyResult => { log('üîç Analyse historique termin√©e', 'SUCCESS'); return optimizer.optimizeCompleteProject(); }).then(optimizationResult => { log('üöÄ Optimisation termin√©e', 'SUCCESS'); return optimizer.generateOptimizationReport(); }).then(reportResult => { log('üìä Rapport g√©n√©r√©', 'SUCCESS'); log(`üéâ Optimisation compl√®te termin√©e avec succ√®s!`, 'SUCCESS'); process.exit(0); }).catch(error => { log(`‚ùå Erreur fatale: ${error.message}`, 'ERROR'); process.exit(1); });} 