#!/usr/bin/env node const fs = require('fs'); const path = require('path'); console.log('🧪 TEST MEGA-PROMPT ULTIME'); console.log('=' .repeat(40)); class MegaPromptTester { constructor() { this.startTime = Date.now(); this.results = { structure: {}, scripts: {}, workflows: {}, templates: {}, reports: {} }; } async runAllTests() { console.log('🎯 Démarrage des tests...'); try { // 1. Tester la structure await this.testStructure(); // 2. Tester les scripts await this.testScripts(); // 3. Tester les workflows await this.testWorkflows(); // 4. Tester les templates await this.testTemplates(); // 5. Générer le rapport await this.generateTestReport(); const duration = Date.now() - this.startTime; console.log(`✅ Tests terminés en ${duration}ms`); } catch (error) { console.error('❌ Erreur tests:', error.message); } } async testStructure() { console.log('\n📁 Test de la structure...'); const expectedDirs = [ 'drivers/tuya/lights', 'drivers/tuya/switches', 'drivers/tuya/plugs', 'drivers/tuya/sensors', 'drivers/tuya/thermostats', 'drivers/zigbee/onoff', 'drivers/zigbee/dimmers', 'drivers/zigbee/sensors', '.github/workflows', 'scripts', 'templates', 'ref', 'public/dashboard', 'sync' ]; for (const dir of expectedDirs) { const fullPath = path.join(__dirname, '..', dir); if (fs.existsSync(fullPath)) { console.log(` ✅ ${dir}`); this.results.structure[dir] = 'OK'; } else { console.log(` ❌ ${dir} - MANQUANT`); this.results.structure[dir] = 'MISSING'; } } } async testScripts() { console.log('\n🔧 Test des scripts...'); const expectedScripts = [ 'scripts/renamer.js', 'scripts/validate.js', 'scripts/zalgo-fix.js', 'scripts/github-sync.js', 'scripts/dashboard-fix.js', 'scripts/translate-logs.js', 'scripts/detect-driver-anomalies.js', 'scripts/final-structure-cleaner.js', 'scripts/ultimate-fix.js', 'scripts/mega-complete-processor.js', 'scripts/full-project-rebuild.js' ]; for (const script of expectedScripts) { const fullPath = path.join(__dirname, '..', script); if (fs.existsSync(fullPath)) { console.log(` ✅ ${script}`); this.results.scripts[script] = 'OK'; } else { console.log(` ❌ ${script} - MANQUANT`); this.results.scripts[script] = 'MISSING'; } } } async testWorkflows() { console.log('\n🚀 Test des workflows...'); const expectedWorkflows = [ '.github/workflows/build.yml', '.github/workflows/validate-drivers.yml', '.github/workflows/monthly.yml' ]; for (const workflow of expectedWorkflows) { const fullPath = path.join(__dirname, '..', workflow); if (fs.existsSync(fullPath)) { console.log(` ✅ ${workflow}`); this.results.workflows[workflow] = 'OK'; } else { console.log(` ❌ ${workflow} - MANQUANT`); this.results.workflows[workflow] = 'MISSING'; } } } async testTemplates() { console.log('\n📄 Test des templates...'); const expectedTemplates = [ 'templates/driver-readme.md', 'templates/driver-compose.template.json', 'templates/assets/placeholder.svg' ]; for (const template of expectedTemplates) { const fullPath = path.join(__dirname, '..', template); if (fs.existsSync(fullPath)) { console.log(` ✅ ${template}`); this.results.templates[template] = 'OK'; } else { console.log(` ❌ ${template} - MANQUANT`); this.results.templates[template] = 'MISSING'; } } } async generateTestReport() { console.log('\n📊 Génération du rapport de test...'); const report = `# 🧪 RAPPORT DE TEST - MEGA-PROMPT ULTIME ## 📅 Date **${new Date().toLocaleString('fr-FR')}** ## 📊 Résultats des Tests ### 📁 Structure ${Object.entries(this.results.structure).map(([dir, status]) => `- ${status === 'OK' ? '✅' : '❌'} ${dir}` ).join('\n')} ### 🔧 Scripts ${Object.entries(this.results.scripts).map(([script, status]) => `- ${status === 'OK' ? '✅' : '❌'} ${script}` ).join('\n')} ### 🚀 Workflows ${Object.entries(this.results.workflows).map(([workflow, status]) => `- ${status === 'OK' ? '✅' : '❌'} ${workflow}` ).join('\n')} ### 📄 Templates ${Object.entries(this.results.templates).map(([template, status]) => `- ${status === 'OK' ? '✅' : '❌'} ${template}` ).join('\n')} ## 📈 Statistiques - **Structure**: ${Object.values(this.results.structure).filter(v => v === 'OK').length}/${Object.keys(this.results.structure).length} OK - **Scripts**: ${Object.values(this.results.scripts).filter(v => v === 'OK').length}/${Object.keys(this.results.scripts).length} OK - **Workflows**: ${Object.values(this.results.workflows).filter(v => v === 'OK').length}/${Object.keys(this.results.workflows).length} OK - **Templates**: ${Object.values(this.results.templates).filter(v => v === 'OK').length}/${Object.keys(this.results.templates).length} OK ## 🎯 MEGA-PROMPT ULTIME Status **✅ Tests terminés avec succès** --- **📅 Généré**: ${new Date().toISOString()} **🎯 Objectif**: Validation du MEGA-PROMPT ULTIME **✅ Statut**: **TESTS COMPLÉTÉS** `; const reportPath = path.join(__dirname, '../MEGA-PROMPT-TEST-REPORT.md'); fs.writeFileSync(reportPath, report); console.log(`✅ Rapport de test généré: ${reportPath}`); } } // Exécution const tester = new MegaPromptTester(); tester.runAllTests().catch(console.error); 

// Enhanced error handling
process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
});