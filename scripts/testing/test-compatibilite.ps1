
---
**üìÖ Version**: 1.0.0
**üìÖ Date**: 2025-07-26
**üïê Heure**: 16:49:40
**üéØ Objectif**: Int√©gration locale Tuya Zigbee
**üöÄ Mode**: Priorit√© locale
**üõ°Ô∏è S√©curit√©**: Mode local complet
---
# TEST COMPATIBILIT√â - Tuya Zigbee Project
# Script de test de compatibilit√© entre PowerShell et Bash (PowerShell version)

# Variables
$PsScripts = @()
$ShScripts = @()
$MissingSh = @()
$MissingPs = @()

Write-Host "TEST DE COMPATIBILIT√â POWERSHELL/BASH" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host ""

# 1) Analyse des scripts PowerShell
Write-Host "1. ANALYSE DES SCRIPTS POWERSHELL" -ForegroundColor Yellow
Write-Host "=====================================" -ForegroundColor Yellow
Write-Host ""

$psScripts = Get-ChildItem scripts/*.ps1 -ErrorAction SilentlyContinue
foreach ($script in $psScripts) {
    $PsScripts += $script.Name
    Write-Host "‚úÖ $($script.FullName)" -ForegroundColor Green
}
Write-Host ""

# 2) Analyse des scripts Bash
Write-Host "2. ANALYSE DES SCRIPTS BASH" -ForegroundColor Yellow
Write-Host "===============================" -ForegroundColor Yellow
Write-Host ""

$shScripts = Get-ChildItem scripts/*.sh -ErrorAction SilentlyContinue
foreach ($script in $shScripts) {
    $ShScripts += $script.Name
    Write-Host "‚úÖ $($script.FullName)" -ForegroundColor Green
}
Write-Host ""

# 3) Comparaison et identification des manquants
Write-Host "3. COMPARAISON DES SCRIPTS" -ForegroundColor Yellow
Write-Host "=============================" -ForegroundColor Yellow
Write-Host ""

# Scripts PowerShell avec leurs √©quivalents Bash
$PsToSh = @{
    "update-readme.ps1" = "update-readme.sh"
    "cleanup-repo.ps1" = "cleanup-repo.sh"
    "sync-drivers.ps1" = "sync-drivers.sh"
    "setup-auto-readme.ps1" = "setup-auto-readme.sh"
    "diagnostic-complet.ps1" = "diagnostic-complet.sh"
    "validation-finale.ps1" = "validation-finale.sh"
    "test-compatibilite.ps1" = "test-compatibilite.sh"
    "run-universal.ps1" = "run-universal.sh"
}

# V√©rifier les √©quivalents manquants
foreach ($psScript in $PsToSh.Keys) {
    $shEquivalent = $PsToSh[$psScript]
    
    if (Test-Path "scripts/$psScript") {
        if (Test-Path "scripts/$shEquivalent") {
            Write-Host "‚úÖ $psScript ‚Üî $shEquivalent" -ForegroundColor Green
        }
        else {
            Write-Host "‚ùå $psScript ‚Üí $shEquivalent (manquant)" -ForegroundColor Red
            $MissingSh += $shEquivalent
        }
    }
    else {
        if (Test-Path "scripts/$shEquivalent") {
            Write-Host "‚ö†Ô∏è $psScript (manquant) ‚Üî $shEquivalent" -ForegroundColor Yellow
            $MissingPs += $psScript
        }
    }
}
Write-Host ""

# 4) Test de fonctionnement des scripts PowerShell
Write-Host "4. TEST DE FONCTIONNEMENT POWERSHELL" -ForegroundColor Yellow
Write-Host "=====================================" -ForegroundColor Yellow
Write-Host ""

foreach ($psScript in $psScripts) {
    $scriptName = $psScript.Name
    Write-Host "Test de $scriptName..." -ForegroundColor White
    
    # Test avec --help si disponible
    try {
        $result = & pwsh -File $psScript.FullName --help 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ $scriptName - Aide disponible" -ForegroundColor Green
        }
        else {
            Write-Host "‚ö†Ô∏è $scriptName - Test basique" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "‚ö†Ô∏è $scriptName - Test basique" -ForegroundColor Yellow
    }
    Start-Sleep -Milliseconds 50
}
Write-Host ""

# 5) G√©n√©ration du rapport de compatibilit√©
Write-Host "5. RAPPORT DE COMPATIBILIT√â" -ForegroundColor Yellow
Write-Host "=================================" -ForegroundColor Yellow
Write-Host ""

$ReportFile = "COMPATIBILITE-REPORT-$(Get-Date -Format 'yyyyMMdd-HHmmss').md"

$ReportContent = @"
# RAPPORT DE COMPATIBILIT√â POWERSHELL/BASH

## üìä √âQUIVALENCES DE SCRIPTS

### Scripts PowerShell
"@

foreach ($psScript in $PsScripts) {
    $ReportContent += "`n- $psScript"
}

$ReportContent += @"

### Scripts Bash
"@

foreach ($shScript in $ShScripts) {
    $ReportContent += "`n- $shScript"
}

$ReportContent += @"

### Correspondances
"@

foreach ($psScript in $PsToSh.Keys) {
    $shEquivalent = $PsToSh[$psScript]
    if ((Test-Path "scripts/$psScript") -and (Test-Path "scripts/$shEquivalent")) {
        $ReportContent += "`n- ‚úÖ $psScript ‚Üî $shEquivalent"
    }
    elseif (Test-Path "scripts/$psScript") {
        $ReportContent += "`n- ‚ùå $psScript ‚Üí $shEquivalent (manquant)"
    }
    elseif (Test-Path "scripts/$shEquivalent") {
        $ReportContent += "`n- ‚ö†Ô∏è $psScript (manquant) ‚Üî $shEquivalent"
    }
}

$ReportContent += @"

## üìà STATISTIQUES

- Scripts PowerShell: $($PsScripts.Count)
- Scripts Bash: $($ShScripts.Count)
- √âquivalents manquants Bash: $($MissingSh.Count)
- Scripts PowerShell manquants: $($MissingPs.Count)
"@

$ReportContent += @"

## üéØ RECOMMANDATIONS
"@

if ($MissingSh.Count -eq 0 -and $MissingPs.Count -eq 0) {
    $ReportContent += @"

- ‚úÖ Compatibilit√© parfaite entre PowerShell et Bash
- ‚úÖ Tous les scripts ont leurs √©quivalents
"@
}
else {
    if ($MissingSh.Count -gt 0) {
        $ReportContent += "`n- ‚ùå Cr√©er les √©quivalents Bash manquants:"
        foreach ($missing in $MissingSh) {
            $ReportContent += "`n  - $missing"
        }
    }
    
    if ($MissingPs.Count -gt 0) {
        $ReportContent += "`n- ‚ö†Ô∏è Scripts PowerShell manquants:"
        foreach ($missing in $MissingPs) {
            $ReportContent += "`n  - $missing"
        }
    }
}

$ReportContent += @"

## üìÖ TIMESTAMP

- Date: $(Get-Date -Format 'yyyy-MM-dd')
- Heure: $(Get-Date -Format 'HH:mm:ss') UTC
- Script: test-compatibilite.ps1

---

*Rapport g√©n√©r√© automatiquement - Mode Automatique Intelligent*
"@

$ReportContent | Out-File -FilePath $ReportFile -Encoding UTF8

# 6) R√©sum√© final
Write-Host "üìä R√âSUM√â FINAL" -ForegroundColor Green
Write-Host "===============" -ForegroundColor Green
Write-Host "Scripts PowerShell: $($PsScripts.Count)" -ForegroundColor White
Write-Host "Scripts Bash: $($ShScripts.Count)" -ForegroundColor White
Write-Host "√âquivalents manquants: $($MissingSh.Count)" -ForegroundColor White
Write-Host "Rapport g√©n√©r√©: $ReportFile" -ForegroundColor White
Write-Host ""

if ($MissingSh.Count -eq 0) {
    Write-Host "‚úÖ COMPATIBILIT√â PARFAITE" -ForegroundColor Green
    Write-Host "üéâ Tous les scripts ont leurs √©quivalents" -ForegroundColor Cyan
    Write-Host ""
}
else {
    Write-Host "‚ö†Ô∏è COMPATIBILIT√â PARTIELLE" -ForegroundColor Yellow
    Write-Host "üîß $($MissingSh.Count) √©quivalents Bash manquants" -ForegroundColor Cyan
    Write-Host ""
}

Write-Host "TEST DE COMPATIBILIT√â TERMIN√â !" -ForegroundColor Green
Write-Host "Mode Automatique Intelligent activ√© - Compatibilit√© cross-platform" -ForegroundColor Cyan
Write-Host "" 


