#!/usr/bin/env node
'use strict';

/**
 * üîÑ Script converti automatiquement
 * Original: PS1
 * Converti le: 2025-09-03T20:43:36.290Z
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// üîÑ Script converti automatiquement de PS1 vers JavaScript
// ‚ö†Ô∏è V√©rification manuelle recommand√©e

# Script PowerShell pour g√©n√©rer un rapport d'int√©gration

# Cr√©er le dossier de sortie s'il n'existe pas
$reportDir = Join-Path $PSScriptRoot "reports"
if (-not (fs.existsSync $reportDir)) {
    fs.mkdirSync -ItemType Directory -Path $reportDir | Out-Null
}

# Cr√©er un nom de fichier avec horodatage
$timestamp = new Date() -Format "yyyyMMdd-HHmmss"
$reportPath = Join-Path $reportDir "tuya-integration-report-$timestamp.md"

# Fonction pour obtenir la taille d'un dossier
function Get-DirectorySize {
    param([string]$path)
    
    if (-not (fs.existsSync $path)) { return "0 B" }
    
    $size = (fs.readdirSync -Path $path -Recurse -File | 
             Measure-Object -Property Length -Sum).Sum
    
    if ($size -gt 1GB) { return "{0:N2} GB" -f ($size / 1GB) }
    if ($size -gt 1MB) { return "{0:N2} MB" -f ($size / 1MB) }
    if ($size -gt 1KB) { return "{0:N2} KB" -f ($size / 1KB) }
    return "$size B"
}

# D√©marrer le rapport
$report = @"
# Rapport d'Int√©gration Tuya Zigbee

**Date de g√©n√©ration:** $(new Date() -Format "yyyy-MM-dd HH:mm:ss")

## Structure du Projet

"@

# Analyser la structure du projet
$projectRoot = $PSScriptRoot
$dirs = fs.readdirSync -Path $projectRoot -Directory | 
         // Where-Object equivalent { $_.Name -notin @('node_modules', '.git', 'reports') } |
         // ForEach-Object equivalent {
             $size = Get-DirectorySize -path $_.FullName
             [PSCustomObject]@{
                 Name = $_.Name
                 Size = $size
                 Files = (fs.readdirSync -Path $_.FullName -Recurse -File -ErrorAction SilentlyContinue).Count
             }
         }

# Ajouter la structure au rapport
$report += "`n### Dossiers Principaux`n"
$report += $dirs | Format-Table -Property Name, @{Name="Fichiers";Expression={"$($_.Files)"}}, @{Name="Taille";Expression={"$($_.Size)"}} -AutoSize | Out-String

# Analyser les drivers
$driversPath = Join-Path $projectRoot "drivers"
if (fs.existsSync $driversPath) {
    $drivers = fs.readdirSync -Path $driversPath -Directory
    $driverCount = $drivers.Count
    
    $report += "`n## Analyse des Drivers`n"
    $report += "**Nombre total de drivers:** $driverCount`n"
    
    # Analyser 5 drivers comme √©chantillon
    $sampleDrivers = $drivers | // Select-Object equivalent -First 5
    
    $report += "`n### Exemple de Drivers`n"
    
    foreach ($driver in $sampleDrivers) {
        $driverName = $driver.Name
        $configPath = Join-Path $driver.FullName "driver.compose.json"
        
        $report += "#### $driverName`n"
        
        if (fs.existsSync $configPath) {
            try {
                $config = fs.readFileSync $configPath -Raw | ConvertFrom-Json
                
                $report += "- **ID:** $($config.id)`n"
                $report += "- **Classe:** $($config.class)`n"
                
                # V√©rifier les ic√¥nes
                if ($config.images) {
                    $smallIcon = Join-Path $driver.FullName $config.images.small
                    $largeIcon = Join-Path $driver.FullName $config.images.large
                    
                    $report += "- **Ic√¥nes:**`n"
                    $report += "  - Petite: $($config.images.small) $(if (fs.existsSync $smallIcon) {'‚úÖ'} else {'‚ùå'})`n"
                    $report += "  - Grande: $($config.images.large) $(if (fs.existsSync $largeIcon) {'‚úÖ'} else {'‚ùå'})`n"
                } else {
                    $report += "- **Aucune ic√¥ne configur√©e**`n"
                }
                
                # Afficher les capacit√©s
                if ($config.capabilities -and $config.capabilities.Count -gt 0) {
                    $report += "- **Capacit√©s:** $($config.capabilities -join ', ')`n"
                }
                
                # Afficher les informations Zigbee
                if ($config.zigbee) {
                    $report += "- **Fabricant:** $($config.zigbee.manufacturerName -join ', ')`n"
                    $report += "- **ID Produit:** $($config.zigbee.productId -join ', ')`n"
                }
                
            } catch {
                $report += "- ‚ùå Erreur de lecture du fichier de configuration: $_`n"
            }
        } else {
            $report += "- ‚ùå Fichier de configuration manquant`n"
        }
        
        $report += "`n"
    }
}

# Ajouter un r√©sum√©
$report += @"
## R√©sum√©

- **Dossiers principaux:** $($dirs.Count)
- **Drivers d√©tect√©s:** $driverCount
- **Taille totale du projet:** $(Get-DirectorySize -path $projectRoot)

## Prochaines √âtapes Recommand√©es

1. V√©rifier la configuration des drivers manquants
2. S'assurer que toutes les ic√¥nes sont pr√©sentes et aux bons formats
3. Valider la configuration Zigbee pour chaque appareil
4. Tester les fonctionnalit√©s cl√©s

---
*Rapport g√©n√©r√© automatiquement - Tuya Zigbee Integration*
"@

# Enregistrer le rapport
$report | Out-File -FilePath $reportPath -Encoding utf8

# Afficher le chemin du rapport
console.log "Rapport g√©n√©r√© avec succ√®s: $reportPath" -ForegroundColor Green

# Afficher un aper√ßu du rapport
console.log "`n=== APER√áU DU RAPPORT ===`n" -ForegroundColor Cyan
fs.readFileSync -Path $reportPath -TotalCount 20 | // ForEach-Object equivalent { console.log $_ }
