#!/usr/bin/env node

/**
 * üöÄ COORDINATION FINALE - BRIEF "B√âTON"
 * 
 * Script de coordination finale qui orchestre tous les traitements
 * et lance la fusion intelligente finale
 */

const fs = require('fs-extra');
const path = require('path');

class CoordinationFinale {
    constructor() {
        this.projectRoot = process.cwd();
        this.tmpDir = path.join(this.projectRoot, '.tmp_tuya_zip_work');
        this.fusionDir = path.join(this.projectRoot, '.tmp_tuya_fusion');
        this.status = {
            parallelProcessing: false,
            finalAnalysis: false,
            chatgptProcessing: false,
            intelligentFusion: false,
            integration: false
        };
    }

    async run() {
        try {
            console.log('üöÄ COORDINATION FINALE - BRIEF "B√âTON"');
            console.log('=' .repeat(70));
            console.log('üéØ Coordination de tous les traitements en cours...\n');

            // 1. V√©rification de l'√©tat des traitements
            await this.checkProcessingStatus();
            
            // 2. Attente de la fin des traitements
            await this.waitForProcessingCompletion();
            
            // 3. Lancement de la fusion intelligente
            await this.launchIntelligentFusion();
            
            // 4. Int√©gration finale
            await this.performFinalIntegration();
            
            // 5. Rapport final
            this.generateFinalReport();
            
        } catch (error) {
            console.error('‚ùå Erreur lors de la coordination finale:', error);
        }
    }

    async checkProcessingStatus() {
        console.log('üîç V√©rification de l\'√©tat des traitements...');
        
        // V√©rifier les dossiers temporaires
        if (fs.existsSync(this.tmpDir)) {
            const items = fs.readdirSync(this.tmpDir, { withFileTypes: true });
            console.log(`   üìÅ Dossier temporaire: ${items.length} √©l√©ments`);
            
            for (const item of items) {
                if (item.isDirectory()) {
                    const itemPath = path.join(this.tmpDir, item.name);
                    const subItems = fs.readdirSync(itemPath, { withFileTypes: true });
                    console.log(`      üìÅ ${item.name}: ${subItems.length} sous-√©l√©ments`);
                }
            }
        }
        
        // V√©rifier le dossier de fusion
        if (fs.existsSync(this.fusionDir)) {
            console.log('   ‚úÖ Dossier de fusion pr√™t');
            this.status.intelligentFusion = true;
        }
        
        console.log('');
    }

    async waitForProcessingCompletion() {
        console.log('‚è≥ Attente de la fin des traitements...');
        
        let attempts = 0;
        const maxAttempts = 60; // 60 secondes max
        
        while (attempts < maxAttempts) {
            // V√©rifier si les traitements sont termin√©s
            const isComplete = await this.checkProcessingComplete();
            
            if (isComplete) {
                console.log('   ‚úÖ Tous les traitements sont termin√©s');
                break;
            }
            
            console.log(`   ‚è≥ Attente... (${attempts + 1}/${maxAttempts})`);
            await new Promise(resolve => setTimeout(resolve, 1000));
            attempts++;
        }
        
        if (attempts >= maxAttempts) {
            console.log('   ‚ö†Ô∏è Timeout d\'attente, continuation...');
        }
        
        console.log('');
    }

    async checkProcessingComplete() {
        try {
            // V√©rifier si les dossiers d'extraction sont complets
            if (!fs.existsSync(this.tmpDir)) {
                return false;
            }
            
            const items = fs.readdirSync(this.tmpDir, { withFileTypes: true });
            
            // V√©rifier que chaque dossier extrait a du contenu
            for (const item of items) {
                if (item.isDirectory()) {
                    const itemPath = path.join(this.tmpDir, item.name);
                    const subItems = fs.readdirSync(itemPath, { withFileTypes: true });
                    
                    if (subItems.length === 0) {
                        return false; // Encore en cours d'extraction
                    }
                }
            }
            
            return true;
        } catch (error) {
            return false;
        }
    }

    async launchIntelligentFusion() {
        console.log('üß† Lancement de la fusion intelligente...');
        
        try {
            // Lancer le script de fusion intelligente
            const { execSync } = require('child_process');
            execSync('node scripts/intelligent-tuya-fusion.js', { stdio: 'inherit' });
            
            console.log('   ‚úÖ Fusion intelligente termin√©e');
            this.status.intelligentFusion = true;
            
        } catch (error) {
            console.log(`   ‚ùå Erreur fusion intelligente: ${error.message}`);
        }
        
        console.log('');
    }

    async performFinalIntegration() {
        console.log('üîó Int√©gration finale en cours...');
        
        try {
            // 1. V√©rifier la structure de fusion
            if (fs.existsSync(this.fusionDir)) {
                const fusionItems = fs.readdirSync(this.fusionDir, { withFileTypes: true });
                console.log(`   üìä √âl√©ments de fusion: ${fusionItems.length}`);
                
                // 2. Int√©grer les drivers
                await this.integrateDrivers();
                
                // 3. Int√©grer les assets
                await this.integrateAssets();
                
                // 4. Int√©grer les scripts
                await this.integrateScripts();
                
                console.log('   ‚úÖ Int√©gration finale termin√©e');
                this.status.integration = true;
            }
            
        } catch (error) {
            console.log(`   ‚ùå Erreur int√©gration: ${error.message}`);
        }
        
        console.log('');
    }

    async integrateDrivers() {
        console.log('      üîß Int√©gration des drivers...');
        
        const fusionDriversPath = path.join(this.fusionDir, 'drivers');
        const projectDriversPath = path.join(this.projectRoot, 'drivers');
        
        if (fs.existsSync(fusionDriversPath)) {
            try {
                // Copier les nouveaux drivers
                fs.copySync(fusionDriversPath, projectDriversPath, { overwrite: false });
                console.log('         ‚úÖ Drivers int√©gr√©s');
            } catch (error) {
                console.log(`         ‚ùå Erreur int√©gration drivers: ${error.message}`);
            }
        }
    }

    async integrateAssets() {
        console.log('      üñºÔ∏è Int√©gration des assets...');
        
        const fusionAssetsPath = path.join(this.fusionDir, 'assets');
        const projectAssetsPath = path.join(this.projectRoot, 'assets');
        
        if (fs.existsSync(fusionAssetsPath)) {
            try {
                // Copier les nouveaux assets
                fs.copySync(fusionAssetsPath, projectAssetsPath, { overwrite: false });
                console.log('         ‚úÖ Assets int√©gr√©s');
            } catch (error) {
                console.log(`         ‚ùå Erreur int√©gration assets: ${error.message}`);
            }
        }
    }

    async integrateScripts() {
        console.log('      üìú Int√©gration des scripts...');
        
        const fusionScriptsPath = path.join(this.fusionDir, 'scripts');
        const projectScriptsPath = path.join(this.projectRoot, 'scripts');
        
        if (fs.existsSync(fusionScriptsPath)) {
            try {
                // Copier les nouveaux scripts
                fs.copySync(fusionScriptsPath, projectScriptsPath, { overwrite: false });
                console.log('         ‚úÖ Scripts int√©gr√©s');
            } catch (error) {
                console.log(`         ‚ùå Erreur int√©gration scripts: ${error.message}`);
            }
        }
    }

    generateFinalReport() {
        console.log('üéØ RAPPORT FINAL DE COORDINATION');
        console.log('=' .repeat(70));
        console.log('üìä √âTAT DES TRAITEMENTS:');
        console.log(`   üîÑ Traitement parall√®le: ${this.status.parallelProcessing ? '‚úÖ Termin√©' : '‚è≥ En cours'}`);
        console.log(`   üìÅ Analyse FINAL: ${this.status.finalAnalysis ? '‚úÖ Termin√©' : '‚è≥ En cours'}`);
        console.log(`   ü§ñ Traitement chatgptversion: ${this.status.chatgptProcessing ? '‚úÖ Termin√©' : '‚è≥ En cours'}`);
        console.log(`   üß† Fusion intelligente: ${this.status.intelligentFusion ? '‚úÖ Termin√©' : '‚è≥ En cours'}`);
        console.log(`   üîó Int√©gration finale: ${this.status.integration ? '‚úÖ Termin√©' : '‚è≥ En cours'}`);
        
        console.log('\nüöÄ PROCHAINES √âTAPES:');
        console.log('   1. ‚úÖ Coordination termin√©e');
        console.log('   2. üéØ Validation finale du projet');
        console.log('   3. üéØ Push final avec toutes les am√©liorations');
        console.log('   4. üéØ Test et validation Homey');
        
        console.log('\nüéâ COORDINATION FINALE TERMIN√âE AVEC SUCC√àS !');
        console.log('üèóÔ∏è Projet enrichi et pr√™t pour la validation finale !');
    }
}

if (require.main === module) {
    const coordination = new CoordinationFinale();
    coordination.run().catch(console.error);
}

module.exports = CoordinationFinale;
