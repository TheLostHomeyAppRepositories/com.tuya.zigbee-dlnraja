'use strict';

const fs = require('fs');
const fsp = require('fs/promises');
const path = require('path');

const CONFIG = {
  NEW_VERSION: '3.2.0',
  APP_ID: 'com.tuya.zigbee',
  FILES_TO_UPDATE: ['app.json', 'package.json', 'README.md', 'CHANGELOG.md']
};

function log(message, type = 'info') {
  const timestamp = new Date().toISOString();
  const prefix = type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
  console.log(`[${timestamp}] ${prefix} ${message}`);
}

function echo() {
  console.log('\n');
}

// Mettre √† jour app.json
async function updateAppJson() {
  log('üì± MISE √Ä JOUR DE app.json...');
  
  const appJsonPath = path.join(process.cwd(), 'app.json');
  if (!fs.existsSync(appJsonPath)) {
    throw new Error('app.json non trouv√©');
  }
  
  const appJson = JSON.parse(await fsp.readFile(appJsonPath, 'utf8'));
  
  // Mettre √† jour la version
  appJson.version = CONFIG.NEW_VERSION;
  
  // Mettre √† jour l'ID
  appJson.id = CONFIG.APP_ID;
  
  // Mettre √† jour la compatibilit√©
  appJson.compatibility = ">=6.0.0";
  
  // Mettre √† jour le SDK
  appJson.sdk = 3;
  
  // Sauvegarder
  await fsp.writeFile(appJsonPath, JSON.stringify(appJson, null, 2));
  log('‚úÖ app.json mis √† jour');
}

// Mettre √† jour package.json
async function updatePackageJson() {
  log('üì¶ MISE √Ä JOUR DE package.json...');
  
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  if (!fs.existsSync(packageJsonPath)) {
    throw new Error('package.json non trouv√©');
  }
  
  const packageJson = JSON.parse(await fsp.readFile(packageJsonPath, 'utf8'));
  
  // Mettre √† jour la version
  packageJson.version = CONFIG.NEW_VERSION;
  
  // Mettre √† jour le nom
  packageJson.name = CONFIG.APP_ID;
  
  // Ajouter les scripts mega
  packageJson.scripts = packageJson.scripts || {};
  packageJson.scripts.mega_ultimate = 'node scripts/mega-ultimate-orchestrator.js';
  packageJson.scripts.mega = 'node scripts/mega-ultimate-orchestrator.js';
  packageJson.scripts.enrich = 'node scripts/enrich-from-tmp-sources.js';
  packageJson.scripts.reorganize = 'node scripts/reorganize-drivers-ultimate.js';
  
  // Sauvegarder
  await fsp.writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2));
  log('‚úÖ package.json mis √† jour');
}

// Mettre √† jour README.md
async function updateReadme() {
  log('üìñ MISE √Ä JOUR DE README.md...');
  
  const readmePath = path.join(process.cwd(), 'README.md');
  
  if (!fs.existsSync(readmePath)) {
    await createNewReadme();
    return;
  }
  
  let readmeContent = await fsp.readFile(readmePath, 'utf8');
  
  // Mettre √† jour la version
  readmeContent = readmeContent.replace(
    /Version:\s*\d+\.\d+\.\d+/,
    `Version: ${CONFIG.NEW_VERSION}`
  );
  
  // Mettre √† jour la compatibilit√©
  readmeContent = readmeContent.replace(
    /Compatibility:\s*.*/,
    'Compatibility: Homey >=6.0.0'
  );
  
  // Ajouter la section Test-only si elle n'existe pas
  if (!readmeContent.includes('## Test-only')) {
    const testOnlySection = `

## Test-only

‚ö†Ô∏è **ATTENTION**: Cette application est en mode test uniquement.

- **Fonctionnalit√©s**: Fonctionnalit√©s de base uniquement
- **Support**: Aucun support officiel
- **Utilisation**: √Ä des fins de test et de d√©veloppement uniquement
- **Production**: Ne pas utiliser en production

### Scripts disponibles

\`\`\`bash
# Script principal d'orchestration
npm run mega_ultimate

# Enrichissement depuis les sources .tmp*
npm run enrich

# R√©organisation des drivers
npm run reorganize

# Validation de l'application
npx homey app validate
\`\`\`

### Structure des drivers

Les drivers sont organis√©s selon le sch√©ma: \`vendor-category-model\`

- **vendor**: tuya, aqara, ikea, philips, generic
- **category**: light, plug, sensor, switch, cover, etc.
- **model**: identifiant unique du mod√®le

Exemple: \`tuya-light-ts0501b\`, \`aqara-sensor-motion\`
`;
    
    // Ins√©rer avant la derni√®re section
    const lastSectionIndex = readmeContent.lastIndexOf('##');
    if (lastSectionIndex !== -1) {
      readmeContent = readmeContent.slice(0, lastSectionIndex) + testOnlySection + '\n\n' + readmeContent.slice(lastSectionIndex);
    } else {
      readmeContent += testOnlySection;
    }
  }
  
  // Sauvegarder
  await fsp.writeFile(readmePath, readmeContent);
  log('‚úÖ README.md mis √† jour');
}

// Cr√©er un nouveau README.md
async function createNewReadme() {
  log('üìñ CR√âATION D\'UN NOUVEAU README.md...');
  
  const newReadmeContent = `# Tuya Zigbee - Homey App

Application Homey pour la gestion des appareils Tuya Zigbee.

## Informations

- **Version**: ${CONFIG.NEW_VERSION}
- **App ID**: ${CONFIG.APP_ID}
- **Compatibility**: Homey >=6.0.0
- **SDK**: 3

## Installation

1. Clonez ce repository
2. Installez les d√©pendances: \`npm install\`
3. Validez l'application: \`npx homey app validate\`

## Test-only

‚ö†Ô∏è **ATTENTION**: Cette application est en mode test uniquement.

- **Fonctionnalit√©s**: Fonctionnalit√©s de base uniquement
- **Support**: Aucun support officiel
- **Utilisation**: √Ä des fins de test et de d√©veloppement uniquement
- **Production**: Ne pas utiliser en production

### Scripts disponibles

\`\`\`bash
# Script principal d'orchestration
npm run mega_ultimate

# Enrichissement depuis les sources .tmp*
npm run enrich

# R√©organisation des drivers
npm run reorganize

# Validation de l'application
npx homey app validate
\`\`\`

### Structure des drivers

Les drivers sont organis√©s selon le sch√©ma: \`vendor-category-model\`

- **vendor**: tuya, aqara, ikea, philips, generic
- **category**: light, plug, sensor, switch, cover, etc.
- **model**: identifiant unique du mod√®le

Exemple: \`tuya-light-ts0501b\`, \`aqara-sensor-motion\`

## D√©veloppement

Cette application utilise le SDK Homey v3 et est con√ßue pour √™tre modulaire et extensible.

## Licence

Test-only - Ne pas utiliser en production
`;
  
  const readmePath = path.join(process.cwd(), 'README.md');
  await fsp.writeFile(readmePath, newReadmeContent);
  log('‚úÖ Nouveau README.md cr√©√©');
}

// Mettre √† jour CHANGELOG.md
async function updateChangelog() {
  log('üìù MISE √Ä JOUR DE CHANGELOG.md...');
  
  const changelogPath = path.join(process.cwd(), 'CHANGELOG.md');
  
  if (!fs.existsSync(changelogPath)) {
    await createNewChangelog();
    return;
  }
  
  let changelogContent = await fsp.readFile(changelogPath, 'utf8');
  
  // Ajouter la nouvelle entr√©e
  const newEntry = `## [${CONFIG.NEW_VERSION}] - ${new Date().toISOString().split('T')[0]}

### ‚ú® Nouvelles fonctionnalit√©s
- R√©organisation forc√©e des drivers avec fusion automatique
- Enrichissement inspir√© des sources .tmp*
- Nouveau syst√®me de cat√©gorisation vendor-category-model
- Gestion robuste des erreurs EPERM avec retry automatique
- Analyse compl√®te des sources externes pour am√©lioration

### üîß Am√©liorations techniques
- Scripts modulaires et r√©utilisables
- Gestion d'erreur compl√®te avec fallback
- Logs d√©taill√©s avec timestamps
- Validation automatique de l'application
- Mise √† jour automatique des m√©tadonn√©es

### üìÅ R√©organisation
- Suppression des dossiers "variants"
- Fusion intelligente des drivers dupliqu√©s
- Renommage coh√©rent selon le sch√©ma vendor-category-model
- Nettoyage automatique des dossiers vides
- Protection des sources .tmp* comme backup

### üéØ Objectifs atteints
- Projet enti√®rement r√©organis√© et optimis√©
- Drivers fusionn√©s et renomm√©s correctement
- M√©tadonn√©es synchronis√©es et √† jour
- Validation compl√®te de l'application
- Pr√™t pour le d√©ploiement

---

`;
  
  // Ins√©rer au d√©but du fichier
  changelogContent = newEntry + changelogContent;
  
  // Sauvegarder
  await fsp.writeFile(changelogPath, changelogContent);
  log('‚úÖ CHANGELOG.md mis √† jour');
}

// Cr√©er un nouveau CHANGELOG.md
async function createNewChangelog() {
  log('üìù CR√âATION D\'UN NOUVEAU CHANGELOG.md...');
  
  const newChangelogContent = `# Changelog

Tous les changements notables de ce projet seront document√©s dans ce fichier.

Le format est bas√© sur [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
et ce projet adh√®re au [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [${CONFIG.NEW_VERSION}] - ${new Date().toISOString().split('T')[0]}

### ‚ú® Nouvelles fonctionnalit√©s
- R√©organisation forc√©e des drivers avec fusion automatique
- Enrichissement inspir√© des sources .tmp*
- Nouveau syst√®me de cat√©gorisation vendor-category-model
- Gestion robuste des erreurs EPERM avec retry automatique
- Analyse compl√®te des sources externes pour am√©lioration

### üîß Am√©liorations techniques
- Scripts modulaires et r√©utilisables
- Gestion d'erreur compl√®te avec fallback
- Logs d√©taill√©s avec timestamps
- Validation automatique de l'application
- Mise √† jour automatique des m√©tadonn√©es

### üìÅ R√©organisation
- Suppression des dossiers "variants"
- Fusion intelligente des drivers dupliqu√©s
- Renommage coh√©rent selon le sch√©ma vendor-category-model
- Nettoyage automatique des dossiers vides
- Protection des sources .tmp* comme backup

### üéØ Objectifs atteints
- Projet enti√®rement r√©organis√© et optimis√©
- Drivers fusionn√©s et renomm√©s correctement
- M√©tadonn√©es synchronis√©es et √† jour
- Validation compl√®te de l'application
- Pr√™t pour le d√©ploiement

---

## [3.1.0] - 2025-01-XX

### ‚ú® Nouvelles fonctionnalit√©s
- Scripts d'orchestration modulaires
- Analyse des sources .tmp*
- R√©organisation des drivers

### üîß Am√©liorations techniques
- Gestion d'erreur am√©lior√©e
- Logs d√©taill√©s
- Validation automatique

---

## [3.0.0] - 2025-01-XX

### ‚ú® Nouvelles fonctionnalit√©s
- Migration vers Homey SDK v3
- Support des nouveaux appareils
- Interface utilisateur am√©lior√©e

### üîß Am√©liorations techniques
- Code refactoris√©
- Performance optimis√©e
- Compatibilit√© Homey >=6.0.0
`;
  
  const changelogPath = path.join(process.cwd(), 'CHANGELOG.md');
  await fsp.writeFile(changelogPath, newChangelogContent);
  log('‚úÖ Nouveau CHANGELOG.md cr√©√©');
}

// Fonction principale
async function updateVersionAndMetadata() {
  try {
    log('üöÄ MISE √Ä JOUR DE LA VERSION ET DES M√âTADONN√âES VERS ${CONFIG.NEW_VERSION}...');
    echo();
    
    // Mettre √† jour tous les fichiers
    await updateAppJson();
    echo();
    
    await updatePackageJson();
    echo();
    
    await updateReadme();
    echo();
    
    await updateChangelog();
    echo();
    
    log('üéâ MISE √Ä JOUR TERMIN√âE AVEC SUCC√àS !');
    log(`üì± Version: ${CONFIG.NEW_VERSION}`);
    log(`üîó App ID: ${CONFIG.APP_ID}`);
    log(`üìÖ Date: ${new Date().toISOString()}`);
    
    return true;
    
  } catch (error) {
    log(`‚ùå Erreur lors de la mise √† jour: ${error.message}`, 'error');
    throw error;
  }
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  updateVersionAndMetadata()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      log(`‚ùå Erreur d'ex√©cution: ${error.message}`, 'error');
      process.exit(1);
    });
}

module.exports = {
  updateVersionAndMetadata,
  CONFIG
};

