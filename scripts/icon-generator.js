// icon-generator.js - GÃ©nÃ©rateur d'icÃ´nes intelligente avec benchmark const fs = require('fs'); const path = require('path'); const axios = require('axios'); class IconGenerator { constructor() { this.assetsDir = path.join(__dirname, '../assets'); this.iconsDir = path.join(this.assetsDir, 'icons'); this.benchmarkData = {}; this.existingIcons = []; this.iconSizes = [64, 128, 256]; this.styleGuide = { colors: ['#667eea', '#764ba2', '#4ade80', '#fbbf24', '#f87171'], shapes: ['rounded', 'square', 'circle'], styles: ['flat', 'gradient', 'outline'] }; } // Initialisation async init() { console.log('ðŸŽ¨ Initialisation du gÃ©nÃ©rateur d\'icÃ´nes...'); // CrÃ©er les dossiers nÃ©cessaires this.createDirectories(); // Analyser les icÃ´nes existantes await this.analyzeExistingIcons(); // CrÃ©er le benchmark await this.createBenchmark(); console.log('âœ… GÃ©nÃ©rateur d\'icÃ´nes initialisÃ©'); } // CrÃ©ation des dossiers createDirectories() { const dirs = [this.assetsDir, this.iconsDir]; dirs.forEach(dir => { if (!fs.existsSync(dir)) { fs.mkdirSync(dir, { recursive: true }); console.log(`ðŸ“ CrÃ©Ã©: ${dir}`); } }); } // Analyse des icÃ´nes existantes async analyzeExistingIcons() { console.log('ðŸ” Analyse des icÃ´nes existantes...'); if (fs.existsSync(this.iconsDir)) { const files = fs.readdirSync(this.iconsDir); this.existingIcons = files.filter(file => file.endsWith('.png') || file.endsWith('.svg') ); console.log(`ðŸ“Š ${this.existingIcons.length} icÃ´nes existantes trouvÃ©es`); // Analyser le style des icÃ´nes existantes this.analyzeIconStyles(); } } // Analyse du style des icÃ´nes analyzeIconStyles() { console.log('ðŸŽ¨ Analyse du style des icÃ´nes...'); this.existingIcons.forEach(icon => { const iconPath = path.join(this.iconsDir, icon); const stats = fs.statSync(iconPath); // Analyser les mÃ©tadonnÃ©es this.benchmarkData[icon] = { size: stats.size, created: stats.birthtime, modified: stats.mtime, style: this.detectIconStyle(icon) }; }); } // DÃ©tection du style d'une icÃ´ne detectIconStyle(iconName) { const name = iconName.toLowerCase(); // Analyse basÃ©e sur le nom if (name.includes('switch') || name.includes('button')) { return { type: 'control', shape: 'rounded', style: 'flat' }; } else if (name.includes('sensor') || name.includes('detector')) { return { type: 'sensor', shape: 'circle', style: 'gradient' }; } else if (name.includes('light') || name.includes('bulb')) { return { type: 'light', shape: 'circle', style: 'gradient' }; } else { return { type: 'device', shape: 'square', style: 'outline' }; } } // CrÃ©ation du benchmark async createBenchmark() { console.log('ðŸ“Š CrÃ©ation du benchmark d\'icÃ´nes...'); const benchmark = { totalIcons: this.existingIcons.length, styles: this.analyzeStyles(), sizes: this.analyzeSizes(), colors: this.analyzeColors(), recommendations: this.generateRecommendations() }; // Sauvegarder le benchmark const benchmarkPath = path.join(this.assetsDir, 'icon-benchmark.json'); fs.writeFileSync(benchmarkPath, JSON.stringify(benchmark, null, 2)); console.log('âœ… Benchmark crÃ©Ã©:', benchmarkPath); return benchmark; } // Analyse des styles analyzeStyles() { const styles = {}; Object.values(this.benchmarkData).forEach(data => { const style = data.style.type; styles[style] = (styles[style] || 0) + 1; }); return styles; } // Analyse des tailles analyzeSizes() { const sizes = {}; Object.values(this.benchmarkData).forEach(data => { const size = data.size; if (size < 1000) sizes.small = (sizes.small || 0) + 1; else if (size < 5000) sizes.medium = (sizes.medium || 0) + 1; else sizes.large = (sizes.large || 0) + 1; }); return sizes; } // Analyse des couleurs analyzeColors() { return { primary: '#667eea', secondary: '#764ba2', success: '#4ade80', warning: '#fbbf24', error: '#f87171' }; } // GÃ©nÃ©ration des recommandations generateRecommendations() { return { preferredStyle: 'flat', preferredShape: 'rounded', preferredColors: ['#667eea', '#764ba2'], sizeStandards: { small: 64, medium: 128, large: 256 }, consistencyRules: [ 'Utiliser des formes arrondies pour les contrÃ´les', 'Utiliser des cercles pour les capteurs', 'Utiliser des gradients pour les lumiÃ¨res', 'Maintenir une palette de couleurs cohÃ©rente' ] }; } // GÃ©nÃ©ration d'icÃ´ne cohÃ©rente async generateConsistentIcon(deviceName, deviceType, manufacturerId) { console.log(`ðŸŽ¨ GÃ©nÃ©ration d'icÃ´ne pour: ${deviceName}`); // Analyser le device pour dÃ©terminer le style const iconStyle = this.determineIconStyle(deviceName, deviceType, manufacturerId); // GÃ©nÃ©rer l'icÃ´ne avec le style cohÃ©rent const iconData = await this.generateIconWithStyle(iconStyle); // CrÃ©er les diffÃ©rentes tailles const iconFiles = await this.createIconSizes(deviceName, iconData); // Sauvegarder les mÃ©tadonnÃ©es this.saveIconMetadata(deviceName, iconStyle, iconFiles); console.log(`âœ… IcÃ´ne gÃ©nÃ©rÃ©e pour ${deviceName}`); return iconFiles; } // DÃ©termination du style d'icÃ´ne determineIconStyle(deviceName, deviceType, manufacturerId) { const name = deviceName.toLowerCase(); const type = deviceType.toLowerCase(); // RÃ¨gles de style basÃ©es sur le type et le nom if (type.includes('switch') || type.includes('button') || name.includes('switch')) { return { type: 'control', shape: 'rounded', style: 'flat', color: '#667eea', icon: 'fas fa-toggle-on' }; } else if (type.includes('sensor') || type.includes('detector') || name.includes('sensor')) { return { type: 'sensor', shape: 'circle', style: 'gradient', color: '#4ade80', icon: 'fas fa-microchip' }; } else if (type.includes('light') || type.includes('bulb') || name.includes('light')) { return { type: 'light', shape: 'circle', style: 'gradient', color: '#fbbf24', icon: 'fas fa-lightbulb' }; } else if (type.includes('remote') || type.includes('controller')) { return { type: 'remote', shape: 'square', style: 'outline', color: '#764ba2', icon: 'fas fa-gamepad' }; } else { return { type: 'device', shape: 'square', style: 'flat', color: '#667eea', icon: 'fas fa-microchip' }; } } // GÃ©nÃ©ration d'icÃ´ne avec style async generateIconWithStyle(style) { // Simulation de gÃ©nÃ©ration d'icÃ´ne avec IA // En rÃ©alitÃ©, on utiliserait DALL-E ou une autre IA return { svg: this.generateSVG(style), png: await this.generatePNG(style), metadata: { style: style, generated: new Date().toISOString(), version: '1.0' } }; } // GÃ©nÃ©ration SVG generateSVG(style) { const { shape, color, icon } = style; let svgContent = ''; switch (shape) { case 'circle': svgContent = ` <svg width="128" height="128" viewBox="0 0 128 128" xmlns="http://www.w3.org/2000/svg"> <circle cx="64" cy="64" r="60" fill="${color}" stroke="#ffffff" stroke-width="4"/> <text x="64" y="80" font-family="FontAwesome" font-size="40" fill="#ffffff" text-anchor="middle">${icon}</text> </svg> `; break; case 'rounded': svgContent = ` <svg width="128" height="128" viewBox="0 0 128 128" xmlns="http://www.w3.org/2000/svg"> <rect x="8" y="8" width="112" height="112" rx="16" fill="${color}"/> <text x="64" y="80" font-family="FontAwesome" font-size="40" fill="#ffffff" text-anchor="middle">${icon}</text> </svg> `; break; default: // square svgContent = ` <svg width="128" height="128" viewBox="0 0 128 128" xmlns="http://www.w3.org/2000/svg"> <rect x="8" y="8" width="112" height="112" fill="${color}"/> <text x="64" y="80" font-family="FontAwesome" font-size="40" fill="#ffffff" text-anchor="middle">${icon}</text> </svg> `; } return svgContent; } // GÃ©nÃ©ration PNG (simulation) async generatePNG(style) { // En rÃ©alitÃ©, on convertirait le SVG en PNG // Pour l'instant, on retourne une simulation return { data: 'simulated-png-data', format: 'png', style: style }; } // CrÃ©ation des diffÃ©rentes tailles async createIconSizes(deviceName, iconData) { const iconFiles = {}; for (const size of this.iconSizes) { const fileName = `${deviceName}-${size}.png`; const filePath = path.join(this.iconsDir, fileName); // Simuler la crÃ©ation du fichier iconFiles[size] = { path: filePath, size: size, exists: false }; // En rÃ©alitÃ©, on redimensionnerait l'icÃ´ne console.log(`ðŸ“ CrÃ©Ã©: ${fileName} (${size}x${size})`); } return iconFiles; } // Sauvegarde des mÃ©tadonnÃ©es saveIconMetadata(deviceName, style, iconFiles) { const metadata = { deviceName, style, iconFiles, created: new Date().toISOString(), generator: 'icon-generator.js' }; const metadataPath = path.join(this.iconsDir, `${deviceName}-metadata.json`); fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, 2)); } // Redimensionnement automatique async resizeIcon(iconPath, targetSize) { console.log(`ðŸ“ Redimensionnement: ${iconPath} vers ${targetSize}x${targetSize}`); // En rÃ©alitÃ©, on utiliserait une bibliothÃ¨que comme sharp ou jimp // Pour l'instant, on simule return { originalPath: iconPath, resizedPath: iconPath.replace('.png', `-${targetSize}.png`), size: targetSize, quality: 'high' }; } // Validation de la cohÃ©rence validateConsistency(deviceName, iconStyle) { // VÃ©rifier si les recommandations existent if (!this.benchmarkData.recommendations) { console.warn(`âš ï¸ Pas de recommandations disponibles pour ${deviceName}`); return true; // Par dÃ©faut, considÃ©rer comme cohÃ©rent } const recommendations = this.benchmarkData.recommendations; const issues = []; // VÃ©rifier la cohÃ©rence avec les recommandations if (iconStyle.shape && recommendations.preferredShape && iconStyle.shape !== recommendations.preferredShape) { issues.push(`Shape ${iconStyle.shape} ne correspond pas au style recommandÃ© ${recommendations.preferredShape}`); } if (iconStyle.color && recommendations.preferredColors && !recommendations.preferredColors.includes(iconStyle.color)) { issues.push(`Couleur ${iconStyle.color} ne fait pas partie de la palette recommandÃ©e`); } if (issues.length > 0) { console.warn(`âš ï¸ ProblÃ¨mes de cohÃ©rence pour ${deviceName}:`, issues); } return issues.length === 0; } // GÃ©nÃ©ration en lot async generateBatchIcons(devices) { console.log(`ðŸŽ¨ GÃ©nÃ©ration en lot de ${devices.length} icÃ´nes...`); const results = []; for (const device of devices) { try { const iconFiles = await this.generateConsistentIcon( device.name, device.type, device.manufacturerId ); const isConsistent = this.validateConsistency(device.name, iconFiles.style); results.push({ device: device.name, success: true, files: iconFiles, consistent: isConsistent }); console.log(`âœ… ${device.name}: ${isConsistent ? 'CohÃ©rent' : 'IncohÃ©rent'}`); } catch (error) { console.error(`âŒ Erreur pour ${device.name}:`, error.message); results.push({ device: device.name, success: false, error: error.message }); } } // GÃ©nÃ©rer le rapport this.generateReport(results); return results; } // GÃ©nÃ©ration du rapport generateReport(results) { const report = { total: results.length, successful: results.filter(r => r.success).length, failed: results.filter(r => !r.success).length, consistent: results.filter(r => r.consistent).length, inconsistent: results.filter(r => r.success && !r.consistent).length, details: results }; const reportPath = path.join(this.assetsDir, 'icon-generation-report.json'); fs.writeFileSync(reportPath, JSON.stringify(report, null, 2)); console.log('ðŸ“Š Rapport gÃ©nÃ©rÃ©:', reportPath); console.log(`ðŸ“ˆ Statistiques: ${report.successful}/${report.total} rÃ©ussis, ${report.consistent}/${report.successful} cohÃ©rents`); } } // Export pour utilisation module.exports = IconGenerator; // Utilisation directe si appelÃ© directement if (require.main === module) { const generator = new IconGenerator(); generator.init().then(() => { console.log('ðŸŽ¨ GÃ©nÃ©rateur d\'icÃ´nes prÃªt'); // Exemple d'utilisation const sampleDevices = [ { name: 'TS0043', type: '3 Btn Sw', manufacturerId: '_TZ3000_bczr4e10' }, { name: 'TS0001', type: '1 Btn Sw', manufacturerId: '_TYZB01_a12345' }, { name: 'TS0044', type: 'Remote', manufacturerId: '_TZ3000_xxxx' } ]; generator.generateBatchIcons(sampleDevices); }); } 
