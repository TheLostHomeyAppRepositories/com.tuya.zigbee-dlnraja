# Migration des Drivers SDK3 - Tuya Zigbee Project
Write-Host "Migration des Drivers SDK3 - Tuya Zigbee Project" -ForegroundColor Green
Write-Host "===============================================" -ForegroundColor Green

# Lire le fichier CSV pour identifier les drivers SDK3
$CSVPath = "rapports/DRIVERS_ANALYSIS_DETAILED_$(Get-Date -Format 'yyyyMMdd').csv"

if (!(Test-Path $CSVPath)) {
    Write-Host "Fichier d'analyse non trouvé. Exécutez d'abord l'analyse des drivers." -ForegroundColor Red
    exit 1
}

$CSVData = Import-Csv $CSVPath
$SDK3Drivers = $CSVData | Where-Object { $_.Complexity -eq "SDK3" }

Write-Host "Drivers SDK3 identifiés pour migration:" -ForegroundColor Cyan
foreach ($Driver in $SDK3Drivers) {
    Write-Host "  - $($Driver.Name)" -ForegroundColor White
}

$MigratedCount = 0
$FailedCount = 0

foreach ($Driver in $SDK3Drivers) {
    $SourcePath = "drivers/in_progress/$($Driver.Name)"
    $DestPath = "drivers/sdk3/$($Driver.Name)"
    
    Write-Host "`nMigrating $($Driver.Name)..." -ForegroundColor Yellow
    
    if (Test-Path $SourcePath) {
        try {
            # Créer le dossier de destination s'il n'existe pas
            if (!(Test-Path "drivers/sdk3")) {
                New-Item -ItemType Directory -Path "drivers/sdk3" -Force
            }
            
            # Migrer le driver
            Move-Item $SourcePath $DestPath -Force
            $MigratedCount++
            Write-Host "  ✅ Migrated: $($Driver.Name) -> SDK3" -ForegroundColor Green
            
            # Créer un fichier de migration log
            $MigrationLog = @"
# Migration Log - $($Driver.Name)

**Date:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
**Source:** drivers/in_progress/$($Driver.Name)
**Destination:** drivers/sdk3/$($Driver.Name)
**Status:** ✅ Migrated successfully
**Reason:** SDK3 driver - easy migration

## Migration Details
- Driver contains SDK3 patterns: $($Driver.SDK3Patterns)
- Migration effort: $($Driver.MigrationEffort)
- Priority: $($Driver.Priority)
- Notes: $($Driver.Notes)

## SDK3 Patterns Detected
$($Driver.SDK3Patterns -split ';' | ForEach-Object { "- $_" })

## Next Steps
1. Review migrated code
2. Test functionality
3. Update capabilities if needed
4. Add proper SDK3 features

---
*Migration performed automatically by SDK3 Driver Migration Script*
"@
            
            Set-Content -Path "$DestPath/MIGRATION_LOG.md" -Value $MigrationLog -Encoding UTF8
            
        } catch {
            $FailedCount++
            Write-Host "  ❌ Failed to migrate: $($Driver.Name) - $($_.Exception.Message)" -ForegroundColor Red
        }
    } else {
        $FailedCount++
        Write-Host "  ❌ Driver not found: $($Driver.Name)" -ForegroundColor Red
    }
}

# Mettre à jour les statistiques
$Sdk3Count = (Get-ChildItem -Path "drivers/sdk3" -Directory -ErrorAction SilentlyContinue | Measure-Object).Count
$InProgressCount = (Get-ChildItem -Path "drivers/in_progress" -Directory -ErrorAction SilentlyContinue | Measure-Object).Count

Write-Host "`nMigration Summary:" -ForegroundColor Cyan
Write-Host "=================" -ForegroundColor Cyan
Write-Host "  Total SDK3 Drivers: $($SDK3Drivers.Count)" -ForegroundColor White
Write-Host "  Successfully Migrated: $MigratedCount" -ForegroundColor Green
Write-Host "  Failed Migrations: $FailedCount" -ForegroundColor Red
Write-Host "  New SDK3 Count: $Sdk3Count" -ForegroundColor Green
Write-Host "  Remaining In Progress: $InProgressCount" -ForegroundColor Yellow

# Générer un rapport de migration
$ReportDate = Get-Date -Format "yyyyMMdd"
$ReportContent = @"
# SDK3 Driver Migration Report - Tuya Zigbee Project

**Date:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
**Generated by:** SDK3 Driver Migration Script

## Migration Summary

- **Total SDK3 Drivers:** $($SDK3Drivers.Count)
- **Successfully Migrated:** $MigratedCount
- **Failed Migrations:** $FailedCount
- **New SDK3 Count:** $Sdk3Count
- **Remaining In Progress:** $InProgressCount

## Migrated Drivers

"@

foreach ($Driver in $SDK3Drivers) {
    $DestPath = "drivers/sdk3/$($Driver.Name)"
    if (Test-Path $DestPath) {
        $ReportContent += "- **$($Driver.Name)** ✅ Migrated to SDK3`n"
        $ReportContent += "  - **Effort:** $($Driver.MigrationEffort)`n"
        $ReportContent += "  - **Patterns:** $($Driver.SDK3Patterns)`n"
        $ReportContent += "  - **Notes:** $($Driver.Notes)`n`n"
    } else {
        $ReportContent += "- **$($Driver.Name)** ❌ Migration failed`n`n"
    }
}

$ReportContent += @"

## Migration Details

Each migrated driver includes:
- MIGRATION_LOG.md with details
- SDK3 patterns already present
- Ready for SDK3 development
- Easy migration path

## Next Steps

1. **Review migrated drivers** - Check code quality
2. **Test functionality** - Ensure drivers work with SDK3
3. **Update capabilities** - Add proper SDK3 features
4. **Documentation** - Update driver documentation
5. **Community testing** - Get feedback from users

## Migration Statistics

- **Total effort saved:** $($MigratedCount * 3) hours
- **Drivers ready for SDK3:** $Sdk3Count
- **Migration success rate:** $([math]::Round(($MigratedCount / $SDK3Drivers.Count) * 100, 1))%

---
*Report generated automatically by SDK3 Driver Migration Script*
"@

if (!(Test-Path "rapports")) {
    New-Item -ItemType Directory -Path "rapports" -Force
}

Set-Content -Path "rapports/SDK3_MIGRATION_REPORT_$ReportDate.md" -Value $ReportContent -Encoding UTF8
Write-Host "`nMigration report saved to: rapports/SDK3_MIGRATION_REPORT_$ReportDate.md" -ForegroundColor Green

Write-Host "`nSDK3 driver migration completed!" -ForegroundColor Green 