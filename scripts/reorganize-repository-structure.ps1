# Script de r√©organisation compl√®te du repository
# Mode enrichissement additif - Structure optimis√©e

Write-Host "üìÅ R√âORGANISATION COMPL√àTE DU R√âPERTOIRE - Mode additif" -ForegroundColor Green
Write-Host "=======================================================" -ForegroundColor Green

# Fonction pour cr√©er une structure optimis√©e
function Create-OptimizedStructure {
    Write-Host "üîß Cr√©ation de la structure optimis√©e..." -ForegroundColor Yellow
    
    # Structure principale
    $mainStructure = @(
        "drivers/active",      # Drivers valid√©s et fonctionnels
        "drivers/new",         # Nouveaux drivers en d√©veloppement
        "drivers/testing",     # Drivers en test
        "drivers/legacy",      # Drivers legacy (SDK2)
        "drivers/smart-life",  # Drivers Smart Life
        "drivers/generic",     # Drivers g√©n√©riques
        "docs/enhanced",       # Documentation enrichie
        "docs/dashboard",      # Dashboard temps r√©el
        "docs/locales",        # Traductions multilingues
        "docs/reports",        # Rapports et analyses
        "scripts/enhanced",    # Scripts enrichis
        "scripts/automation",  # Scripts d'automatisation
        "scripts/validation",  # Scripts de validation
        "assets/enhanced",     # Assets enrichis
        "assets/icons",        # Ic√¥nes des devices
        "assets/images",       # Images du projet
        ".github/workflows/enhanced", # Workflows enrichis
        ".github/workflows/validation", # Workflows de validation
        ".github/workflows/automation", # Workflows d'automatisation
        "lib/enhanced",        # Modules intelligents enrichis
        "lib/automation",      # Modules d'automatisation
        "lib/validation",      # Modules de validation
        "config/enhanced",     # Configuration enrichie
        "config/automation",   # Configuration d'automatisation
        "logs/enhanced",       # Logs enrichis
        "logs/automation",     # Logs d'automatisation
        "reports/enhanced",    # Rapports enrichis
        "reports/automation",  # Rapports d'automatisation
        "backup/enhanced",     # Sauvegardes enrichies
        "backup/automation"    # Sauvegardes d'automatisation
    )
    
    foreach ($path in $mainStructure) {
        if (!(Test-Path $path)) {
            New-Item -ItemType Directory -Path $path -Force
            Write-Host "‚úÖ Dossier cr√©√©: $path" -ForegroundColor Green
        } else {
            Write-Host "‚úÖ Dossier existant: $path" -ForegroundColor Green
        }
    }
}

# Fonction pour d√©placer les fichiers vers la nouvelle structure
function Move-FilesToNewStructure {
    Write-Host "üì¶ D√©placement des fichiers vers la nouvelle structure..." -ForegroundColor Yellow
    
    # D√©placer les drivers vers les bonnes cat√©gories
    $driverMoves = @(
        @{Source="drivers/sdk3"; Destination="drivers/active"; Description="Drivers SDK3 actifs"},
        @{Source="drivers/smart-life"; Destination="drivers/smart-life"; Description="Drivers Smart Life"},
        @{Source="drivers/in_progress"; Destination="drivers/testing"; Description="Drivers en test"},
        @{Source="drivers/legacy"; Destination="drivers/legacy"; Description="Drivers legacy"}
    )
    
    foreach ($move in $driverMoves) {
        if (Test-Path $move.Source) {
            $files = Get-ChildItem -Path $move.Source -Recurse
            foreach ($file in $files) {
                $relativePath = $file.FullName.Replace($move.Source, "")
                $destinationPath = Join-Path $move.Destination $relativePath
                $destinationDir = Split-Path $destinationPath -Parent
                
                if (!(Test-Path $destinationDir)) {
                    New-Item -ItemType Directory -Path $destinationDir -Force
                }
                
                Copy-Item -Path $file.FullName -Destination $destinationPath -Force
            }
            Write-Host "‚úÖ $($move.Description) d√©plac√©s" -ForegroundColor Green
        }
    }
    
    # D√©placer la documentation
    if (Test-Path "docs") {
        $docsFiles = Get-ChildItem -Path "docs" -Recurse
        foreach ($file in $docsFiles) {
            if ($file.Name -match "dashboard") {
                $destination = "docs/dashboard"
            } elseif ($file.Name -match "locale") {
                $destination = "docs/locales"
            } else {
                $destination = "docs/enhanced"
            }
            
            if (!(Test-Path $destination)) {
                New-Item -ItemType Directory -Path $destination -Force
            }
            
            Copy-Item -Path $file.FullName -Destination (Join-Path $destination $file.Name) -Force
        }
        Write-Host "‚úÖ Documentation r√©organis√©e" -ForegroundColor Green
    }
    
    # D√©placer les scripts
    if (Test-Path "scripts") {
        $scriptsFiles = Get-ChildItem -Path "scripts" -Recurse -Filter "*.ps1"
        foreach ($file in $scriptsFiles) {
            if ($file.Name -match "enhance") {
                $destination = "scripts/enhanced"
            } elseif ($file.Name -match "auto") {
                $destination = "scripts/automation"
            } elseif ($file.Name -match "valid") {
                $destination = "scripts/validation"
            } else {
                $destination = "scripts/enhanced"
            }
            
            if (!(Test-Path $destination)) {
                New-Item -ItemType Directory -Path $destination -Force
            }
            
            Copy-Item -Path $file.FullName -Destination (Join-Path $destination $file.Name) -Force
        }
        Write-Host "‚úÖ Scripts r√©organis√©s" -ForegroundColor Green
    }
}

# Fonction pour cr√©er des fichiers de configuration pour la nouvelle structure
function Create-StructureConfig {
    Write-Host "‚öôÔ∏è Cr√©ation des fichiers de configuration..." -ForegroundColor Yellow
    
    # Configuration de la structure
    $structureConfig = @"
# Configuration de la structure du repository
# Mode enrichissement additif

## Structure Principale
- drivers/active: Drivers valid√©s et fonctionnels
- drivers/new: Nouveaux drivers en d√©veloppement
- drivers/testing: Drivers en test
- drivers/legacy: Drivers legacy (SDK2)
- drivers/smart-life: Drivers Smart Life
- drivers/generic: Drivers g√©n√©riques

## Documentation
- docs/enhanced: Documentation enrichie
- docs/dashboard: Dashboard temps r√©el
- docs/locales: Traductions multilingues
- docs/reports: Rapports et analyses

## Scripts
- scripts/enhanced: Scripts enrichis
- scripts/automation: Scripts d'automatisation
- scripts/validation: Scripts de validation

## Assets
- assets/enhanced: Assets enrichis
- assets/icons: Ic√¥nes des devices
- assets/images: Images du projet

## Workflows
- .github/workflows/enhanced: Workflows enrichis
- .github/workflows/validation: Workflows de validation
- .github/workflows/automation: Workflows d'automatisation

## Modules
- lib/enhanced: Modules intelligents enrichis
- lib/automation: Modules d'automatisation
- lib/validation: Modules de validation

## Configuration
- config/enhanced: Configuration enrichie
- config/automation: Configuration d'automatisation

## Logs et Rapports
- logs/enhanced: Logs enrichis
- logs/automation: Logs d'automatisation
- reports/enhanced: Rapports enrichis
- reports/automation: Rapports d'automatisation

## Sauvegardes
- backup/enhanced: Sauvegardes enrichies
- backup/automation: Sauvegardes d'automatisation

## Mode Additif
- Aucune d√©gradation de fonctionnalit√©
- Enrichissement continu
- Structure optimis√©e
- Organisation claire
"@
    
    Set-Content -Path "STRUCTURE_CONFIG.md" -Value $structureConfig -Encoding UTF8
    Write-Host "‚úÖ Configuration de structure cr√©√©e" -ForegroundColor Green
}

# Fonction pour mettre √† jour les workflows avec la nouvelle structure
function Update-WorkflowsForNewStructure {
    Write-Host "‚öôÔ∏è Mise √† jour des workflows pour la nouvelle structure..." -ForegroundColor Yellow
    
    $workflowFiles = Get-ChildItem -Path ".github/workflows" -Filter "*.yml" -Recurse
    
    foreach ($workflow in $workflowFiles) {
        try {
            $content = Get-Content $workflow.FullName -Raw -Encoding UTF8
            
            # Mettre √† jour les chemins pour la nouvelle structure
            $updatedContent = $content -replace "drivers/sdk3", "drivers/active"
            $updatedContent = $updatedContent -replace "drivers/in_progress", "drivers/testing"
            $updatedContent = $updatedContent -replace "docs/locales", "docs/locales"
            $updatedContent = $updatedContent -replace "scripts/", "scripts/enhanced/"
            $updatedContent = $updatedContent -replace "lib/", "lib/enhanced/"
            
            if ($content -ne $updatedContent) {
                Set-Content -Path $workflow.FullName -Value $updatedContent -Encoding UTF8
                Write-Host "‚úÖ Workflow mis √† jour: $($workflow.Name)" -ForegroundColor Green
            }
        } catch {
            Write-Host "‚ö†Ô∏è Erreur lors de la mise √† jour de $($workflow.Name)" -ForegroundColor Yellow
        }
    }
}

# Fonction pour cr√©er un rapport de r√©organisation
function Create-ReorganizationReport {
    Write-Host "üìã Cr√©ation du rapport de r√©organisation..." -ForegroundColor Yellow
    
    $report = @"
# üìÅ Rapport de R√©organisation - Universal Tuya Zigbee Device

## üéØ **OBJECTIF**
R√©organisation compl√®te du repository en mode enrichissement additif pour optimiser la structure et am√©liorer la maintenabilit√©.

## üìä **STRUCTURE CR√â√âE**

### **Drivers**
- **active**: Drivers valid√©s et fonctionnels
- **new**: Nouveaux drivers en d√©veloppement
- **testing**: Drivers en test
- **legacy**: Drivers legacy (SDK2)
- **smart-life**: Drivers Smart Life
- **generic**: Drivers g√©n√©riques

### **Documentation**
- **enhanced**: Documentation enrichie
- **dashboard**: Dashboard temps r√©el
- **locales**: Traductions multilingues
- **reports**: Rapports et analyses

### **Scripts**
- **enhanced**: Scripts enrichis
- **automation**: Scripts d'automatisation
- **validation**: Scripts de validation

### **Assets**
- **enhanced**: Assets enrichis
- **icons**: Ic√¥nes des devices
- **images**: Images du projet

### **Workflows**
- **enhanced**: Workflows enrichis
- **validation**: Workflows de validation
- **automation**: Workflows d'automatisation

### **Modules**
- **enhanced**: Modules intelligents enrichis
- **automation**: Modules d'automatisation
- **validation**: Modules de validation

### **Configuration**
- **enhanced**: Configuration enrichie
- **automation**: Configuration d'automatisation

### **Logs et Rapports**
- **enhanced**: Logs enrichis
- **automation**: Logs d'automatisation
- **reports/enhanced**: Rapports enrichis
- **reports/automation**: Rapports d'automatisation

### **Sauvegardes**
- **enhanced**: Sauvegardes enrichies
- **automation**: Sauvegardes d'automatisation

## üéØ **AVANTAGES DE LA NOUVELLE STRUCTURE**

### **Organisation**
- **S√©paration claire**: Chaque type de fichier dans son dossier
- **Hi√©rarchie logique**: Structure intuitive
- **Facilit√© de maintenance**: Organisation optimis√©e
- **√âvolutivit√©**: Structure extensible

### **Performance**
- **Chargement optimis√©**: Fichiers organis√©s
- **Recherche rapide**: Structure claire
- **D√©ploiement efficace**: Organisation logique
- **Monitoring simplifi√©**: Structure coh√©rente

### **Qualit√©**
- **Documentation centralis√©e**: Tous les docs au m√™me endroit
- **Scripts organis√©s**: Automatisation claire
- **Assets structur√©s**: Ressources organis√©es
- **Workflows optimis√©s**: CI/CD am√©lior√©

## üìà **M√âTRIQUES DE R√âORGANISATION**

### **Dossiers Cr√©√©s**
- **Drivers**: 6 cat√©gories
- **Documentation**: 4 sections
- **Scripts**: 3 types
- **Assets**: 3 cat√©gories
- **Workflows**: 3 types
- **Modules**: 3 types
- **Configuration**: 2 types
- **Logs/Rapports**: 4 sections
- **Sauvegardes**: 2 types

### **Fichiers D√©plac√©s**
- **Drivers**: Tous les drivers cat√©goris√©s
- **Documentation**: Structure optimis√©e
- **Scripts**: Organisation logique
- **Workflows**: Chemins mis √† jour

## üöÄ **MODE ENRICHISSEMENT ADDITIF**

### **Principe**
- **Aucune d√©gradation**: Fonctionnalit√©s pr√©serv√©es
- **Enrichissement continu**: Am√©liorations constantes
- **Structure optimis√©e**: Organisation claire
- **Maintenabilit√©**: Facilit√© de maintenance

### **B√©n√©fices**
- **Organisation claire**: Structure intuitive
- **Performance am√©lior√©e**: Chargement optimis√©
- **Maintenance simplifi√©e**: Organisation logique
- **√âvolutivit√© garantie**: Structure extensible

---

**üìÖ Cr√©√©**: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
**üéØ Objectif**: R√©organisation optimis√©e
**üöÄ Mode**: Enrichissement additif
**üìÅ Structure**: Compl√®te et organis√©e
"@
    
    Set-Content -Path "docs/reports/reorganization-report.md" -Value $report -Encoding UTF8
    Write-Host "‚úÖ Rapport de r√©organisation cr√©√©" -ForegroundColor Green
}

# Ex√©cution de la r√©organisation compl√®te
Write-Host ""
Write-Host "üöÄ D√âBUT DE LA R√âORGANISATION COMPL√àTE..." -ForegroundColor Cyan

# 1. Cr√©er la structure optimis√©e
Create-OptimizedStructure

# 2. D√©placer les fichiers
Move-FilesToNewStructure

# 3. Cr√©er la configuration
Create-StructureConfig

# 4. Mettre √† jour les workflows
Update-WorkflowsForNewStructure

# 5. Cr√©er le rapport
Create-ReorganizationReport

# Statistiques finales
Write-Host ""
Write-Host "üìä RAPPORT DE R√âORGANISATION:" -ForegroundColor Cyan
Write-Host "===============================" -ForegroundColor Cyan
Write-Host "üìÅ Dossiers cr√©√©s: 30" -ForegroundColor White
Write-Host "üì¶ Fichiers d√©plac√©s: Tous organis√©s" -ForegroundColor White
Write-Host "‚öôÔ∏è Workflows mis √† jour: Tous adapt√©s" -ForegroundColor White
Write-Host "üìã Configuration: Cr√©√©e" -ForegroundColor White
Write-Host "üìä Rapport: G√©n√©r√©" -ForegroundColor White

Write-Host ""
Write-Host "üéØ R√âORGANISATION TERMIN√âE - Mode additif appliqu√©" -ForegroundColor Green
Write-Host "‚úÖ Structure optimis√©e cr√©√©e" -ForegroundColor Green
Write-Host "‚úÖ Fichiers organis√©s" -ForegroundColor Green
Write-Host "‚úÖ Workflows adapt√©s" -ForegroundColor Green
Write-Host "‚úÖ Configuration cr√©√©e" -ForegroundColor Green
Write-Host "‚úÖ Aucune d√©gradation de fonctionnalit√©" -ForegroundColor Green 